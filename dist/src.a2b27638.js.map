{"version":3,"sources":["node_modules/proj4/lib/global.js","node_modules/proj4/lib/constants/values.js","node_modules/proj4/lib/constants/PrimeMeridian.js","node_modules/proj4/lib/constants/units.js","node_modules/proj4/lib/match.js","node_modules/proj4/lib/projString.js","node_modules/wkt-parser/parser.js","node_modules/wkt-parser/process.js","node_modules/wkt-parser/index.js","node_modules/proj4/lib/defs.js","node_modules/proj4/lib/parseCode.js","node_modules/proj4/lib/extend.js","node_modules/proj4/lib/common/msfnz.js","node_modules/proj4/lib/common/sign.js","node_modules/proj4/lib/common/adjust_lon.js","node_modules/proj4/lib/common/tsfnz.js","node_modules/proj4/lib/common/phi2z.js","node_modules/proj4/lib/projections/merc.js","node_modules/proj4/lib/projections/longlat.js","node_modules/proj4/lib/projections.js","node_modules/proj4/lib/constants/Ellipsoid.js","node_modules/proj4/lib/deriveConstants.js","node_modules/proj4/lib/constants/Datum.js","node_modules/proj4/lib/datum.js","node_modules/proj4/lib/nadgrid.js","node_modules/proj4/lib/Proj.js","node_modules/proj4/lib/datumUtils.js","node_modules/proj4/lib/datum_transform.js","node_modules/proj4/lib/adjust_axis.js","node_modules/proj4/lib/common/toPoint.js","node_modules/proj4/lib/checkSanity.js","node_modules/proj4/lib/transform.js","node_modules/proj4/lib/core.js","node_modules/mgrs/mgrs.js","node_modules/proj4/lib/Point.js","node_modules/proj4/lib/common/pj_enfn.js","node_modules/proj4/lib/common/pj_mlfn.js","node_modules/proj4/lib/common/pj_inv_mlfn.js","node_modules/proj4/lib/projections/tmerc.js","node_modules/proj4/lib/common/sinh.js","node_modules/proj4/lib/common/hypot.js","node_modules/proj4/lib/common/log1py.js","node_modules/proj4/lib/common/asinhy.js","node_modules/proj4/lib/common/gatg.js","node_modules/proj4/lib/common/clens.js","node_modules/proj4/lib/common/cosh.js","node_modules/proj4/lib/common/clens_cmplx.js","node_modules/proj4/lib/projections/etmerc.js","node_modules/proj4/lib/common/adjust_zone.js","node_modules/proj4/lib/projections/utm.js","node_modules/proj4/lib/common/srat.js","node_modules/proj4/lib/projections/gauss.js","node_modules/proj4/lib/projections/sterea.js","node_modules/proj4/lib/projections/stere.js","node_modules/proj4/lib/projections/somerc.js","node_modules/proj4/lib/projections/omerc.js","node_modules/proj4/lib/projections/lcc.js","node_modules/proj4/lib/projections/krovak.js","node_modules/proj4/lib/common/mlfn.js","node_modules/proj4/lib/common/e0fn.js","node_modules/proj4/lib/common/e1fn.js","node_modules/proj4/lib/common/e2fn.js","node_modules/proj4/lib/common/e3fn.js","node_modules/proj4/lib/common/gN.js","node_modules/proj4/lib/common/adjust_lat.js","node_modules/proj4/lib/common/imlfn.js","node_modules/proj4/lib/projections/cass.js","node_modules/proj4/lib/common/qsfnz.js","node_modules/proj4/lib/projections/laea.js","node_modules/proj4/lib/common/asinz.js","node_modules/proj4/lib/projections/aea.js","node_modules/proj4/lib/projections/gnom.js","node_modules/proj4/lib/common/iqsfnz.js","node_modules/proj4/lib/projections/cea.js","node_modules/proj4/lib/projections/eqc.js","node_modules/proj4/lib/projections/poly.js","node_modules/proj4/lib/projections/nzmg.js","node_modules/proj4/lib/projections/mill.js","node_modules/proj4/lib/projections/sinu.js","node_modules/proj4/lib/projections/moll.js","node_modules/proj4/lib/projections/eqdc.js","node_modules/proj4/lib/projections/vandg.js","node_modules/proj4/lib/projections/aeqd.js","node_modules/proj4/lib/projections/ortho.js","node_modules/proj4/lib/projections/qsc.js","node_modules/proj4/lib/projections/robin.js","node_modules/proj4/lib/projections/geocent.js","node_modules/proj4/lib/projections/tpers.js","node_modules/proj4/lib/projections/geos.js","node_modules/proj4/projs.js","node_modules/proj4/lib/index.js","node_modules/@turf/helpers/dist/es/index.js","node_modules/@turf/invariant/dist/es/index.js","node_modules/@turf/boolean-point-in-polygon/dist/es/index.js","node_modules/dotted-map/src/countries.geo.json","node_modules/dotted-map/src/without-countries.js","node_modules/dotted-map/src/with-countries.js","src/index.js","node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["_default","defs","WGS84","GOOGLE","PJD_3PARAM","exports","PJD_7PARAM","PJD_GRIDSHIFT","PJD_WGS84","PJD_NODATUM","SRS_WGS84_SEMIMAJOR","SRS_WGS84_SEMIMINOR","SRS_WGS84_ESQUARED","SEC_TO_RAD","HALF_PI","Math","PI","SIXTH","RA4","RA6","EPSLN","D2R","R2D","FORTPI","TWO_PI","SPI","default","_exports","greenwich","lisbon","paris","bogota","madrid","rome","bern","jakarta","ferro","brussels","stockholm","athens","oslo","ft","to_meter","ignoredChar","match","obj","key","keys","Object","lkey","toLowerCase","replace","i","testkey","processedKey","length","_values","require","_PrimeMeridian","_interopRequireDefault","_units","_match","__esModule","defData","self","paramObj","split","map","v","trim","filter","a","reduce","p","push","paramName","paramVal","paramOutname","params","proj","datum","rf","parseFloat","lat_0","lat0","lat_1","lat1","lat_2","lat2","lat_ts","lon_0","long0","lon_1","long1","lon_2","long2","alpha","gamma","rectified_grid_angle","lonc","longc","x_0","x0","y_0","y0","k_0","k0","k","b","r_a","R_A","zone","parseInt","south","utmSouth","towgs84","datum_params","units","unit","from_greenwich","pm","PrimeMeridian","nadgrids","datumCode","axis","legalAxis","indexOf","substr","approx","parseString","NEUTRAL","KEYWORD","NUMBER","QUOTED","AFTERQUOTE","ENDED","whitespace","latin","keyword","endThings","digets","Parser","text","Error","level","place","root","stack","currentObject","state","prototype","readCharicter","char","test","neutral","quoted","afterquote","number","word","afterItem","pop","newObjects","output","txt","parser","mapit","value","Array","isArray","unshift","thing","out","newObj","item","sExpr","shift","name","convert","_parser","_process","_typeof","Symbol","iterator","constructor","rename","outName","inName","d2r","input","cleanWKT","wkt","type","projName","local","PROJECTION","AXIS","axisOrder","ii","UNIT","DATUM","SPHEROID","geogcs","GEOGCS","slice","sphere","ellps","TOWGS84","isFinite","toMeter","ratio","renamer","list","forEach","lisp","_global","_projString","_wktParser","that","arguments","def","charAt","parseProj","apply","EPSG","ESRI","IAU2000","console","log","globals","_defs","testObj","code","testDef","codeWords","testWKT","some","codes","checkMercator","auth","checkProjStr","ext","testProj","parse","maybeProjStr","projStr","destination","source","property","undefined","eccent","sinphi","cosphi","con","sqrt","x","_sign","abs","sign","phi","com","pow","tan","ts","eccnth","dphi","atan","sin","_msfnz","_adjust_lon","_tsfnz","_phi2z","init","es","e","cos","msfnz","forward","lon","lat","y","adjust_lon","tsfnz","inverse","exp","phi2z","names","identity","pt","_merc","_longlat","projs","merc","longlat","projStore","add","len","n","get","start","MERIT","ellipseName","SGS85","GRS80","IAU76","airy","APL4","NWL9D","mod_airy","andrae","aust_SA","GRS67","bessel","bess_nam","clrk66","clrk80","clrk80ign","clrk58","CPM","delmbr","engelis","evrst30","evrst48","evrst56","evrst69","evrstSS","fschr60","fschr60m","fschr68","helmert","hough","intl","kaula","lerch","mprts","new_intl","plessis","krass","SEasia","walbeck","WGS60","WGS66","WGS7","_Ellipsoid","_interopRequireWildcard","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","hasPropertyDescriptor","defineProperty","getOwnPropertyDescriptor","hasOwnProperty","call","desc","set","eccentricity","a2","b2","ep2","ellipse","Ellipsoid","wgs84","datumName","ch1903","ggrs87","nad83","nad27","potsdam","carthage","hermannskogel","osni52","ire65","rassadiran","nzgd49","osgb36","s_jtsk","beduaram","gunung_segara","rnb72","datum_type","grids","loadedNadgrids","nadgrid","data","view","DataView","isLittleEndian","detectLittleEndian","header","readHeader","nSubgrids","subgrids","readSubgrids","getNadgrids","parseNadgridString","optional","mandatory","grid","isNull","secondsToRadians","seconds","nFields","getInt32","warn","nSubgridFields","shiftType","decodeString","fromSemiMajorAxis","getFloat64","fromSemiMinorAxis","toSemiMajorAxis","toSemiMinorAxis","end","String","fromCharCode","Uint8Array","buffer","gridOffset","subHeader","readGridHeader","nodes","readGridNodes","lngColumnCount","round","upperLongitude","lowerLongitude","longitudeInterval","latColumnCount","upperLatitude","lowerLatitude","latitudeInterval","ll","del","lim","count","gridNodeCount","cvs","mapNodes","r","longitudeShift","latitudeShift","offset","parent","gridHeader","nodesOffset","gridRecordLength","gridShiftRecords","record","getFloat32","latitudeAccuracy","longitudeAccuracy","_parseCode","_extend","_projections","_deriveConstants","_Datum","_datum","_nadgrid","Projection","srsCode","callback","error","json","parseCode","ourProj","projections","datumDef","Datum","sphere_","dc_sphere","ecc","dc_eccentricity","datumObj","extend","compareDatums","geocentricFromWgs84","geocentricToGeodetic","geocentricToWgs84","geodeticToGeocentric","dest","Longitude","Latitude","Height","z","Rn","Sin_Lat","Sin2_Lat","Cos_Lat","Infinity","genau","genau2","maxiter","P","RR","CT","ST","RX","RK","RN","CPHI0","SPHI0","CPHI","SPHI","SDPHI","iter","X","Y","Z","atan2","Dx_BF","Dy_BF","Dz_BF","Rx_BF","Ry_BF","Rz_BF","M_BF","x_tmp","y_tmp","z_tmp","_datumUtils","checkParams","point","source_a","source_es","gridShiftCode","applyGridShift","dest_a","dest_b","dest_es","destGridShiftResult","Number","NaN","onlyMandatoryGrids","attemptedGrids","subgrid","epsilon","minX","minY","maxX","maxY","applySubgridShift","isNaN","pin","ct","val","tb","t","nadInterpolate","tol","dif","indx","floor","frct","inx","f00","f10","f11","f01","m11","m10","m00","m01","crs","denorm","xin","yin","zin","array","m","checkCoord","num","TypeError","_datum_transform","_adjust_axis","_Proj","_toPoint","_checkSanity","checkNotWGS","transform","enforceAxis","toPoint","hasZ","checkSanity","adjust_axis","datum_transform","_transform","transformer","from","to","coords","transformedArray","concat","splice","checkProj","oProj","proj4","fromProj","toProj","coord","single","NUM_100K_SETS","SET_ORIGIN_COLUMN_LETTERS","SET_ORIGIN_ROW_LETTERS","A","I","O","V","accuracy","encode","LLtoUTM","mgrs","bbox","UTMtoLL","decode","toUpperCase","left","bottom","right","top","degToRad","deg","radToDeg","rad","Lat","Long","eccSquared","LongOrigin","eccPrimeSquared","N","T","C","M","LatRad","LongRad","LongOriginRad","ZoneNumber","UTMEasting","UTMNorthing","northing","easting","zoneNumber","zoneLetter","getLetterDesignator","utm","e1","N1","T1","C1","R1","D","mu","phi1Rad","result","topRight","LetterDesignator","seasting","snorthing","get100kID","setParm","get100kSetForZone","setColumn","setRow","getLetter100kID","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","twoLetter","mgrsString","hunK","sb","testChar","substring","east100k","getEastingFromChar","north100k","getNorthingFromChar","getMinNorthing","remainder","sep","sepEasting","sepNorthing","accuracyBonus","sepEastingString","sepNorthingString","curCol","eastingValue","rewindMarker","curRow","northingValue","_mgrs","Point","fromMGRS","mgrsStr","toMGRS","C00","C02","C04","C06","C08","C22","C44","C46","C48","C66","C68","C88","en","sphi","cphi","_pj_mlfn","MAX_ITER","arg","s","pj_mlfn","_pj_enfn","_pj_inv_mlfn","pj_enfn","ml0","delta_lon","sin_phi","cos_phi","acos","al","als","c","cs","tq","ml","f","g","temp","h","asin","pj_inv_mlfn","tan_phi","d","ds","max","min","_hypot","_log1py","log1py","hypot","pp","B","cos_2B","h1","h2","arg_r","hr1","hr2","hr","_sinh","_cosh","arg_i","sin_arg_r","cos_arg_r","sinh_arg_i","sinh","cosh_arg_i","cosh","j","hi1","hi","hi2","_tmerc","_asinhy","_gatg","_clens","_clens_cmplx","tmerc","cgb","cbg","utg","gtu","np","Qn","gatg","Zb","clens","Ce","Cn","sin_Cn","cos_Cn","sin_Ce","cos_Ce","asinhy","tmp","clens_cmplx","_adjust_zone","_etmerc","dependsOn","adjust_zone","etmerc","esinp","_srat","rc","phic0","ratexp","K","srat","DEL_TOL","_gauss","gauss","sinc0","cosc0","R2","title","sinc","cosc","cosl","rho","ssfn_","phit","eccen","coslat0","sinlat0","cons","ms1","X0","cosX0","sinX0","sinlat","coslat","sinX","cosX","rh","dlon","ce","Chi","phy0","lambda0","sinPhy0","semiMajorAxis","invF","flattening","e2","R","b0","k1","k2","k3","Sa1","Sa2","S","rotI","rotB","lambda","phy","prevPhy","iteration","TOL","isTypeA","typeAProjections","projectionName","cosph0","F","H","L","sinph0","J","gamma0","lamc","lam1","lam2","phi1","phi2","alpha_c","AB","no_off","no_rot","alp","gam","one_es","E","lam0","pi","singam","cosgam","sinrot","cosrot","rB","ArB","BrA","u_0","v_pole_n","v_pole_s","U","W","u","Qp","Sp","Tp","Vp","Up","sin1","cos1","ts1","sin2","cos2","ms2","ts2","ts0","ns","f0","rh1","theta","s45","s90","fi0","alfa","uq","u0","n0","s0","ro0","ad","gfi","deltav","eps","ro","czech","fi1","ok","e0","e3","_mlfn","_e0fn","_e1fn","_e2fn","_e3fn","_gN","_adjust_lat","_imlfn","e0fn","e1fn","e2fn","e3fn","mlfn","lam","nl","gN","tl","asq","cl","dd","ml1","imlfn","nl1","rl1","tl1","dl","dsq","adjust_lat","_qsfnz","S_POLE","N_POLE","EQUIT","OBLIQ","mode","qp","qsfnz","mmf","apa","authset","rq","xmf","ymf","sinb1","cosb1","coslam","sinlam","q","sinb","cosb","cCe","sCe","ab","cosz","sinz","authlat","P00","P01","P02","P10","P11","P20","APA","beta","_asinz","sin_po","cos_po","t1","qs1","t2","qs2","t3","qs0","ns0","qs","phi1z","asinz","eccnts","sin_p14","cos_p14","infinity_dist","coslon","ksp","_iqsfnz","iqsfnz","dlat","el","bl","tanphi","mln","mlnp","ma","iterations","B_re","B_im","C_re","C_im","delta_lat","d_phi","d_lambda","d_phi_n","d_psi","th_re","th_im","th_n_re","th_n_im","th_n_re1","th_n_im1","z_re","z_im","delta_x","delta_y","z_n_re","z_n_im","z_n_re1","z_n_im1","num_re","num_im","den_re","den_im","den2","d_psi_n","C_y","C_x","delta_theta","ml2","sinth","costh","gsq","msq","xx","yy","xys","c1","c2","c3","a1","m1","th1","sin_p12","cos_p12","Mlp","Ml","Nl1","Nl","psi","Az","G","GH","Hs","kp","cos_c","s2","s3","s4","s5","cosAz","Ee","sinpsi","FACE_ENUM","FRONT","RIGHT","BACK","LEFT","TOP","BOTTOM","AREA_ENUM","AREA_0","AREA_1","AREA_2","AREA_3","face","one_minus_f","one_minus_f_squared","xy","area","sinlon","qsc_shift_lon_origin","qsc_fwd_equat_face_theta","lp","nu","cosmu","tannu","tantheta","invert_sign","xa","slon","COEFS_X","COEFS_Y","FXC","FYC","RC1","NODES","poly3_val","coefs","poly3_der","newton_rapshon","f_df","max_err","iters","upd","azi","degrees","tilt","bind","pn1","rp","pfact","omega","cg","sg","cw","sw","yt","ba","bm","bq","flip_axis","sweep","radius_g_1","radius_g","rone_es","radius_p","radius_p2","radius_p_inv2","shape","v_x","v_y","v_z","det","v_zp","_utm","_sterea","_stere","_somerc","_omerc","_lcc","_krovak","_cass","_laea","_aea","_gnom","_cea","_eqc","_poly","_nzmg","_mill","_sinu","_moll","_eqdc","_vandg","_aeqd","_ortho","_qsc","_robin","_geocent","_tpers","_geos","Proj","sterea","stere","somerc","omerc","lcc","krovak","cass","laea","aea","gnom","cea","eqc","poly","nzmg","mill","sinu","moll","eqdc","vandg","aeqd","ortho","qsc","robin","geocent","tpers","geos","_core","_Point","_projs","defaultDatum","common","version","includedProjections","earthRadius","factors","centimeters","centimetres","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","radians","yards","unitsFactors","areaFactors","acres","hectares","feature","geom","properties","options","feat","id","geometry","coordinates","_options","lineString","polygon","multiPoint","multiLineString","multiPolygon","isNumber","points","featureCollection","_i","coordinates_1","ring","polygons","lineStrings","features","fc","geometryCollection","geometries","precision","multiplier","radiansToLength","factor","lengthToRadians","distance","lengthToDegrees","radiansToDegrees","bearingToAzimuth","bearing","angle","degreesToRadians","convertLength","originalUnit","finalUnit","convertArea","startFactor","finalFactor","isObject","validateBBox","validateId","_helpers","getCoord","getCoords","containsNumber","geojsonType","featureOf","collectionOf","_a","getGeom","geojson","getType","_name","_invariant","booleanPointInPolygon","polys","inBBox","insidePoly","inRing","ignoreBoundary","inHole","isInside","xi","yi","xj","yj","onBoundary","intersect","_proj","_booleanPointInPolygon","DottedMapWithoutCountries","avoidOuterPins","X_MIN","Y_MAX","X_RANGE","Y_RANGE","region","width","height","ystep","addPin","lng","svgOptions","getPin","join","googleX","googleY","wgs84Point","inside","rawX","rawY","localx","localy","localLng","localLat","getPoints","values","getSVG","color","backgroundColor","radius","getPoint","pointRadius","sqrt3radius","polyPoints","image","_countriesGeo","_withoutCountries","geojsonByCountry","geojsonWorld","countries","geojsonToMultiPolygons","CACHE","DEFAULT_WORLD_REGION","computeGeojsonBox","boxes","box","flat","latitudes","_lng","longitudes","_lat","getMap","country","Y_MIN","X_MAX","pointGoogle","getMapJSON","props","JSON","stringify","getCacheKey","DottedMap","args","cacheKey","_dottedMap","svgMap","document","getElementById","innerHTML","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","every","generated","js","clear","hmrApply","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","message","overlay","createErrorOverlay","body","appendChild","remove","createElement","stackTrace","innerText","getParents","modules","parents","dep","Function","deps","cached","cb"],"mappings":"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","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["export default function(defs) {\n  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n\n  defs.WGS84 = defs['EPSG:4326'];\n  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n  defs.GOOGLE = defs['EPSG:3857'];\n  defs['EPSG:900913'] = defs['EPSG:3857'];\n  defs['EPSG:102113'] = defs['EPSG:3857'];\n}\n","export var PJD_3PARAM = 1;\nexport var PJD_7PARAM = 2;\nexport var PJD_GRIDSHIFT = 3;\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\nexport var SRS_WGS84_SEMIMAJOR = 6378137.0;  // only used in grid shift transforms\nexport var SRS_WGS84_SEMIMINOR = 6356752.314;  // only used in grid shift transforms\nexport var SRS_WGS84_ESQUARED = 0.0066943799901413165; // only used in grid shift transforms\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\nexport var HALF_PI = Math.PI/2;\n// ellipoid pj_set_ell.c\nexport var SIXTH = 0.1666666666666666667;\n/* 1/6 */\nexport var RA4 = 0.04722222222222222222;\n/* 17/360 */\nexport var RA6 = 0.02215608465608465608;\nexport var EPSLN = 1.0e-10;\n// you'd think you could use Number.EPSILON above but that makes\n// Mollweide get into an infinate loop.\n\nexport var D2R = 0.01745329251994329577;\nexport var R2D = 57.29577951308232088;\nexport var FORTPI = Math.PI/4;\nexport var TWO_PI = Math.PI * 2;\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\nexport var SPI = 3.14159265359;\n","var exports = {};\nexport {exports as default};\n\nexports.greenwich = 0.0; //\"0dE\",\nexports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\nexports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\nexports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\nexports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\nexports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\nexports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\nexports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\nexports.ferro = -17.666666666667; //\"17d40'W\",\nexports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\nexports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\nexports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\nexports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n","export default {\n  ft: {to_meter: 0.3048},\n  'us-ft': {to_meter: 1200 / 3937}\n};\n","var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nexport default function match(obj, key) {\n  if (obj[key]) {\n    return obj[key];\n  }\n  var keys = Object.keys(obj);\n  var lkey = key.toLowerCase().replace(ignoredChar, '');\n  var i = -1;\n  var testkey, processedKey;\n  while (++i < keys.length) {\n    testkey = keys[i];\n    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n    if (processedKey === lkey) {\n      return obj[testkey];\n    }\n  }\n}\n","import {D2R} from './constants/values';\nimport PrimeMeridian from './constants/PrimeMeridian';\nimport units from './constants/units';\nimport match from './match';\n\nexport default function(defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function(v) {\n    return v.trim();\n  }).filter(function(a) {\n    return a;\n  }).reduce(function(p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function(v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function(v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function(v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function(v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function(v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function(v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function(v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function(v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function(v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    gamma: function(v) {\n      self.rectified_grid_angle = parseFloat(v);\n    },\n    lonc: function(v) {\n      self.longc = v * D2R;\n    },\n    x_0: function(v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function(v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function(v) {\n      self.a = parseFloat(v);\n    },\n    b: function(v) {\n      self.b = parseFloat(v);\n    },\n    r_a: function() {\n      self.R_A = true;\n    },\n    zone: function(v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function() {\n      self.utmSouth = true;\n    },\n    towgs84: function(v) {\n      self.datum_params = v.split(\",\").map(function(a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function(v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function(v) {\n      self.units = v;\n      var unit = match(units, v);\n      if (unit) {\n        self.to_meter = unit.to_meter;\n      }\n    },\n    from_greenwich: function(v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function(v) {\n      var pm = match(PrimeMeridian, v);\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n    },\n    nadgrids: function(v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      }\n      else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function(v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    },\n    approx: function() {\n      self.approx = true;\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      }\n      else {\n        self[paramOutname] = paramVal;\n      }\n    }\n    else {\n      self[paramName] = paramVal;\n    }\n  }\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n}\n","export default parseString;\n\nvar NEUTRAL = 1;\nvar KEYWORD = 2;\nvar NUMBER = 3;\nvar QUOTED = 4;\nvar AFTERQUOTE = 5;\nvar ENDED = -1;\nvar whitespace = /\\s/;\nvar latin = /[A-Za-z]/;\nvar keyword = /[A-Za-z84_]/;\nvar endThings = /[,\\]]/;\nvar digets = /[\\d\\.E\\-\\+]/;\n// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nfunction Parser(text) {\n  if (typeof text !== 'string') {\n    throw new Error('not a string');\n  }\n  this.text = text.trim();\n  this.level = 0;\n  this.place = 0;\n  this.root = null;\n  this.stack = [];\n  this.currentObject = null;\n  this.state = NEUTRAL;\n}\nParser.prototype.readCharicter = function() {\n  var char = this.text[this.place++];\n  if (this.state !== QUOTED) {\n    while (whitespace.test(char)) {\n      if (this.place >= this.text.length) {\n        return;\n      }\n      char = this.text[this.place++];\n    }\n  }\n  switch (this.state) {\n    case NEUTRAL:\n      return this.neutral(char);\n    case KEYWORD:\n      return this.keyword(char)\n    case QUOTED:\n      return this.quoted(char);\n    case AFTERQUOTE:\n      return this.afterquote(char);\n    case NUMBER:\n      return this.number(char);\n    case ENDED:\n      return;\n  }\n};\nParser.prototype.afterquote = function(char) {\n  if (char === '\"') {\n    this.word += '\"';\n    this.state = QUOTED;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = this.word.trim();\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n};\nParser.prototype.afterItem = function(char) {\n  if (char === ',') {\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n    }\n    this.word = null;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (char === ']') {\n    this.level--;\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n      this.word = null;\n    }\n    this.state = NEUTRAL;\n    this.currentObject = this.stack.pop();\n    if (!this.currentObject) {\n      this.state = ENDED;\n    }\n\n    return;\n  }\n};\nParser.prototype.number = function(char) {\n  if (digets.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = parseFloat(this.word);\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n};\nParser.prototype.quoted = function(char) {\n  if (char === '\"') {\n    this.state = AFTERQUOTE;\n    return;\n  }\n  this.word += char;\n  return;\n};\nParser.prototype.keyword = function(char) {\n  if (keyword.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (char === '[') {\n    var newObjects = [];\n    newObjects.push(this.word);\n    this.level++;\n    if (this.root === null) {\n      this.root = newObjects;\n    } else {\n      this.currentObject.push(newObjects);\n    }\n    this.stack.push(this.currentObject);\n    this.currentObject = newObjects;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n};\nParser.prototype.neutral = function(char) {\n  if (latin.test(char)) {\n    this.word = char;\n    this.state = KEYWORD;\n    return;\n  }\n  if (char === '\"') {\n    this.word = '';\n    this.state = QUOTED;\n    return;\n  }\n  if (digets.test(char)) {\n    this.word = char;\n    this.state = NUMBER;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n};\nParser.prototype.output = function() {\n  while (this.place < this.text.length) {\n    this.readCharicter();\n  }\n  if (this.state === ENDED) {\n    return this.root;\n  }\n  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n};\n\nfunction parseString(txt) {\n  var parser = new Parser(txt);\n  return parser.output();\n}\n","\n\nfunction mapit(obj, key, value) {\n  if (Array.isArray(key)) {\n    value.unshift(key);\n    key = null;\n  }\n  var thing = key ? {} : obj;\n\n  var out = value.reduce(function(newObj, item) {\n    sExpr(item, newObj);\n    return newObj\n  }, thing);\n  if (key) {\n    obj[key] = out;\n  }\n}\n\nexport function sExpr(v, obj) {\n  if (!Array.isArray(v)) {\n    obj[v] = true;\n    return;\n  }\n  var key = v.shift();\n  if (key === 'PARAMETER') {\n    key = v.shift();\n  }\n  if (v.length === 1) {\n    if (Array.isArray(v[0])) {\n      obj[key] = {};\n      sExpr(v[0], obj[key]);\n      return;\n    }\n    obj[key] = v[0];\n    return;\n  }\n  if (!v.length) {\n    obj[key] = true;\n    return;\n  }\n  if (key === 'TOWGS84') {\n    obj[key] = v;\n    return;\n  }\n  if (key === 'AXIS') {\n    if (!(key in obj)) {\n      obj[key] = [];\n    }\n    obj[key].push(v);\n    return;\n  }\n  if (!Array.isArray(key)) {\n    obj[key] = {};\n  }\n\n  var i;\n  switch (key) {\n    case 'UNIT':\n    case 'PRIMEM':\n    case 'VERT_DATUM':\n      obj[key] = {\n        name: v[0].toLowerCase(),\n        convert: v[1]\n      };\n      if (v.length === 3) {\n        sExpr(v[2], obj[key]);\n      }\n      return;\n    case 'SPHEROID':\n    case 'ELLIPSOID':\n      obj[key] = {\n        name: v[0],\n        a: v[1],\n        rf: v[2]\n      };\n      if (v.length === 4) {\n        sExpr(v[3], obj[key]);\n      }\n      return;\n    case 'PROJECTEDCRS':\n    case 'PROJCRS':\n    case 'GEOGCS':\n    case 'GEOCCS':\n    case 'PROJCS':\n    case 'LOCAL_CS':\n    case 'GEODCRS':\n    case 'GEODETICCRS':\n    case 'GEODETICDATUM':\n    case 'EDATUM':\n    case 'ENGINEERINGDATUM':\n    case 'VERT_CS':\n    case 'VERTCRS':\n    case 'VERTICALCRS':\n    case 'COMPD_CS':\n    case 'COMPOUNDCRS':\n    case 'ENGINEERINGCRS':\n    case 'ENGCRS':\n    case 'FITTED_CS':\n    case 'LOCAL_DATUM':\n    case 'DATUM':\n      v[0] = ['name', v[0]];\n      mapit(obj, key, v);\n      return;\n    default:\n      i = -1;\n      while (++i < v.length) {\n        if (!Array.isArray(v[i])) {\n          return sExpr(v, obj[key]);\n        }\n      }\n      return mapit(obj, key, v);\n  }\n}\n","var D2R = 0.01745329251994329577;\nimport parser from './parser';\nimport {sExpr} from './process';\n\n\n\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && (inName in obj)) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\n\nfunction d2r(input) {\n  return input * D2R;\n}\n\nfunction cleanWKT(wkt) {\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  } else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  } else {\n    if (typeof wkt.PROJECTION === 'object') {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    } else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.AXIS) {\n    var axisOrder = '';\n    for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {\n      var axis = [wkt.AXIS[i][0].toLowerCase(), wkt.AXIS[i][1].toLowerCase()];\n      if (axis[0].indexOf('north') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'north')) {\n        axisOrder += 'n';\n      } else if (axis[0].indexOf('south') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'south')) {\n        axisOrder += 's';\n      } else if (axis[0].indexOf('east') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'east')) {\n        axisOrder += 'e';\n      } else if (axis[0].indexOf('west') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'west')) {\n        axisOrder += 'w';\n      }\n    }\n    if (axisOrder.length === 2) {\n      axisOrder += 'u';\n    }\n    if (axisOrder.length === 3) {\n      wkt.axis = axisOrder;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = wkt.UNIT.convert;\n      }\n    }\n  }\n  var geogcs = wkt.GEOGCS;\n  if (wkt.type === 'GEOGCS') {\n    geogcs = wkt;\n  }\n  if (geogcs) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (geogcs.DATUM) {\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n    } else {\n      wkt.datumCode = geogcs.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode.slice(-6) === '_ferro') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 6);\n    }\n    if (wkt.datumCode.slice(-8) === '_jakarta') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 8);\n    }\n    if (~wkt.datumCode.indexOf('belge')) {\n      wkt.datumCode = 'rnb72';\n    }\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n        wkt.ellps = 'intl';\n      }\n\n      wkt.a = geogcs.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n    }\n\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = 'osgb36';\n    }\n    if (~wkt.datumCode.indexOf('osni_1952')) {\n      wkt.datumCode = 'osni52';\n    }\n    if (~wkt.datumCode.indexOf('tm65')\n      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n      wkt.datumCode = 'ire65';\n    }\n    if (wkt.datumCode === 'ch1903+') {\n      wkt.datumCode = 'ch1903';\n    }\n    if (~wkt.datumCode.indexOf('israel')) {\n      wkt.datumCode = 'isr93';\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return input * ratio;\n  }\n  var renamer = function(a) {\n    return rename(wkt, a);\n  };\n  var list = [\n    ['standard_parallel_1', 'Standard_Parallel_1'],\n    ['standard_parallel_1', 'Latitude of 1st standard parallel'],\n    ['standard_parallel_2', 'Standard_Parallel_2'],\n    ['standard_parallel_2', 'Latitude of 2nd standard parallel'],\n    ['false_easting', 'False_Easting'],\n    ['false_easting', 'False easting'],\n    ['false-easting', 'Easting at false origin'],\n    ['false_northing', 'False_Northing'],\n    ['false_northing', 'False northing'],\n    ['false_northing', 'Northing at false origin'],\n    ['central_meridian', 'Central_Meridian'],\n    ['central_meridian', 'Longitude of natural origin'],\n    ['central_meridian', 'Longitude of false origin'],\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\n    ['latitude_of_origin', 'Central_Parallel'],\n    ['latitude_of_origin', 'Latitude of natural origin'],\n    ['latitude_of_origin', 'Latitude of false origin'],\n    ['scale_factor', 'Scale_Factor'],\n    ['k0', 'scale_factor'],\n    ['latitude_of_center', 'Latitude_Of_Center'],\n    ['latitude_of_center', 'Latitude_of_center'],\n    ['lat0', 'latitude_of_center', d2r],\n    ['longitude_of_center', 'Longitude_Of_Center'],\n    ['longitude_of_center', 'Longitude_of_center'],\n    ['longc', 'longitude_of_center', d2r],\n    ['x0', 'false_easting', toMeter],\n    ['y0', 'false_northing', toMeter],\n    ['long0', 'central_meridian', d2r],\n    ['lat0', 'latitude_of_origin', d2r],\n    ['lat0', 'standard_parallel_1', d2r],\n    ['lat1', 'standard_parallel_1', d2r],\n    ['lat2', 'standard_parallel_2', d2r],\n    ['azimuth', 'Azimuth'],\n    ['alpha', 'azimuth', d2r],\n    ['srsCode', 'name']\n  ];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  }\n}\nexport default function(wkt) {\n  var lisp = parser(wkt);\n  var type = lisp.shift();\n  var name = lisp.shift();\n  lisp.unshift(['name', name]);\n  lisp.unshift(['type', type]);\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj);\n  return obj;\n}\n","import globals from './global';\nimport parseProj from './projString';\nimport wkt from 'wkt-parser';\n\nfunction defs(name) {\n  /*global console*/\n  var that = this;\n  if (arguments.length === 2) {\n    var def = arguments[1];\n    if (typeof def === 'string') {\n      if (def.charAt(0) === '+') {\n        defs[name] = parseProj(arguments[1]);\n      }\n      else {\n        defs[name] = wkt(arguments[1]);\n      }\n    } else {\n      defs[name] = def;\n    }\n  }\n  else if (arguments.length === 1) {\n    if (Array.isArray(name)) {\n      return name.map(function(v) {\n        if (Array.isArray(v)) {\n          defs.apply(that, v);\n        }\n        else {\n          defs(v);\n        }\n      });\n    }\n    else if (typeof name === 'string') {\n      if (name in defs) {\n        return defs[name];\n      }\n    }\n    else if ('EPSG' in name) {\n      defs['EPSG:' + name.EPSG] = name;\n    }\n    else if ('ESRI' in name) {\n      defs['ESRI:' + name.ESRI] = name;\n    }\n    else if ('IAU2000' in name) {\n      defs['IAU2000:' + name.IAU2000] = name;\n    }\n    else {\n      console.log(name);\n    }\n    return;\n  }\n\n\n}\nglobals(defs);\nexport default defs;\n","import defs from './defs';\nimport wkt from 'wkt-parser';\nimport projStr from './projString';\nimport match from './match';\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\nvar codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\nfunction testWKT(code){\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\nvar codes = ['3857', '900913', '3785', '102113'];\nfunction checkMercator(item) {\n  var auth = match(item, 'authority');\n  if (!auth) {\n    return;\n  }\n  var code = match(auth, 'epsg');\n  return code && codes.indexOf(code) > -1;\n}\nfunction checkProjStr(item) {\n  var ext = match(item, 'extension');\n  if (!ext) {\n    return;\n  }\n  return match(ext, 'proj4');\n}\nfunction testProj(code){\n  return code[0] === '+';\n}\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    if (testWKT(code)) {\n      var out = wkt(code);\n      // test of spetial case, due to this being a very common and often malformed\n      if (checkMercator(out)) {\n        return defs['EPSG:3857'];\n      }\n      var maybeProjStr = checkProjStr(out);\n      if (maybeProjStr) {\n        return projStr(maybeProjStr);\n      }\n      return out;\n    }\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  }else{\n    return code;\n  }\n}\n\nexport default parse;\n","export default function(destination, source) {\n  destination = destination || {};\n  var value, property;\n  if (!source) {\n    return destination;\n  }\n  for (property in source) {\n    value = source[property];\n    if (value !== undefined) {\n      destination[property] = value;\n    }\n  }\n  return destination;\n}\n","export default function(eccent, sinphi, cosphi) {\n  var con = eccent * sinphi;\n  return cosphi / (Math.sqrt(1 - con * con));\n}","export default function(x) {\n  return x<0 ? -1 : 1;\n}","\nimport {TWO_PI, SPI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, phi, sinphi) {\n  var con = eccent * sinphi;\n  var com = 0.5 * eccent;\n  con = Math.pow(((1 - con) / (1 + con)), com);\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, ts) {\n  var eccnth = 0.5 * eccent;\n  var con, dphi;\n  var phi = HALF_PI - 2 * Math.atan(ts);\n  for (var i = 0; i <= 15; i++) {\n    con = eccent * Math.sin(phi);\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n  //console.log(\"phi2z has NoConvergence\");\n  return -9999;\n}\n","import msfnz from '../common/msfnz';\n\nimport adjust_lon from '../common/adjust_lon';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport {FORTPI, R2D, EPSLN, HALF_PI} from '../constants/values';\nexport function init() {\n  var con = this.b / this.a;\n  this.es = 1 - con * con;\n  if(!('x0' in this)){\n    this.x0 = 0;\n  }\n  if(!('y0' in this)){\n    this.y0 = 0;\n  }\n  this.e = Math.sqrt(this.es);\n  if (this.lat_ts) {\n    if (this.sphere) {\n      this.k0 = Math.cos(this.lat_ts);\n    }\n    else {\n      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n    }\n  }\n  else {\n    if (!this.k0) {\n      if (this.k) {\n        this.k0 = this.k;\n      }\n      else {\n        this.k0 = 1;\n      }\n    }\n  }\n}\n\n/* Mercator forward equations--mapping lat,long to x,y\n  --------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  // convert to radians\n  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n    return null;\n  }\n\n  var x, y;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    return null;\n  }\n  else {\n    if (this.sphere) {\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n    }\n    else {\n      var sinphi = Math.sin(lat);\n      var ts = tsfnz(this.e, lat, sinphi);\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 - this.a * this.k0 * Math.log(ts);\n    }\n    p.x = x;\n    p.y = y;\n    return p;\n  }\n}\n\n/* Mercator inverse equations--mapping x,y to lat/long\n  --------------------------------------------------*/\nexport function inverse(p) {\n\n  var x = p.x - this.x0;\n  var y = p.y - this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n  }\n  else {\n    var ts = Math.exp(-y / (this.a * this.k0));\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export function init() {\n  //no-op for longlat\n}\n\nfunction identity(pt) {\n  return pt;\n}\nexport {identity as forward};\nexport {identity as inverse};\nexport var names = [\"longlat\", \"identity\"];\nexport default {\n  init: init,\n  forward: identity,\n  inverse: identity,\n  names: names\n};\n","import merc from \"./projections/merc\";\nimport longlat from \"./projections/longlat\";\nvar projs = [merc, longlat];\nvar names = {};\nvar projStore = [];\n\nfunction add(proj, i) {\n  var len = projStore.length;\n  if (!proj.names) {\n    console.log(i);\n    return true;\n  }\n  projStore[len] = proj;\n  proj.names.forEach(function(n) {\n    names[n.toLowerCase()] = len;\n  });\n  return this;\n}\n\nexport {add};\n\nexport function get(name) {\n  if (!name) {\n    return false;\n  }\n  var n = name.toLowerCase();\n  if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n    return projStore[names[n]];\n  }\n}\n\nexport function start() {\n  projs.forEach(add);\n}\nexport default {\n  start: start,\n  add: add,\n  get: get\n};\n","var exports = {};\nexport {exports as default};\nexports.MERIT = {\n  a: 6378137.0,\n  rf: 298.257,\n  ellipseName: \"MERIT 1983\"\n};\n\nexports.SGS85 = {\n  a: 6378136.0,\n  rf: 298.257,\n  ellipseName: \"Soviet Geodetic System 85\"\n};\n\nexports.GRS80 = {\n  a: 6378137.0,\n  rf: 298.257222101,\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\n};\n\nexports.IAU76 = {\n  a: 6378140.0,\n  rf: 298.257,\n  ellipseName: \"IAU 1976\"\n};\n\nexports.airy = {\n  a: 6377563.396,\n  b: 6356256.910,\n  ellipseName: \"Airy 1830\"\n};\n\nexports.APL4 = {\n  a: 6378137,\n  rf: 298.25,\n  ellipseName: \"Appl. Physics. 1965\"\n};\n\nexports.NWL9D = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"Naval Weapons Lab., 1965\"\n};\n\nexports.mod_airy = {\n  a: 6377340.189,\n  b: 6356034.446,\n  ellipseName: \"Modified Airy\"\n};\n\nexports.andrae = {\n  a: 6377104.43,\n  rf: 300.0,\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n};\n\nexports.aust_SA = {\n  a: 6378160.0,\n  rf: 298.25,\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\n};\n\nexports.GRS67 = {\n  a: 6378160.0,\n  rf: 298.2471674270,\n  ellipseName: \"GRS 67(IUGG 1967)\"\n};\n\nexports.bessel = {\n  a: 6377397.155,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841\"\n};\n\nexports.bess_nam = {\n  a: 6377483.865,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841 (Namibia)\"\n};\n\nexports.clrk66 = {\n  a: 6378206.4,\n  b: 6356583.8,\n  ellipseName: \"Clarke 1866\"\n};\n\nexports.clrk80 = {\n  a: 6378249.145,\n  rf: 293.4663,\n  ellipseName: \"Clarke 1880 mod.\"\n};\n\nexports.clrk80ign = {\n  a: 6378249.2,\n  b: 6356515,\n  rf: 293.4660213,\n  ellipseName: \"Clarke 1880 (IGN)\"\n};\n\nexports.clrk58 = {\n  a: 6378293.645208759,\n  rf: 294.2606763692654,\n  ellipseName: \"Clarke 1858\"\n};\n\nexports.CPM = {\n  a: 6375738.7,\n  rf: 334.29,\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\n};\n\nexports.delmbr = {\n  a: 6376428.0,\n  rf: 311.5,\n  ellipseName: \"Delambre 1810 (Belgium)\"\n};\n\nexports.engelis = {\n  a: 6378136.05,\n  rf: 298.2566,\n  ellipseName: \"Engelis 1985\"\n};\n\nexports.evrst30 = {\n  a: 6377276.345,\n  rf: 300.8017,\n  ellipseName: \"Everest 1830\"\n};\n\nexports.evrst48 = {\n  a: 6377304.063,\n  rf: 300.8017,\n  ellipseName: \"Everest 1948\"\n};\n\nexports.evrst56 = {\n  a: 6377301.243,\n  rf: 300.8017,\n  ellipseName: \"Everest 1956\"\n};\n\nexports.evrst69 = {\n  a: 6377295.664,\n  rf: 300.8017,\n  ellipseName: \"Everest 1969\"\n};\n\nexports.evrstSS = {\n  a: 6377298.556,\n  rf: 300.8017,\n  ellipseName: \"Everest (Sabah & Sarawak)\"\n};\n\nexports.fschr60 = {\n  a: 6378166.0,\n  rf: 298.3,\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\n};\n\nexports.fschr60m = {\n  a: 6378155.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1960\"\n};\n\nexports.fschr68 = {\n  a: 6378150.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1968\"\n};\n\nexports.helmert = {\n  a: 6378200.0,\n  rf: 298.3,\n  ellipseName: \"Helmert 1906\"\n};\n\nexports.hough = {\n  a: 6378270.0,\n  rf: 297.0,\n  ellipseName: \"Hough\"\n};\n\nexports.intl = {\n  a: 6378388.0,\n  rf: 297.0,\n  ellipseName: \"International 1909 (Hayford)\"\n};\n\nexports.kaula = {\n  a: 6378163.0,\n  rf: 298.24,\n  ellipseName: \"Kaula 1961\"\n};\n\nexports.lerch = {\n  a: 6378139.0,\n  rf: 298.257,\n  ellipseName: \"Lerch 1979\"\n};\n\nexports.mprts = {\n  a: 6397300.0,\n  rf: 191.0,\n  ellipseName: \"Maupertius 1738\"\n};\n\nexports.new_intl = {\n  a: 6378157.5,\n  b: 6356772.2,\n  ellipseName: \"New International 1967\"\n};\n\nexports.plessis = {\n  a: 6376523.0,\n  rf: 6355863.0,\n  ellipseName: \"Plessis 1817 (France)\"\n};\n\nexports.krass = {\n  a: 6378245.0,\n  rf: 298.3,\n  ellipseName: \"Krassovsky, 1942\"\n};\n\nexports.SEasia = {\n  a: 6378155.0,\n  b: 6356773.3205,\n  ellipseName: \"Southeast Asia\"\n};\n\nexports.walbeck = {\n  a: 6376896.0,\n  b: 6355834.8467,\n  ellipseName: \"Walbeck\"\n};\n\nexports.WGS60 = {\n  a: 6378165.0,\n  rf: 298.3,\n  ellipseName: \"WGS 60\"\n};\n\nexports.WGS66 = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"WGS 66\"\n};\n\nexports.WGS7 = {\n  a: 6378135.0,\n  rf: 298.26,\n  ellipseName: \"WGS 72\"\n};\n\nexport var WGS84 = exports.WGS84 = {\n  a: 6378137.0,\n  rf: 298.257223563,\n  ellipseName: \"WGS 84\"\n};\n\nexports.sphere = {\n  a: 6370997.0,\n  b: 6370997.0,\n  ellipseName: \"Normal Sphere (r=6370997)\"\n};\n","import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n","var exports = {};\nexport {exports as default};\nexports.wgs84 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"WGS84\",\n  datumName: \"WGS84\"\n};\n\nexports.ch1903 = {\n  towgs84: \"674.374,15.056,405.346\",\n  ellipse: \"bessel\",\n  datumName: \"swiss\"\n};\n\nexports.ggrs87 = {\n  towgs84: \"-199.87,74.79,246.62\",\n  ellipse: \"GRS80\",\n  datumName: \"Greek_Geodetic_Reference_System_1987\"\n};\n\nexports.nad83 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"GRS80\",\n  datumName: \"North_American_Datum_1983\"\n};\n\nexports.nad27 = {\n  nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n  ellipse: \"clrk66\",\n  datumName: \"North_American_Datum_1927\"\n};\n\nexports.potsdam = {\n  towgs84: \"598.1,73.7,418.2,0.202,0.045,-2.455,6.7\",\n  ellipse: \"bessel\",\n  datumName: \"Potsdam Rauenberg 1950 DHDN\"\n};\n\nexports.carthage = {\n  towgs84: \"-263.0,6.0,431.0\",\n  ellipse: \"clark80\",\n  datumName: \"Carthage 1934 Tunisia\"\n};\n\nexports.hermannskogel = {\n  towgs84: \"577.326,90.129,463.919,5.137,1.474,5.297,2.4232\",\n  ellipse: \"bessel\",\n  datumName: \"Hermannskogel\"\n};\n\nexports.osni52 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"airy\",\n  datumName: \"Irish National\"\n};\n\nexports.ire65 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"mod_airy\",\n  datumName: \"Ireland 1965\"\n};\n\nexports.rassadiran = {\n  towgs84: \"-133.63,-157.5,-158.62\",\n  ellipse: \"intl\",\n  datumName: \"Rassadiran\"\n};\n\nexports.nzgd49 = {\n  towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n  ellipse: \"intl\",\n  datumName: \"New Zealand Geodetic Datum 1949\"\n};\n\nexports.osgb36 = {\n  towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n  ellipse: \"airy\",\n  datumName: \"Airy 1830\"\n};\n\nexports.s_jtsk = {\n  towgs84: \"589,76,480\",\n  ellipse: 'bessel',\n  datumName: 'S-JTSK (Ferro)'\n};\n\nexports.beduaram = {\n  towgs84: '-106,-87,188',\n  ellipse: 'clrk80',\n  datumName: 'Beduaram'\n};\n\nexports.gunung_segara = {\n  towgs84: '-403,684,41',\n  ellipse: 'bessel',\n  datumName: 'Gunung Segara Jakarta'\n};\n\nexports.rnb72 = {\n  towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n  ellipse: \"intl\",\n  datumName: \"Reseau National Belge 1972\"\n};\n","import {PJD_3PARAM, PJD_7PARAM, PJD_GRIDSHIFT, PJD_WGS84, PJD_NODATUM, SEC_TO_RAD} from './constants/values';\n\nfunction datum(datumCode, datum_params, a, b, es, ep2, nadgrids) {\n  var out = {};\n\n  if (datumCode === undefined || datumCode === 'none') {\n    out.datum_type = PJD_NODATUM;\n  } else {\n    out.datum_type = PJD_WGS84;\n  }\n\n  if (datum_params) {\n    out.datum_params = datum_params.map(parseFloat);\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n      out.datum_type = PJD_3PARAM;\n    }\n    if (out.datum_params.length > 3) {\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n        out.datum_type = PJD_7PARAM;\n        out.datum_params[3] *= SEC_TO_RAD;\n        out.datum_params[4] *= SEC_TO_RAD;\n        out.datum_params[5] *= SEC_TO_RAD;\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n      }\n    }\n  }\n\n  if (nadgrids) {\n    out.datum_type = PJD_GRIDSHIFT;\n    out.grids = nadgrids;\n  }\n  out.a = a; //datum object also uses these values\n  out.b = b;\n  out.es = es;\n  out.ep2 = ep2;\n  return out;\n}\n\nexport default datum;\n","/**\n * Resources for details of NTv2 file formats:\n * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\n * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\n */\n\nvar loadedNadgrids = {};\n\n/**\n * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\n * as an ArrayBuffer.\n */\nexport default function nadgrid(key, data) {\n  var view = new DataView(data);\n  var isLittleEndian = detectLittleEndian(view);\n  var header = readHeader(view, isLittleEndian);\n  if (header.nSubgrids > 1) {\n    console.log('Only single NTv2 subgrids are currently supported, subsequent sub grids are ignored');\n  }\n  var subgrids = readSubgrids(view, header, isLittleEndian);\n  var nadgrid = {header: header, subgrids: subgrids};\n  loadedNadgrids[key] = nadgrid;\n  return nadgrid;\n}\n\n/**\n * Given a proj4 value for nadgrids, return an array of loaded grids\n */\nexport function getNadgrids(nadgrids) {\n  // Format details: http://proj.maptools.org/gen_parms.html\n  if (nadgrids === undefined) { return null; }\n  var grids = nadgrids.split(',');\n  return grids.map(parseNadgridString);\n}\n\nfunction parseNadgridString(value) {\n  if (value.length === 0) {\n    return null;\n  }\n  var optional = value[0] === '@';\n  if (optional) {\n    value = value.slice(1);\n  }\n  if (value === 'null') {\n    return {name: 'null', mandatory: !optional, grid: null, isNull: true};\n  }\n  return {\n    name: value,\n    mandatory: !optional,\n    grid: loadedNadgrids[value] || null,\n    isNull: false\n  };\n}\n\nfunction secondsToRadians(seconds) {\n  return (seconds / 3600) * Math.PI / 180;\n}\n\nfunction detectLittleEndian(view) {\n  var nFields = view.getInt32(8, false);\n  if (nFields === 11) {\n    return false;\n  }\n  nFields = view.getInt32(8, true);\n  if (nFields !== 11) {\n    console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\n  }\n  return true;\n}\n\nfunction readHeader(view, isLittleEndian) {\n  return {\n    nFields: view.getInt32(8, isLittleEndian),\n    nSubgridFields: view.getInt32(24, isLittleEndian),\n    nSubgrids: view.getInt32(40, isLittleEndian),\n    shiftType: decodeString(view, 56, 56 + 8).trim(),\n    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\n    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\n    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\n    toSemiMinorAxis: view.getFloat64(168, isLittleEndian),\n  };\n}\n\nfunction decodeString(view, start, end) {\n  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\n}\n\nfunction readSubgrids(view, header, isLittleEndian) {\n  var gridOffset = 176;\n  var grids = [];\n  for (var i = 0; i < header.nSubgrids; i++) {\n    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\n    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);\n    var lngColumnCount = Math.round(\n      1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\n    var latColumnCount = Math.round(\n      1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);\n    // Proj4 operates on radians whereas the coordinates are in seconds in the grid\n    grids.push({\n      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\n      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\n      lim: [lngColumnCount, latColumnCount],\n      count: subHeader.gridNodeCount,\n      cvs: mapNodes(nodes)\n    });\n  }\n  return grids;\n}\n\nfunction mapNodes(nodes) {\n  return nodes.map(function (r) {return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];});\n}\n\nfunction readGridHeader(view, offset, isLittleEndian) {\n  return {\n    name: decodeString(view, offset + 8, offset + 16).trim(),\n    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\n    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\n    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\n    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\n    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\n    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\n    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\n    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\n  };\n}\n\nfunction readGridNodes(view, offset, gridHeader, isLittleEndian) {\n  var nodesOffset = offset + 176;\n  var gridRecordLength = 16;\n  var gridShiftRecords = [];\n  for (var i = 0; i < gridHeader.gridNodeCount; i++) {\n    var record = {\n      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\n      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),\n      latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),\n      longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian),\n    };\n    gridShiftRecords.push(record);\n  }\n  return gridShiftRecords;\n}\n","import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\nimport {getNadgrids} from \"./nadgrid\";\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback(srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback(srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this\n\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var nadgrids = getNadgrids(json.nadgrids);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2,\n    nadgrids);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calculated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n","'use strict';\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\nexport function compareDatums(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n    // the tolerance for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n} // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexport function geodeticToGeocentric(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if (Latitude < -HALF_PI) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return { x: -Infinity, y: -Infinity, z: p.z };\n  } else if (Latitude > HALF_PI) {\n    /* Latitude out of range */\n    return { x: Infinity, y: Infinity, z: p.z };\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n} // cs_geodetic_to_geocentric()\n\nexport function geocentricToGeodetic(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n} // cs_geocentric_to_geodetic()\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexport function geocentricToWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n} // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n}\n","import {\n  PJD_3PARAM,\n  PJD_7PARAM,\n  PJD_GRIDSHIFT,\n  PJD_NODATUM,\n  R2D,\n  SRS_WGS84_ESQUARED,\n  SRS_WGS84_SEMIMAJOR, SRS_WGS84_SEMIMINOR\n} from './constants/values';\n\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\nimport adjust_lon from \"./common/adjust_lon\";\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\n\nexport default function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n  var source_a = source.a;\n  var source_es = source.es;\n  if (source.datum_type === PJD_GRIDSHIFT) {\n    var gridShiftCode = applyGridShift(source, false, point);\n    if (gridShiftCode !== 0) {\n      return undefined;\n    }\n    source_a = SRS_WGS84_SEMIMAJOR;\n    source_es = SRS_WGS84_ESQUARED;\n  }\n\n  var dest_a = dest.a;\n  var dest_b = dest.b;\n  var dest_es = dest.es;\n  if (dest.datum_type === PJD_GRIDSHIFT) {\n    dest_a = SRS_WGS84_SEMIMAJOR;\n    dest_b = SRS_WGS84_SEMIMINOR;\n    dest_es = SRS_WGS84_ESQUARED;\n  }\n\n  // Do we need to go through geocentric coordinates?\n  if (source_es === dest_es && source_a === dest_a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = geodeticToGeocentric(point, source_es, source_a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  point = geocentricToGeodetic(point, dest_es, dest_a, dest_b);\n\n  if (dest.datum_type === PJD_GRIDSHIFT) {\n    var destGridShiftResult = applyGridShift(dest, true, point);\n    if (destGridShiftResult !== 0) {\n      return undefined;\n    }\n  }\n\n  return point;\n}\n\nexport function applyGridShift(source, inverse, point) {\n  if (source.grids === null || source.grids.length === 0) {\n    console.log('Grid shift grids not found');\n    return -1;\n  }\n  var input = {x: -point.x, y: point.y};\n  var output = {x: Number.NaN, y: Number.NaN};\n  var onlyMandatoryGrids = false;\n  var attemptedGrids = [];\n  for (var i = 0; i < source.grids.length; i++) {\n    var grid = source.grids[i];\n    attemptedGrids.push(grid.name);\n    if (grid.isNull) {\n      output = input;\n      break;\n    }\n    onlyMandatoryGrids = grid.mandatory;\n    if (grid.grid === null) {\n      if (grid.mandatory) {\n        console.log(\"Unable to find mandatory grid '\" + grid.name + \"'\");\n        return -1;\n      }\n      continue;\n    }\n    var subgrid = grid.grid.subgrids[0];\n    // skip tables that don't match our point at all\n    var epsilon = (Math.abs(subgrid.del[1]) + Math.abs(subgrid.del[0])) / 10000.0;\n    var minX = subgrid.ll[0] - epsilon;\n    var minY = subgrid.ll[1] - epsilon;\n    var maxX = subgrid.ll[0] + (subgrid.lim[0] - 1) * subgrid.del[0] + epsilon;\n    var maxY = subgrid.ll[1] + (subgrid.lim[1] - 1) * subgrid.del[1] + epsilon;\n    if (minY > input.y || minX > input.x || maxY < input.y || maxX < input.x ) {\n      continue;\n    }\n    output = applySubgridShift(input, inverse, subgrid);\n    if (!isNaN(output.x)) {\n      break;\n    }\n  }\n  if (isNaN(output.x)) {\n    console.log(\"Failed to find a grid shift table for location '\"+\n      -input.x * R2D + \" \" + input.y * R2D + \" tried: '\" + attemptedGrids + \"'\");\n    return -1;\n  }\n  point.x = -output.x;\n  point.y = output.y;\n  return 0;\n}\n\nfunction applySubgridShift(pin, inverse, ct) {\n  var val = {x: Number.NaN, y: Number.NaN};\n  if (isNaN(pin.x)) { return val; }\n  var tb = {x: pin.x, y: pin.y};\n  tb.x -= ct.ll[0];\n  tb.y -= ct.ll[1];\n  tb.x = adjust_lon(tb.x - Math.PI) + Math.PI;\n  var t = nadInterpolate(tb, ct);\n  if (inverse) {\n    if (isNaN(t.x)) {\n      return val;\n    }\n    t.x = tb.x - t.x;\n    t.y = tb.y - t.y;\n    var i = 9, tol = 1e-12;\n    var dif, del;\n    do {\n      del = nadInterpolate(t, ct);\n      if (isNaN(del.x)) {\n        console.log(\"Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.\");\n        break;\n      }\n      dif = {x: tb.x - (del.x + t.x), y: tb.y - (del.y + t.y)};\n      t.x += dif.x;\n      t.y += dif.y;\n    } while (i-- && Math.abs(dif.x) > tol && Math.abs(dif.y) > tol);\n    if (i < 0) {\n      console.log(\"Inverse grid shift iterator failed to converge.\");\n      return val;\n    }\n    val.x = adjust_lon(t.x + ct.ll[0]);\n    val.y = t.y + ct.ll[1];\n  } else {\n    if (!isNaN(t.x)) {\n      val.x = pin.x + t.x;\n      val.y = pin.y + t.y;\n    }\n  }\n  return val;\n}\n\nfunction nadInterpolate(pin, ct) {\n  var t = {x: pin.x / ct.del[0], y: pin.y / ct.del[1]};\n  var indx = {x: Math.floor(t.x), y: Math.floor(t.y)};\n  var frct = {x: t.x - 1.0 * indx.x, y: t.y - 1.0 * indx.y};\n  var val= {x: Number.NaN, y: Number.NaN};\n  var inx;\n  if (indx.x < 0 || indx.x >= ct.lim[0]) {\n    return val;\n  }\n  if (indx.y < 0 || indx.y >= ct.lim[1]) {\n    return val;\n  }\n  inx = (indx.y * ct.lim[0]) + indx.x;\n  var f00 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx++;\n  var f10= {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx += ct.lim[0];\n  var f11 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx--;\n  var f01 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  var m11 = frct.x * frct.y, m10 = frct.x * (1.0 - frct.y),\n    m00 = (1.0 - frct.x) * (1.0 - frct.y), m01 = (1.0 - frct.x) * frct.y;\n  val.x = (m00 * f00.x + m10 * f10.x + m01 * f01.x + m11 * f11.x);\n  val.y = (m00 * f00.y + m10 * f10.y + m01 * f01.y + m11 * f11.y);\n  return val;\n}\n","export default function(crs, denorm, point) {\n  var xin = point.x,\n    yin = point.y,\n    zin = point.z || 0.0;\n  var v, t, i;\n  var out = {};\n  for (i = 0; i < 3; i++) {\n    if (denorm && i === 2 && point.z === undefined) {\n      continue;\n    }\n    if (i === 0) {\n      v = xin;\n      if (\"ew\".indexOf(crs.axis[i]) !== -1) {\n        t = 'x';\n      } else {\n        t = 'y';\n      }\n\n    }\n    else if (i === 1) {\n      v = yin;\n      if (\"ns\".indexOf(crs.axis[i]) !== -1) {\n        t = 'y';\n      } else {\n        t = 'x';\n      }\n    }\n    else {\n      v = zin;\n      t = 'z';\n    }\n    switch (crs.axis[i]) {\n    case 'e':\n      out[t] = v;\n      break;\n    case 'w':\n      out[t] = -v;\n      break;\n    case 'n':\n      out[t] = v;\n      break;\n    case 's':\n      out[t] = -v;\n      break;\n    case 'u':\n      if (point[t] !== undefined) {\n        out.z = v;\n      }\n      break;\n    case 'd':\n      if (point[t] !== undefined) {\n        out.z = -v;\n      }\n      break;\n    default:\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n      return null;\n    }\n  }\n  return out;\n}\n","export default function (array){\n  var out = {\n    x: array[0],\n    y: array[1]\n  };\n  if (array.length>2) {\n    out.z = array[2];\n  }\n  if (array.length>3) {\n    out.m = array[3];\n  }\n  return out;\n}","export default function (point) {\n  checkCoord(point.x);\n  checkCoord(point.y);\n}\nfunction checkCoord(num) {\n  if (typeof Number.isFinite === 'function') {\n    if (Number.isFinite(num)) {\n      return;\n    }\n    throw new TypeError('coordinates must be finite numbers');\n  }\n  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n    throw new TypeError('coordinates must be finite numbers');\n  }\n}\n","import {D2R, R2D, PJD_3PARAM, PJD_7PARAM, PJD_GRIDSHIFT} from './constants/values';\nimport datum_transform from './datum_transform';\nimport adjust_axis from './adjust_axis';\nimport proj from './Proj';\nimport toPoint from './common/toPoint';\nimport checkSanity from './checkSanity';\n\nfunction checkNotWGS(source, dest) {\n  return (\n    (source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM || source.datum.datum_type === PJD_GRIDSHIFT) && dest.datumCode !== 'WGS84') ||\n    ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM || dest.datum.datum_type === PJD_GRIDSHIFT) && source.datumCode !== 'WGS84');\n}\n\nexport default function transform(source, dest, point, enforceAxis) {\n  var wgs84;\n  if (Array.isArray(point)) {\n    point = toPoint(point);\n  } else {\n    // Clone the point object so inputs don't get modified\n    point = {\n      x: point.x,\n      y: point.y,\n      z: point.z,\n      m: point.m\n    };\n  }\n  var hasZ = point.z !== undefined;\n  checkSanity(point);\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n    wgs84 = new proj('WGS84');\n    point = transform(source, wgs84, point, enforceAxis);\n    source = wgs84;\n  }\n  // DGR, 2010/11/12\n  if (enforceAxis && source.axis !== 'enu') {\n    point = adjust_axis(source, false, point);\n  }\n  // Transform source points to long/lat, if they aren't already.\n  if (source.projName === 'longlat') {\n    point = {\n      x: point.x * D2R,\n      y: point.y * D2R,\n      z: point.z || 0\n    };\n  } else {\n    if (source.to_meter) {\n      point = {\n        x: point.x * source.to_meter,\n        y: point.y * source.to_meter,\n        z: point.z || 0\n      };\n    }\n    point = source.inverse(point); // Convert Cartesian to longlat\n    if (!point) {\n      return;\n    }\n  }\n  // Adjust for the prime meridian if necessary\n  if (source.from_greenwich) {\n    point.x += source.from_greenwich;\n  }\n\n  // Convert datums if needed, and if possible.\n  point = datum_transform(source.datum, dest.datum, point);\n  if (!point) {\n    return;\n  }\n\n  // Adjust for the prime meridian if necessary\n  if (dest.from_greenwich) {\n    point = {\n      x: point.x - dest.from_greenwich,\n      y: point.y,\n      z: point.z || 0\n    };\n  }\n\n  if (dest.projName === 'longlat') {\n    // convert radians to decimal degrees\n    point = {\n      x: point.x * R2D,\n      y: point.y * R2D,\n      z: point.z || 0\n    };\n  } else { // else project\n    point = dest.forward(point);\n    if (dest.to_meter) {\n      point = {\n        x: point.x / dest.to_meter,\n        y: point.y / dest.to_meter,\n        z: point.z || 0\n      };\n    }\n  }\n\n  // DGR, 2010/11/12\n  if (enforceAxis && dest.axis !== 'enu') {\n    return adjust_axis(dest, true, point);\n  }\n\n  if (!hasZ) {\n    delete point.z;\n  }\n  return point;\n}\n","import proj from './Proj';\nimport transform from './transform';\nvar wgs84 = proj('WGS84');\n\nfunction transformer(from, to, coords, enforceAxis) {\n  var transformedArray, out, keys;\n  if (Array.isArray(coords)) {\n    transformedArray = transform(from, to, coords, enforceAxis) || {x: NaN, y: NaN};\n    if (coords.length > 2) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (typeof transformedArray.z === 'number') {\n          return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.splice(3));\n        } else {\n          return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.splice(3));\n        }\n      } else {\n        return [transformedArray.x, transformedArray.y].concat(coords.splice(2));\n      }\n    } else {\n      return [transformedArray.x, transformedArray.y];\n    }\n  } else {\n    out = transform(from, to, coords, enforceAxis);\n    keys = Object.keys(coords);\n    if (keys.length === 2) {\n      return out;\n    }\n    keys.forEach(function (key) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (key === 'x' || key === 'y' || key === 'z') {\n          return;\n        }\n      } else {\n        if (key === 'x' || key === 'y') {\n          return;\n        }\n      }\n      out[key] = coords[key];\n    });\n    return out;\n  }\n}\n\nfunction checkProj(item) {\n  if (item instanceof proj) {\n    return item;\n  }\n  if (item.oProj) {\n    return item.oProj;\n  }\n  return proj(item);\n}\n\nfunction proj4(fromProj, toProj, coord) {\n  fromProj = checkProj(fromProj);\n  var single = false;\n  var obj;\n  if (typeof toProj === 'undefined') {\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n    coord = toProj;\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  toProj = checkProj(toProj);\n  if (coord) {\n    return transformer(fromProj, toProj, coord);\n  } else {\n    obj = {\n      forward: function (coords, enforceAxis) {\n        return transformer(fromProj, toProj, coords, enforceAxis);\n      },\n      inverse: function (coords, enforceAxis) {\n        return transformer(toProj, fromProj, coords, enforceAxis);\n      }\n    };\n    if (single) {\n      obj.oProj = toProj;\n    }\n    return obj;\n  }\n}\nexport default proj4;","\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n","import {toPoint, forward} from 'mgrs';\n\nfunction Point(x, y, z) {\n  if (!(this instanceof Point)) {\n    return new Point(x, y, z);\n  }\n  if (Array.isArray(x)) {\n    this.x = x[0];\n    this.y = x[1];\n    this.z = x[2] || 0.0;\n  } else if(typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n    this.z = x.z || 0.0;\n  } else if (typeof x === 'string' && typeof y === 'undefined') {\n    var coords = x.split(',');\n    this.x = parseFloat(coords[0], 10);\n    this.y = parseFloat(coords[1], 10);\n    this.z = parseFloat(coords[2], 10) || 0.0;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.z = z || 0.0;\n  }\n  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n}\n\nPoint.fromMGRS = function(mgrsStr) {\n  return new Point(toPoint(mgrsStr));\n};\nPoint.prototype.toMGRS = function(accuracy) {\n  return forward([this.x, this.y], accuracy);\n};\nexport default Point;\n","var C00 = 1;\nvar C02 = 0.25;\nvar C04 = 0.046875;\nvar C06 = 0.01953125;\nvar C08 = 0.01068115234375;\nvar C22 = 0.75;\nvar C44 = 0.46875;\nvar C46 = 0.01302083333333333333;\nvar C48 = 0.00712076822916666666;\nvar C66 = 0.36458333333333333333;\nvar C68 = 0.00569661458333333333;\nvar C88 = 0.3076171875;\n\nexport default function(es) {\n  var en = [];\n  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n  var t = es * es;\n  en[2] = t * (C44 - es * (C46 + es * C48));\n  t *= es;\n  en[3] = t * (C66 - es * C68);\n  en[4] = t * es * C88;\n  return en;\n}","export default function(phi, sphi, cphi, en) {\n  cphi *= sphi;\n  sphi *= sphi;\n  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n}","import pj_mlfn from \"./pj_mlfn\";\nimport {EPSLN} from '../constants/values';\n\nvar MAX_ITER = 20;\n\nexport default function(arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s;\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  }\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n  return phi;\n}\n","// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\n\nimport {EPSLN, HALF_PI} from '../constants/values';\nimport sign from '../common/sign';\n\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n      return (93);\n    }\n    else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if ((b - 1) > EPSLN) {\n          return (93);\n        }\n        else {\n          y = 0;\n        }\n      }\n      else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  }\n  else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n    x = this.a * (this.k0 * al * (1 +\n      als / 6 * (1 - t + c +\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n      this.x0;\n\n    y = this.a * (this.k0 * (ml - this.ml0 +\n      sin_phi * delta_lon * al / 2 * (1 +\n      als / 12 * (5 - t + 9 * c + 4 * cs +\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n      this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if ((g === 0) && (h === 0)) {\n      lon = 0;\n    }\n    else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  }\n  else { // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n      lon = adjust_lon(this.long0 + (d * (1 -\n        ds / 6 * (1 + 2 * t + c -\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n    }\n    else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Fast_Transverse_Mercator\", \"Fast Transverse Mercator\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r - 1 / r) / 2;\n  return r;\n}","export default function(x, y) {\n  x = Math.abs(x);\n  y = Math.abs(y);\n  var a = Math.max(x, y);\n  var b = Math.min(x, y) / (a ? a : 1);\n\n  return a * Math.sqrt(1 + Math.pow(b, 2));\n}\n","export default function(x) {\n  var y = 1 + x;\n  var z = y - 1;\n\n  return z === 0 ? x : x * Math.log(y) / z;\n}\n","import hypot from './hypot';\nimport log1py from './log1py';\n\nexport default function(x) {\n  var y = Math.abs(x);\n  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n  return x < 0 ? -y : y;\n}\n","export default function(pp, B) {\n  var cos_2B = 2 * Math.cos(2 * B);\n  var i = pp.length - 1;\n  var h1 = pp[i];\n  var h2 = 0;\n  var h;\n\n  while (--i >= 0) {\n    h = -h2 + cos_2B * h1 + pp[i];\n    h2 = h1;\n    h1 = h;\n  }\n\n  return (B + h * Math.sin(2 * B));\n}\n","export default function(pp, arg_r) {\n  var r = 2 * Math.cos(arg_r);\n  var i = pp.length - 1;\n  var hr1 = pp[i];\n  var hr2 = 0;\n  var hr;\n\n  while (--i >= 0) {\n    hr = -hr2 + r * hr1 + pp[i];\n    hr2 = hr1;\n    hr1 = hr;\n  }\n\n  return Math.sin(arg_r) * hr;\n}\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r + 1 / r) / 2;\n  return r;\n}","import sinh from './sinh';\nimport cosh from './cosh';\n\nexport default function(pp, arg_r, arg_i) {\n  var sin_arg_r = Math.sin(arg_r);\n  var cos_arg_r = Math.cos(arg_r);\n  var sinh_arg_i = sinh(arg_i);\n  var cosh_arg_i = cosh(arg_i);\n  var r = 2 * cos_arg_r * cosh_arg_i;\n  var i = -2 * sin_arg_r * sinh_arg_i;\n  var j = pp.length - 1;\n  var hr = pp[j];\n  var hi1 = 0;\n  var hr1 = 0;\n  var hi = 0;\n  var hr2;\n  var hi2;\n\n  while (--j >= 0) {\n    hr2 = hr1;\n    hi2 = hi1;\n    hr1 = hr;\n    hi1 = hi;\n    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n    hi = -hi2 + i * hr1 + r * hi1;\n  }\n\n  r = sin_arg_r * cosh_arg_i;\n  i = cos_arg_r * sinh_arg_i;\n\n  return [r * hr - i * hi, r * hi + i * hr];\n}\n","// Heavily based on this etmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\nimport tmerc from '../projections/tmerc';\nimport sinh from '../common/sinh';\nimport hypot from '../common/hypot';\nimport asinhy from '../common/asinhy';\nimport gatg from '../common/gatg';\nimport clens from '../common/clens';\nimport clens_cmplx from '../common/clens_cmplx';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  if (!this.approx && (isNaN(this.es) || this.es <= 0)) {\n    throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION[\"Fast_Transverse_Mercator\"] in the WKT.');\n  }\n  if (this.approx) {\n    // When '+approx' is set, use tmerc instead\n    tmerc.init.apply(this);\n    this.forward = tmerc.forward;\n    this.inverse = tmerc.inverse;\n  }\n\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  this.cgb = [];\n  this.cbg = [];\n  this.utg = [];\n  this.gtu = [];\n\n  var f = this.es / (1 + Math.sqrt(1 - this.es));\n  var n = f / (2 - f);\n  var np = n;\n\n  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n  np = np * n;\n  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n  np = np * n;\n  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n  np = np * n;\n  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n  np = np * n;\n  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n  np = np * n;\n  this.cgb[5] = np * (601676 / 22275);\n  this.cbg[5] = np * (444337 / 155925);\n\n  np = Math.pow(n, 2);\n  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n  np = np * n;\n  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n  np = np * n;\n  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n  np = np * n;\n  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n  np = np * n;\n  this.utg[5] = np * (-20648693 / 638668800);\n  this.gtu[5] = np * (212378941 / 319334400);\n\n  var Z = gatg(this.cbg, this.lat0);\n  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n}\n\nexport function forward(p) {\n  var Ce = adjust_lon(p.x - this.long0);\n  var Cn = p.y;\n\n  Cn = gatg(this.cbg, Cn);\n  var sin_Cn = Math.sin(Cn);\n  var cos_Cn = Math.cos(Cn);\n  var sin_Ce = Math.sin(Ce);\n  var cos_Ce = Math.cos(Ce);\n\n  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n  Ce = asinhy(Math.tan(Ce));\n\n  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n  Cn = Cn + tmp[0];\n  Ce = Ce + tmp[1];\n\n  var x;\n  var y;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    x = this.a * (this.Qn * Ce) + this.x0;\n    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n  }\n  else {\n    x = Infinity;\n    y = Infinity;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\nexport function inverse(p) {\n  var Ce = (p.x - this.x0) * (1 / this.a);\n  var Cn = (p.y - this.y0) * (1 / this.a);\n\n  Cn = (Cn - this.Zb) / this.Qn;\n  Ce = Ce / this.Qn;\n\n  var lon;\n  var lat;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n    Cn = Cn + tmp[0];\n    Ce = Ce + tmp[1];\n    Ce = Math.atan(sinh(Ce));\n\n    var sin_Cn = Math.sin(Cn);\n    var cos_Cn = Math.cos(Cn);\n    var sin_Ce = Math.sin(Ce);\n    var cos_Ce = Math.cos(Ce);\n\n    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n    lon = adjust_lon(Ce + this.long0);\n    lat = gatg(this.cgb, Cn);\n  }\n  else {\n    lon = Infinity;\n    lat = Infinity;\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\", \"Transverse_Mercator\", \"Transverse Mercator\", \"tmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from './adjust_lon';\n\nexport default function(zone, lon) {\n  if (zone === undefined) {\n    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n    if (zone < 0) {\n      return 0;\n    } else if (zone > 60) {\n      return 60;\n    }\n  }\n  return zone;\n}\n","import adjust_zone from '../common/adjust_zone';\nimport etmerc from './etmerc';\nexport var dependsOn = 'etmerc';\nimport {D2R} from '../constants/values';\n\n\nexport function init() {\n  var zone = adjust_zone(this.zone, this.long0);\n  if (zone === undefined) {\n    throw new Error('unknown utm zone');\n  }\n  this.lat0 = 0;\n  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n  this.x0 = 500000;\n  this.y0 = this.utmSouth ? 10000000 : 0;\n  this.k0 = 0.9996;\n\n  etmerc.init.apply(this);\n  this.forward = etmerc.forward;\n  this.inverse = etmerc.inverse;\n}\n\nexport var names = [\"Universal Transverse Mercator System\", \"utm\"];\nexport default {\n  init: init,\n  names: names,\n  dependsOn: dependsOn\n};\n","export default function(esinp, exp) {\n  return (Math.pow((1 - esinp) / (1 + esinp), exp));\n}","import srat from '../common/srat';\nvar MAX_ITER = 20;\nimport {HALF_PI, FORTPI} from '../constants/values';\n\nexport function init() {\n  var sphi = Math.sin(this.lat0);\n  var cphi = Math.cos(this.lat0);\n  cphi *= cphi;\n  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n  this.phic0 = Math.asin(sphi / this.C);\n  this.ratexp = 0.5 * this.C * this.e;\n  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n  p.x = this.C * lon;\n  return p;\n}\n\nexport function inverse(p) {\n  var DEL_TOL = 1e-14;\n  var lon = p.x / this.C;\n  var lat = p.y;\n  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n  for (var i = MAX_ITER; i > 0; --i) {\n    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n    if (Math.abs(lat - p.y) < DEL_TOL) {\n      break;\n    }\n    p.y = lat;\n  }\n  /* convergence failed */\n  if (!i) {\n    return null;\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gauss\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  gauss.init.apply(this);\n  if (!this.rc) {\n    return;\n  }\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\n\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n  if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n","/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\n\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\n\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n  // spheric latitude\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n  // spheric longitude\n  var I = this.alpha * (p.x - this.lambda0);\n\n  // psoeudo equatorial rotation\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\n\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n  var lambda = this.lambda0 + I / this.alpha;\n\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    }\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\n\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tsfnz from '../common/tsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport { D2R, EPSLN, HALF_PI, TWO_PI, FORTPI } from '../constants/values';\n\nvar TOL = 1e-7;\n\nfunction isTypeA(P) {\n  var typeAProjections = ['Hotine_Oblique_Mercator','Hotine_Oblique_Mercator_Azimuth_Natural_Origin'];\n  var projectionName = typeof P.PROJECTION === \"object\" ? Object.keys(P.PROJECTION)[0] : P.PROJECTION;\n  \n  return 'no_uoff' in P || 'no_off' in P || typeAProjections.indexOf(projectionName) !== -1;\n}\n\n\n/* Initialize the Oblique Mercator  projection\n    ------------------------------------------*/\nexport function init() {  \n  var con, com, cosph0, D, F, H, L, sinph0, p, J, gamma = 0,\n    gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0, AB;\n  \n  // only Type A uses the no_off or no_uoff property\n  // https://github.com/OSGeo/proj.4/issues/104\n  this.no_off = isTypeA(this);\n  this.no_rot = 'no_rot' in this;\n  \n  var alp = false;\n  if (\"alpha\" in this) {\n    alp = true;\n  }\n\n  var gam = false;\n  if (\"rectified_grid_angle\" in this) {\n    gam = true;\n  }\n\n  if (alp) {\n    alpha_c = this.alpha;\n  }\n  \n  if (gam) {\n    gamma = (this.rectified_grid_angle * D2R);\n  }\n  \n  if (alp || gam) {\n    lamc = this.longc;\n  } else {\n    lam1 = this.long1;\n    phi1 = this.lat1;\n    lam2 = this.long2;\n    phi2 = this.lat2;\n    \n    if (Math.abs(phi1 - phi2) <= TOL || (con = Math.abs(phi1)) <= TOL ||\n        Math.abs(con - HALF_PI) <= TOL || Math.abs(Math.abs(this.lat0) - HALF_PI) <= TOL ||\n        Math.abs(Math.abs(phi2) - HALF_PI) <= TOL) {\n      throw new Error();\n    }\n  }\n  \n  var one_es = 1.0 - this.es;\n  com = Math.sqrt(one_es);\n  \n  if (Math.abs(this.lat0) > EPSLN) {\n    sinph0 = Math.sin(this.lat0);\n    cosph0 = Math.cos(this.lat0);\n    con = 1 - this.es * sinph0 * sinph0;\n    this.B = cosph0 * cosph0;\n    this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);\n    this.A = this.B * this.k0 * com / con;\n    D = this.B * com / (cosph0 * Math.sqrt(con));\n    F = D * D -1;\n    \n    if (F <= 0) {\n      F = 0;\n    } else {\n      F = Math.sqrt(F);\n      if (this.lat0 < 0) {\n        F = -F;\n      }\n    }\n    \n    this.E = F += D;\n    this.E *= Math.pow(tsfnz(this.e, this.lat0, sinph0), this.B);\n  } else {\n    this.B = 1 / com;\n    this.A = this.k0;\n    this.E = D = F = 1;\n  }\n  \n  if (alp || gam) {\n    if (alp) {\n      gamma0 = Math.asin(Math.sin(alpha_c) / D);\n      if (!gam) {\n        gamma = alpha_c;\n      }\n    } else {\n      gamma0 = gamma;\n      alpha_c = Math.asin(D * Math.sin(gamma0));\n    }\n    this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;\n  } else {\n    H = Math.pow(tsfnz(this.e, phi1, Math.sin(phi1)), this.B);\n    L = Math.pow(tsfnz(this.e, phi2, Math.sin(phi2)), this.B);\n    F = this.E / H;\n    p = (L - H) / (L + H);\n    J = this.E * this.E;\n    J = (J - L * H) / (J + L * H);\n    con = lam1 - lam2;\n    \n    if (con < -Math.pi) {\n      lam2 -=TWO_PI;\n    } else if (con > Math.pi) {\n      lam2 += TWO_PI;\n    }\n    \n    this.lam0 = adjust_lon(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);\n    gamma0 = Math.atan(2 * Math.sin(this.B * adjust_lon(lam1 - this.lam0)) / (F - 1 / F));\n    gamma = alpha_c = Math.asin(D * Math.sin(gamma0));\n  }\n  \n  this.singam = Math.sin(gamma0);\n  this.cosgam = Math.cos(gamma0);\n  this.sinrot = Math.sin(gamma);\n  this.cosrot = Math.cos(gamma);\n  \n  this.rB = 1 / this.B;\n  this.ArB = this.A * this.rB;\n  this.BrA = 1 / this.ArB;\n  AB = this.A * this.B;\n  \n  if (this.no_off) {\n    this.u_0 = 0;\n  } else {\n    this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));\n    \n    if (this.lat0 < 0) {\n      this.u_0 = - this.u_0;\n    }  \n  }\n    \n  F = 0.5 * gamma0;\n  this.v_pole_n = this.ArB * Math.log(Math.tan(FORTPI - F));\n  this.v_pole_s = this.ArB * Math.log(Math.tan(FORTPI + F));\n}\n\n\n/* Oblique Mercator forward equations--mapping lat,long to x,y\n    ----------------------------------------------------------*/\nexport function forward(p) {\n  var coords = {};\n  var S, T, U, V, W, temp, u, v;\n  p.x = p.x - this.lam0;\n  \n  if (Math.abs(Math.abs(p.y) - HALF_PI) > EPSLN) {\n    W = this.E / Math.pow(tsfnz(this.e, p.y, Math.sin(p.y)), this.B);\n    \n    temp = 1 / W;\n    S = 0.5 * (W - temp);\n    T = 0.5 * (W + temp);\n    V = Math.sin(this.B * p.x);\n    U = (S * this.singam - V * this.cosgam) / T;\n        \n    if (Math.abs(Math.abs(U) - 1.0) < EPSLN) {\n      throw new Error();\n    }\n    \n    v = 0.5 * this.ArB * Math.log((1 - U)/(1 + U));\n    temp = Math.cos(this.B * p.x);\n    \n    if (Math.abs(temp) < TOL) {\n      u = this.A * p.x;\n    } else {\n      u = this.ArB * Math.atan2((S * this.cosgam + V * this.singam), temp);\n    }    \n  } else {\n    v = p.y > 0 ? this.v_pole_n : this.v_pole_s;\n    u = this.ArB * p.y;\n  }\n     \n  if (this.no_rot) {\n    coords.x = u;\n    coords.y = v;\n  } else {\n    u -= this.u_0;\n    coords.x = v * this.cosrot + u * this.sinrot;\n    coords.y = u * this.cosrot - v * this.sinrot;\n  }\n  \n  coords.x = (this.a * coords.x + this.x0);\n  coords.y = (this.a * coords.y + this.y0);\n  \n  return coords;\n}\n\nexport function inverse(p) {\n  var u, v, Qp, Sp, Tp, Vp, Up;\n  var coords = {};\n  \n  p.x = (p.x - this.x0) * (1.0 / this.a);\n  p.y = (p.y - this.y0) * (1.0 / this.a);\n\n  if (this.no_rot) {\n    v = p.y;\n    u = p.x;\n  } else {\n    v = p.x * this.cosrot - p.y * this.sinrot;\n    u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;\n  }\n  \n  Qp = Math.exp(-this.BrA * v);\n  Sp = 0.5 * (Qp - 1 / Qp);\n  Tp = 0.5 * (Qp + 1 / Qp);\n  Vp = Math.sin(this.BrA * u);\n  Up = (Vp * this.cosgam + Sp * this.singam) / Tp;\n  \n  if (Math.abs(Math.abs(Up) - 1) < EPSLN) {\n    coords.x = 0;\n    coords.y = Up < 0 ? -HALF_PI : HALF_PI;\n  } else {\n    coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));\n    coords.y = phi2z(this.e, Math.pow(coords.y, 1 / this.B));\n    \n    if (coords.y === Infinity) {\n      throw new Error();\n    }\n        \n    coords.x = -this.rB * Math.atan2((Sp * this.cosgam - Vp * this.singam), Math.cos(this.BrA * u));\n  }\n  \n  coords.x += this.lam0;\n  \n  return coords;\n}\n\nexport var names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Two_Point_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"Oblique_Mercator\", \"omerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n  \n  //double lat0;                    /* the reference latitude               */\n  //double long0;                   /* the reference longitude              */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n  \n  //the above value can be set with proj4.defs\n  //example: proj4.defs(\"EPSG:2154\",\"+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\");\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\n  \"Lambert Tangential Conformal Conic Projection\",\n  \"Lambert_Conformal_Conic\",\n  \"Lambert_Conformal_Conic_1SP\",\n  \"Lambert_Conformal_Conic_2SP\",\n  \"lcc\",\n  \"Lambert Conic Conformal (1SP)\",\n  \"Lambert Conic Conformal (2SP)\"\n];\n\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  this.a = 6377397.155;\n  this.es = 0.006674372230614;\n  this.e = Math.sqrt(this.es);\n  if (!this.lat0) {\n    this.lat0 = 0.863937979737193;\n  }\n  if (!this.long0) {\n    this.long0 = 0.7417649320975901 - 0.308341501185665;\n  }\n  /* if scale not set default to 0.9999 */\n  if (!this.k0) {\n    this.k0 = 0.9999;\n  }\n  this.s45 = 0.785398163397448; /* 45 */\n  this.s90 = 2 * this.s45;\n  this.fi0 = this.lat0;\n  this.e2 = this.es;\n  this.e = Math.sqrt(this.e2);\n  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n  this.uq = 1.04216856380474;\n  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n  this.k1 = this.k0;\n  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n  this.s0 = 1.37008346281555;\n  this.n = Math.sin(this.s0);\n  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n  this.ad = this.s90 - this.uq;\n}\n\n/* ellipsoid */\n/* calculate xy from lat/lon */\n/* Constants, identical to inverse transform function */\nexport function forward(p) {\n  var gfi, u, deltav, s, d, eps, ro;\n  var lon = p.x;\n  var lat = p.y;\n  var delta_lon = adjust_lon(lon - this.long0);\n  /* Transformation */\n  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n  deltav = -delta_lon * this.alfa;\n  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n  eps = this.n * d;\n  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n  p.y = ro * Math.cos(eps) / 1;\n  p.x = ro * Math.sin(eps) / 1;\n\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  return (p);\n}\n\n/* calculate lat/lon from xy */\nexport function inverse(p) {\n  var u, deltav, s, d, eps, ro, fi1;\n  var ok;\n\n  /* Transformation */\n  /* revert y, x*/\n  var tmp = p.x;\n  p.x = p.y;\n  p.y = tmp;\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  ro = Math.sqrt(p.x * p.x + p.y * p.y);\n  eps = Math.atan2(p.y, p.x);\n  d = eps / Math.sin(this.s0);\n  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n  p.x = this.long0 - deltav / this.alfa;\n  fi1 = u;\n  ok = 0;\n  var iter = 0;\n  do {\n    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n    if (Math.abs(fi1 - p.y) < 0.0000000001) {\n      ok = 1;\n    }\n    fi1 = p.y;\n    iter += 1;\n  } while (ok === 0 && iter < 15);\n  if (iter >= 15) {\n    return null;\n  }\n\n  return (p);\n}\n\nexport var names = [\"Krovak\", \"krovak\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(e0, e1, e2, e3, phi) {\n  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n}","export default function(x) {\n  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n}","export default function(x) {\n  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n}","export default function(x) {\n  return (0.05859375 * x * x * (1 + 0.75 * x));\n}","export default function(x) {\n  return (x * x * x * (35 / 3072));\n}","export default function(a, e, sinphi) {\n  var temp = e * sinphi;\n  return a / Math.sqrt(1 - temp * temp);\n}","import {HALF_PI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n}\n","export default function(ml, e0, e1, e2, e3) {\n  var phi;\n  var dphi;\n\n  phi = ml / e0;\n  for (var i = 0; i < 15; i++) {\n    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n  return NaN;\n}","import mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nexport function init() {\n  if (!this.sphere) {\n    this.e0 = e0fn(this.es);\n    this.e1 = e1fn(this.es);\n    this.e2 = e2fn(this.es);\n    this.e3 = e3fn(this.es);\n    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  }\n}\n\n/* Cassini forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y;\n  var lam = p.x;\n  var phi = p.y;\n  lam = adjust_lon(lam - this.long0);\n\n  if (this.sphere) {\n    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n  }\n  else {\n    //ellipsoid\n    var sinphi = Math.sin(phi);\n    var cosphi = Math.cos(phi);\n    var nl = gN(this.a, this.e, sinphi);\n    var tl = Math.tan(phi) * Math.tan(phi);\n    var al = lam * Math.cos(phi);\n    var asq = al * al;\n    var cl = this.es * cosphi * cosphi / (1 - this.es);\n    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n  }\n\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var phi, lam;\n\n  if (this.sphere) {\n    var dd = y + this.lat0;\n    phi = Math.asin(Math.sin(dd) * Math.cos(x));\n    lam = Math.atan2(Math.tan(x), Math.cos(dd));\n  }\n  else {\n    /* ellipsoid */\n    var ml1 = this.ml0 / this.a + y;\n    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n      p.x = this.long0;\n      p.y = HALF_PI;\n      if (y < 0) {\n        p.y *= -1;\n      }\n      return p;\n    }\n    var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n    var tl1 = Math.pow(Math.tan(phi1), 2);\n    var dl = x * this.a / nl1;\n    var dsq = dl * dl;\n    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n  }\n\n  p.x = adjust_lon(lam + this.long0);\n  p.y = adjust_lat(phi);\n  return p;\n\n}\n\nexport var names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(eccent, sinphi) {\n  var con;\n  if (eccent > 1.0e-7) {\n    con = eccent * sinphi;\n    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n  }\n  else {\n    return (2 * sinphi);\n  }\n}","\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\n\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\n\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  }\n  else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  }\n  else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n    case this.N_POLE:\n      this.dd = 1;\n      break;\n    case this.S_POLE:\n      this.dd = 1;\n      break;\n    case this.EQUIT:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      this.dd = 1 / this.rq;\n      this.xmf = 1;\n      this.ymf = 0.5 * this.qp;\n      break;\n    case this.OBLIQ:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      sinphi = Math.sin(this.lat0);\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n      this.ymf = (this.xmf = this.rq) / this.dd;\n      this.xmf *= this.dd;\n      break;\n    }\n  }\n  else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.lat0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  }\n  else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n      break;\n    case this.EQUIT:\n      b = 1 + cosb * coslam;\n      break;\n    case this.N_POLE:\n      b = HALF_PI + phi;\n      q = this.qp - q;\n      break;\n    case this.S_POLE:\n      b = phi - HALF_PI;\n      q = this.qp + q;\n      break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n    case this.EQUIT:\n      b = Math.sqrt(2 / b);\n      if (this.mode === this.OBLIQ) {\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n      }\n      else {\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n      }\n      x = this.xmf * b * cosb * sinlam;\n      break;\n    case this.N_POLE:\n    case this.S_POLE:\n      if (q >= 0) {\n        x = (b = Math.sqrt(q)) * sinlam;\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n      }\n      else {\n        x = y = 0;\n      }\n      break;\n    }\n  }\n\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh, sinz = 0;\n\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n    case this.EQUIT:\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n      x *= sinz;\n      y = cosz * rh;\n      break;\n    case this.OBLIQ:\n      phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n      x *= sinz * this.cosph0;\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n      break;\n    case this.N_POLE:\n      y = -y;\n      phi = HALF_PI - phi;\n      break;\n    case this.S_POLE:\n      phi -= HALF_PI;\n      break;\n    }\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n  }\n  else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= (sCe = Math.sin(sCe));\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      }\n      else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = (x * x + y * y);\n      if (!q) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\n\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\n\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\n\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n}\n\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};\n","export default function(x) {\n  if (Math.abs(x) > 1) {\n    x = (x > 1) ? 1 : -1;\n  }\n  return Math.asin(x);\n}","import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\n/*\n  reference:\n    Wolfram Mathworld \"Gnomonic Projection\"\n    http://mathworld.wolfram.com/GnomonicProjection.html\n    Accessed: 12th November 2009\n  */\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n  // Approximation for projecting points to the horizon (infinity)\n  this.infinity_dist = 1000 * this.a;\n  this.rc = 1;\n}\n\n/* Gnomonic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g;\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n  }\n  else {\n\n    // Point is in the opposing hemisphere and is unprojectable\n    // We still need to return a reasonable point, so we project\n    // to infinity, on a bearing\n    // equivalent to the northern hemisphere equivalent\n    // This is a reasonable approximation for short shapes and lines that\n    // straddle the horizon.\n\n    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* Rho */\n  var sinc, cosc;\n  var c;\n  var lon, lat;\n\n  /* Inverse equations\n      -----------------*/\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n\n  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    c = Math.atan2(rh, this.rc);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n\n    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n    lon = adjust_lon(this.long0 + lon);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gnom\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, q) {\n  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n    if (q < 0) {\n      return (-1 * HALF_PI);\n    }\n    else {\n      return HALF_PI;\n    }\n  }\n  //var phi = 0.5* q/(1-eccent*eccent);\n  var phi = Math.asin(0.5 * q);\n  var dphi;\n  var sin_phi;\n  var cos_phi;\n  var con;\n  for (var i = 0; i < 30; i++) {\n    sin_phi = Math.sin(phi);\n    cos_phi = Math.cos(phi);\n    con = eccent * sin_phi;\n    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n  return NaN;\n}\n","import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  }\n  else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n  this.rc = Math.cos(this.lat_ts);\n}\n\n// forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  var dlon = adjust_lon(lon - this.long0);\n  var dlat = adjust_lat(lat - this.lat0);\n  p.x = this.x0 + (this.a * dlon * this.rc);\n  p.y = this.y0 + (this.a * dlat);\n  return p;\n}\n\n// inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var x = p.x;\n  var y = p.y;\n\n  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n  return p;\n}\n\nexport var names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport {EPSLN} from '../constants/values';\n\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\n\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    }\n    else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  }\n  else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    }\n    else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n\n  }\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    }\n    else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n    }\n  }\n  else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    }\n    else {\n\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {SEC_TO_RAD} from '../constants/values';\n\n/*\n  reference\n    Department of Land and Survey Technical Circular 1973/32\n      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n    OSG Technical Report 4.1\n      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n  */\n\n/**\n * iterations: Number of iterations to refine inverse transform.\n *     0 -> km accuracy\n *     1 -> m accuracy -- suitable for most mapping applications\n *     2 -> mm accuracy\n */\nexport var iterations = 1;\n\nexport function init() {\n  this.A = [];\n  this.A[1] = 0.6399175073;\n  this.A[2] = -0.1358797613;\n  this.A[3] = 0.063294409;\n  this.A[4] = -0.02526853;\n  this.A[5] = 0.0117879;\n  this.A[6] = -0.0055161;\n  this.A[7] = 0.0026906;\n  this.A[8] = -0.001333;\n  this.A[9] = 0.00067;\n  this.A[10] = -0.00034;\n\n  this.B_re = [];\n  this.B_im = [];\n  this.B_re[1] = 0.7557853228;\n  this.B_im[1] = 0;\n  this.B_re[2] = 0.249204646;\n  this.B_im[2] = 0.003371507;\n  this.B_re[3] = -0.001541739;\n  this.B_im[3] = 0.041058560;\n  this.B_re[4] = -0.10162907;\n  this.B_im[4] = 0.01727609;\n  this.B_re[5] = -0.26623489;\n  this.B_im[5] = -0.36249218;\n  this.B_re[6] = -0.6870983;\n  this.B_im[6] = -1.1651967;\n\n  this.C_re = [];\n  this.C_im = [];\n  this.C_re[1] = 1.3231270439;\n  this.C_im[1] = 0;\n  this.C_re[2] = -0.577245789;\n  this.C_im[2] = -0.007809598;\n  this.C_re[3] = 0.508307513;\n  this.C_im[3] = -0.112208952;\n  this.C_re[4] = -0.15094762;\n  this.C_im[4] = 0.18200602;\n  this.C_re[5] = 1.01418179;\n  this.C_im[5] = 1.64497696;\n  this.C_re[6] = 1.9660549;\n  this.C_im[6] = 2.5127645;\n\n  this.D = [];\n  this.D[1] = 1.5627014243;\n  this.D[2] = 0.5185406398;\n  this.D[3] = -0.03333098;\n  this.D[4] = -0.1052906;\n  this.D[5] = -0.0368594;\n  this.D[6] = 0.007317;\n  this.D[7] = 0.01220;\n  this.D[8] = 0.00394;\n  this.D[9] = -0.0013;\n}\n\n/**\n    New Zealand Map Grid Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var n;\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lat = lat - this.lat0;\n  var delta_lon = lon - this.long0;\n\n  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n  var d_lambda = delta_lon;\n  var d_phi_n = 1; // d_phi^0\n\n  var d_psi = 0;\n  for (n = 1; n <= 10; n++) {\n    d_phi_n = d_phi_n * d_phi;\n    d_psi = d_psi + this.A[n] * d_phi_n;\n  }\n\n  // 2. Calculate theta\n  var th_re = d_psi;\n  var th_im = d_lambda;\n\n  // 3. Calculate z\n  var th_n_re = 1;\n  var th_n_im = 0; // theta^0\n  var th_n_re1;\n  var th_n_im1;\n\n  var z_re = 0;\n  var z_im = 0;\n  for (n = 1; n <= 6; n++) {\n    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n    th_n_re = th_n_re1;\n    th_n_im = th_n_im1;\n    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n  }\n\n  // 4. Calculate easting and northing\n  p.x = (z_im * this.a) + this.x0;\n  p.y = (z_re * this.a) + this.y0;\n\n  return p;\n}\n\n/**\n    New Zealand Map Grid Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var n;\n  var x = p.x;\n  var y = p.y;\n\n  var delta_x = x - this.x0;\n  var delta_y = y - this.y0;\n\n  // 1. Calculate z\n  var z_re = delta_y / this.a;\n  var z_im = delta_x / this.a;\n\n  // 2a. Calculate theta - first approximation gives km accuracy\n  var z_n_re = 1;\n  var z_n_im = 0; // z^0\n  var z_n_re1;\n  var z_n_im1;\n\n  var th_re = 0;\n  var th_im = 0;\n  for (n = 1; n <= 6; n++) {\n    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n    z_n_re = z_n_re1;\n    z_n_im = z_n_im1;\n    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n  }\n\n  // 2b. Iterate to refine the accuracy of the calculation\n  //        0 iterations gives km accuracy\n  //        1 iteration gives m accuracy -- good enough for most mapping applications\n  //        2 iterations bives mm accuracy\n  for (var i = 0; i < this.iterations; i++) {\n    var th_n_re = th_re;\n    var th_n_im = th_im;\n    var th_n_re1;\n    var th_n_im1;\n\n    var num_re = z_re;\n    var num_im = z_im;\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    th_n_re = 1;\n    th_n_im = 0;\n    var den_re = this.B_re[1];\n    var den_im = this.B_im[1];\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    // Complex division\n    var den2 = den_re * den_re + den_im * den_im;\n    th_re = (num_re * den_re + num_im * den_im) / den2;\n    th_im = (num_im * den_re - num_re * den_im) / den2;\n  }\n\n  // 3. Calculate d_phi              ...                                    // and d_lambda\n  var d_psi = th_re;\n  var d_lambda = th_im;\n  var d_psi_n = 1; // d_psi^0\n\n  var d_phi = 0;\n  for (n = 1; n <= 9; n++) {\n    d_psi_n = d_psi_n * d_psi;\n    d_phi = d_phi + this.D[n] * d_psi_n;\n  }\n\n  // 4. Calculate latitude and longitude\n  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n  var lon = this.long0 + d_lambda;\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\n\n/* Initialize the Miller Cylindrical projection\n  -------------------------------------------*/\nexport function init() {\n  //no-op\n}\n\n/* Miller Cylindrical forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x = this.x0 + this.a * dlon;\n  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Miller Cylindrical inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n\n  var lon = adjust_lon(this.long0 + p.x / this.a);\n  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Miller_Cylindrical\", \"mill\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  }\n  else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    }\n    else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n\n  }\n  else {\n\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var lat, temp, lon, s;\n\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    }\n    else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  }\n  else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    }\n    else if ((s - EPSLN) < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nexport function init() {}\nimport {EPSLN} from '../constants/values';\n/* Mollweide forward equations--mapping lat,long to x,y\n    ----------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var theta = lat;\n  var con = Math.PI * Math.sin(lat);\n\n  /* Iterate using the Newton-Raphson method to find theta\n      -----------------------------------------------------*/\n  while (true) {\n    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n    theta += delta_theta;\n    if (Math.abs(delta_theta) < EPSLN) {\n      break;\n    }\n  }\n  theta /= 2;\n\n  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n       this is done here because of precision problems with \"cos(theta)\"\n       --------------------------------------------------------------------------*/\n  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n    delta_lon = 0;\n  }\n  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var theta;\n  var arg;\n\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  arg = p.y / (1.4142135623731 * this.a);\n\n  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n       a number very close to one is used instead.\n       -------------------------------------------------------------------*/\n  if (Math.abs(arg) > 0.999999999999) {\n    arg = 0.999999999999;\n  }\n  theta = Math.asin(arg);\n  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n  if (lon < (-Math.PI)) {\n    lon = -Math.PI;\n  }\n  if (lon > Math.PI) {\n    lon = Math.PI;\n  }\n  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n  if (Math.abs(arg) > 1) {\n    arg = 1;\n  }\n  var lat = Math.asin(arg);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mollweide\", \"moll\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport msfnz from '../common/msfnz';\nimport mlfn from '../common/mlfn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.lat2 = this.lat2 || this.lat1;\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n\n  this.sinphi = Math.sin(this.lat1);\n  this.cosphi = Math.cos(this.lat1);\n\n  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n    this.ns = this.sinphi;\n  }\n  else {\n    this.sinphi = Math.sin(this.lat2);\n    this.cosphi = Math.cos(this.lat2);\n    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n  }\n  this.g = this.ml1 + this.ms1 / this.ns;\n  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  this.rh = this.a * (this.g - this.ml0);\n}\n\n/* Equidistant Conic forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var rh1;\n\n  /* Forward equations\n      -----------------*/\n  if (this.sphere) {\n    rh1 = this.a * (this.g - lat);\n  }\n  else {\n    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n    rh1 = this.a * (this.g - ml);\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  var x = this.x0 + rh1 * Math.sin(theta);\n  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  var con, rh1, lat, lon;\n  if (this.ns >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    lat = adjust_lat(this.g - rh1 / this.a);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    var ml = this.g - rh1 / this.a;\n    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n}\n\nexport var names = [\"Equidistant_Conic\", \"eqdc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n/* Initialize the Van Der Grinten projection\n  ----------------------------------------*/\nexport function init() {\n  //this.R = 6370997; //Radius of earth\n  this.R = this.a;\n}\n\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  /* Forward equations\n    -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x, y;\n\n  if (Math.abs(lat) <= EPSLN) {\n    x = this.x0 + this.R * dlon;\n    y = this.y0;\n  }\n  var theta = asinz(2 * Math.abs(lat / Math.PI));\n  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n    x = this.x0;\n    if (lat >= 0) {\n      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n    }\n    else {\n      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n    }\n    //  return(OK);\n  }\n  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n  var asq = al * al;\n  var sinth = Math.sin(theta);\n  var costh = Math.cos(theta);\n\n  var g = costh / (sinth + costh - 1);\n  var gsq = g * g;\n  var m = g * (2 / sinth - 1);\n  var msq = m * m;\n  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n  if (dlon < 0) {\n    con = -con;\n  }\n  x = this.x0 + con;\n  //con = Math.abs(con / (Math.PI * this.R));\n  var q = asq + g;\n  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n  if (lat >= 0) {\n    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 + con;\n  }\n  else {\n    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 - con;\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Van Der Grinten inverse equations--mapping x,y to lat/long\n  ---------------------------------------------------------*/\nexport function inverse(p) {\n  var lon, lat;\n  var xx, yy, xys, c1, c2, c3;\n  var a1;\n  var m1;\n  var con;\n  var th1;\n  var d;\n\n  /* inverse equations\n    -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  con = Math.PI * this.R;\n  xx = p.x / con;\n  yy = p.y / con;\n  xys = xx * xx + yy * yy;\n  c1 = -Math.abs(yy) * (1 + xys);\n  c2 = c1 - 2 * yy * yy + xx * xx;\n  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n  m1 = 2 * Math.sqrt(-a1 / 3);\n  con = ((3 * d) / a1) / m1;\n  if (Math.abs(con) > 1) {\n    if (con >= 0) {\n      con = 1;\n    }\n    else {\n      con = -1;\n    }\n  }\n  th1 = Math.acos(con) / 3;\n  if (p.y >= 0) {\n    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n  else {\n    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n\n  if (Math.abs(xx) < EPSLN) {\n    lon = this.long0;\n  }\n  else {\n    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\n\n\n\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c ? c / Math.sin(c) : 1;\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //Default case\n      tanphi = sinphi / cosphi;\n      Nl1 = gN(this.a, this.e, this.sin_p12);\n      Nl = gN(this.a, this.e, sinphi);\n      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n      if (Az === 0) {\n        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else {\n        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n      }\n      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n      GH = G * H;\n      Hs = H * H;\n      s2 = s * s;\n      s3 = s2 * s;\n      s4 = s3 * s;\n      s5 = s4 * s;\n      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n      p.x = this.x0 + c * Math.sin(Az);\n      p.y = this.y0 + c * Math.cos(Az);\n      return p;\n    }\n  }\n\n\n}\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > (2 * HALF_PI * this.a)) {\n      return;\n    }\n    z = rh / this.a;\n\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    }\n    else {\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      }\n      else {\n        /*con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        }*/\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else {\n      //default case\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      Az = Math.atan2(p.x, p.y);\n      N1 = gN(this.a, this.e, this.sin_p12);\n      cosAz = Math.cos(Az);\n      tmp = this.e * this.cos_p12 * cosAz;\n      A = -tmp * tmp / (1 - this.es);\n      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n      D = rh / N1;\n      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n      sinpsi = Math.sin(psi);\n      lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n  }\n\n}\n\nexport var names = [\"Azimuthal_Equidistant\", \"aeqd\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* height above ellipsoid      */\n  var z; /* angle          */\n  var sinz, cosz; /* sin of z and cos of z      */\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n\n  lon = this.long0;\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n    }\n    else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// QSC projection rewritten from the original PROJ4\n// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\nimport {EPSLN, TWO_PI, SPI, HALF_PI, FORTPI} from '../constants/values';\n\n/* constants */\nvar FACE_ENUM = {\n    FRONT: 1,\n    RIGHT: 2,\n    BACK: 3,\n    LEFT: 4,\n    TOP: 5,\n    BOTTOM: 6\n};\n\nvar AREA_ENUM = {\n    AREA_0: 1,\n    AREA_1: 2,\n    AREA_2: 3,\n    AREA_3: 4\n};\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n  /* Determine the cube face from the center of projection. */\n  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n    this.face = FACE_ENUM.TOP;\n  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n    this.face = FACE_ENUM.BOTTOM;\n  } else if (Math.abs(this.long0) <= FORTPI) {\n    this.face = FACE_ENUM.FRONT;\n  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n  } else {\n    this.face = FACE_ENUM.BACK;\n  }\n\n  /* Fill in useful values for the ellipsoid <-> sphere shift\n   * described in [LK12]. */\n  if (this.es !== 0) {\n    this.one_minus_f = 1 - (this.a - this.b) / this.a;\n    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n  }\n}\n\n// QSC forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n  var xy = {x: 0, y: 0};\n  var lat, lon;\n  var theta, phi;\n  var t, mu;\n  /* nu; */\n  var area = {value: 0};\n\n  // move lon according to projection's lon\n  p.x -= this.long0;\n\n  /* Convert the geodetic latitude to a geocentric latitude.\n   * This corresponds to the shift from the ellipsoid to the sphere\n   * described in [LK12]. */\n  if (this.es !== 0) {//if (P->es != 0) {\n    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n  } else {\n    lat = p.y;\n  }\n\n  /* Convert the input lat, lon into theta, phi as used by QSC.\n   * This depends on the cube face and the area on it.\n   * For the top and bottom face, we can compute theta and phi\n   * directly from phi, lam. For the other faces, we must use\n   * unit sphere cartesian coordinates as an intermediate step. */\n  lon = p.x; //lon = lp.lam;\n  if (this.face === FACE_ENUM.TOP) {\n    phi = HALF_PI - lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = lon - HALF_PI;\n    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = lon + HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = lon;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = HALF_PI + lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = -lon + HALF_PI;\n    } else if (lon < FORTPI && lon >= -FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = -lon;\n    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = -lon - HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n    }\n  } else {\n    var q, r, s;\n    var sinlat, coslat;\n    var sinlon, coslon;\n\n    if (this.face === FACE_ENUM.RIGHT) {\n      lon = qsc_shift_lon_origin(lon, +HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lon = qsc_shift_lon_origin(lon, +SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lon = qsc_shift_lon_origin(lon, -HALF_PI);\n    }\n    sinlat = Math.sin(lat);\n    coslat = Math.cos(lat);\n    sinlon = Math.sin(lon);\n    coslon = Math.cos(lon);\n    q = coslat * coslon;\n    r = coslat * sinlon;\n    s = sinlat;\n\n    if (this.face === FACE_ENUM.FRONT) {\n      phi = Math.acos(q);\n      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n    } else if (this.face === FACE_ENUM.RIGHT) {\n      phi = Math.acos(r);\n      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n    } else if (this.face === FACE_ENUM.BACK) {\n      phi = Math.acos(-q);\n      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      phi = Math.acos(-r);\n      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n    } else {\n      /* Impossible */\n      phi = theta = 0;\n      area.value = AREA_ENUM.AREA_0;\n    }\n  }\n\n  /* Compute mu and nu for the area of definition.\n   * For mu, see Eq. (3-21) in [OL76], but note the typos:\n   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n  /* Apply the result to the real area. */\n  if (area.value === AREA_ENUM.AREA_1) {\n    mu += HALF_PI;\n  } else if (area.value === AREA_ENUM.AREA_2) {\n    mu += SPI;\n  } else if (area.value === AREA_ENUM.AREA_3) {\n    mu += 1.5 * SPI;\n  }\n\n  /* Now compute x, y from mu and nu */\n  xy.x = t * Math.cos(mu);\n  xy.y = t * Math.sin(mu);\n  xy.x = xy.x * this.a + this.x0;\n  xy.y = xy.y * this.a + this.y0;\n\n  p.x = xy.x;\n  p.y = xy.y;\n  return p;\n}\n\n// QSC inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n  var lp = {lam: 0, phi: 0};\n  var mu, nu, cosmu, tannu;\n  var tantheta, theta, cosphi, phi;\n  var t;\n  var area = {value: 0};\n\n  /* de-offset */\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  /* Convert the input x, y to the mu and nu angles as used by QSC.\n   * This depends on the area of the cube face. */\n  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n  mu = Math.atan2(p.y, p.x);\n  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_0;\n  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n    area.value = AREA_ENUM.AREA_1;\n    mu -= HALF_PI;\n  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_2;\n    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n  } else {\n    area.value = AREA_ENUM.AREA_3;\n    mu += HALF_PI;\n  }\n\n  /* Compute phi and theta for the area of definition.\n   * The inverse projection is not described in the original paper, but some\n   * good hints can be found here (as of 2011-12-14):\n   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n  t = (SPI / 12) * Math.tan(mu);\n  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n  theta = Math.atan(tantheta);\n  cosmu = Math.cos(mu);\n  tannu = Math.tan(nu);\n  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n  if (cosphi < -1) {\n    cosphi = -1;\n  } else if (cosphi > +1) {\n    cosphi = +1;\n  }\n\n  /* Apply the result to the real area on the cube face.\n   * For the top and bottom face, we can compute phi and lam directly.\n   * For the other faces, we must use unit sphere cartesian coordinates\n   * as an intermediate step. */\n  if (this.face === FACE_ENUM.TOP) {\n    phi = Math.acos(cosphi);\n    lp.phi = HALF_PI - phi;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = theta;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = Math.acos(cosphi);\n    lp.phi = phi - HALF_PI;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = -theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = -theta;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = -theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n    }\n  } else {\n    /* Compute phi and lam via cartesian unit sphere coordinates. */\n    var q, r, s;\n    q = cosphi;\n    t = q * q;\n    if (t >= 1) {\n      s = 0;\n    } else {\n      s = Math.sqrt(1 - t) * Math.sin(theta);\n    }\n    t += s * s;\n    if (t >= 1) {\n      r = 0;\n    } else {\n      r = Math.sqrt(1 - t);\n    }\n    /* Rotate q,r,s into the correct area. */\n    if (area.value === AREA_ENUM.AREA_1) {\n      t = r;\n      r = -s;\n      s = t;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      r = -r;\n      s = -s;\n    } else if (area.value === AREA_ENUM.AREA_3) {\n      t = r;\n      r = s;\n      s = -t;\n    }\n    /* Rotate q,r,s into the correct cube face. */\n    if (this.face === FACE_ENUM.RIGHT) {\n      t = q;\n      q = -r;\n      r = t;\n    } else if (this.face === FACE_ENUM.BACK) {\n      q = -q;\n      r = -r;\n    } else if (this.face === FACE_ENUM.LEFT) {\n      t = q;\n      q = r;\n      r = -t;\n    }\n    /* Now compute phi and lam from the unit sphere coordinates. */\n    lp.phi = Math.acos(-s) - HALF_PI;\n    lp.lam = Math.atan2(r, q);\n    if (this.face === FACE_ENUM.RIGHT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n    }\n  }\n\n  /* Apply the shift from the sphere to the ellipsoid as described\n   * in [LK12]. */\n  if (this.es !== 0) {\n    var invert_sign;\n    var tanphi, xa;\n    invert_sign = (lp.phi < 0 ? 1 : 0);\n    tanphi = Math.tan(lp.phi);\n    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n    if (invert_sign) {\n      lp.phi = -lp.phi;\n    }\n  }\n\n  lp.lam += this.long0;\n  p.x = lp.lam;\n  p.y = lp.phi;\n  return p;\n}\n\n/* Helper function for forward projection: compute the theta angle\n * and determine the area number. */\nfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\n  var theta;\n  if (phi < EPSLN) {\n    area.value = AREA_ENUM.AREA_0;\n    theta = 0.0;\n  } else {\n    theta = Math.atan2(y, x);\n    if (Math.abs(theta) <= FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta -= HALF_PI;\n    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta += HALF_PI;\n    }\n  }\n  return theta;\n}\n\n/* Helper function: shift the longitude. */\nfunction qsc_shift_lon_origin(lon, offset) {\n  var slon = lon + offset;\n  if (slon < -SPI) {\n    slon += TWO_PI;\n  } else if (slon > +SPI) {\n    slon -= TWO_PI;\n  }\n  return slon;\n}\n\nexport var names = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n\n","// Robinson projection\n// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\nimport {HALF_PI, D2R, R2D, EPSLN} from '../constants/values';\nimport adjust_lon from '../common/adjust_lon';\n\nvar COEFS_X = [\n    [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n    [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n    [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n    [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n    [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n    [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n    [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n    [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n    [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n    [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n    [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n    [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n    [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n    [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n    [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n    [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n    [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n    [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n    [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n];\n\nvar COEFS_Y = [\n    [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n    [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n    [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n    [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n    [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n    [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n    [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n    [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n    [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n    [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n    [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n    [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n    [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n    [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n    [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n    [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n    [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n    [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n    [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n];\n\nvar FXC = 0.8487;\nvar FYC = 1.3523;\nvar C1 = R2D/5; // rad to 5-degree interval\nvar RC1 = 1/C1;\nvar NODES = 18;\n\nvar poly3_val = function(coefs, x) {\n    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n};\n\nvar poly3_der = function(coefs, x) {\n    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n};\n\nfunction newton_rapshon(f_df, start, max_err, iters) {\n    var x = start;\n    for (; iters; --iters) {\n        var upd = f_df(x);\n        x -= upd;\n        if (Math.abs(upd) < max_err) {\n            break;\n        }\n    }\n    return x;\n}\n\nexport function init() {\n    this.x0 = this.x0 || 0;\n    this.y0 = this.y0 || 0;\n    this.long0 = this.long0 || 0;\n    this.es = 0;\n    this.title = this.title || \"Robinson\";\n}\n\nexport function forward(ll) {\n    var lon = adjust_lon(ll.x - this.long0);\n\n    var dphi = Math.abs(ll.y);\n    var i = Math.floor(dphi * C1);\n    if (i < 0) {\n        i = 0;\n    } else if (i >= NODES) {\n        i = NODES - 1;\n    }\n    dphi = R2D * (dphi - RC1 * i);\n    var xy = {\n        x: poly3_val(COEFS_X[i], dphi) * lon,\n        y: poly3_val(COEFS_Y[i], dphi)\n    };\n    if (ll.y < 0) {\n        xy.y = -xy.y;\n    }\n\n    xy.x = xy.x * this.a * FXC + this.x0;\n    xy.y = xy.y * this.a * FYC + this.y0;\n    return xy;\n}\n\nexport function inverse(xy) {\n    var ll = {\n        x: (xy.x - this.x0) / (this.a * FXC),\n        y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n    };\n\n    if (ll.y >= 1) { // pathologic case\n        ll.x /= COEFS_X[NODES][0];\n        ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n    } else {\n        // find table interval\n        var i = Math.floor(ll.y * NODES);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        for (;;) {\n            if (COEFS_Y[i][0] > ll.y) {\n                --i;\n            } else if (COEFS_Y[i+1][0] <= ll.y) {\n                ++i;\n            } else {\n                break;\n            }\n        }\n        // linear interpolation in 5 degree interval\n        var coefs = COEFS_Y[i];\n        var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n        // find t so that poly3_val(coefs, t) = ll.y\n        t = newton_rapshon(function(x) {\n            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n        }, t, EPSLN, 100);\n\n        ll.x /= poly3_val(COEFS_X[i], t);\n        ll.y = (5 * i + t) * D2R;\n        if (xy.y < 0) {\n            ll.y = -ll.y;\n        }\n    }\n\n    ll.x = adjust_lon(ll.x + this.long0);\n    return ll;\n}\n\nexport var names = [\"Robinson\", \"robin\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {\n    geodeticToGeocentric,\n    geocentricToGeodetic\n} from '../datumUtils';\n\nexport function init() {\n    this.name = 'geocent';\n\n}\n\nexport function forward(p) {\n    var point = geodeticToGeocentric(p, this.es, this.a);\n    return point;\n}\n\nexport function inverse(p) {\n    var point = geocentricToGeodetic(p, this.es, this.a, this.b);\n    return point;\n}\n\nexport var names = [\"Geocentric\", 'geocentric', \"geocent\", \"Geocent\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names\n};","\nvar mode = {\n  N_POLE: 0,\n  S_POLE: 1,\n  EQUIT: 2,\n  OBLIQ: 3\n};\n\nimport { D2R, HALF_PI, EPSLN } from \"../constants/values\";\nimport hypot from \"../common/hypot\";\n\nvar params = {\n  h:     { def: 100000, num: true },           // default is Karman line, no default in PROJ.7\n  azi:   { def: 0, num: true, degrees: true }, // default is North\n  tilt:  { def: 0, num: true, degrees: true }, // default is Nadir\n  long0: { def: 0, num: true },                // default is Greenwich, conversion to rad is automatic\n  lat0:  { def: 0, num: true }                 // default is Equator, conversion to rad is automatic\n};\n\nexport function init() {\n  Object.keys(params).forEach(function (p) {\n    if (typeof this[p] === \"undefined\") {\n      this[p] = params[p].def;\n    } else if (params[p].num && isNaN(this[p])) {\n      throw new Error(\"Invalid parameter value, must be numeric \" + p + \" = \" + this[p]);\n    } else if (params[p].num) {\n      this[p] = parseFloat(this[p]);\n    }\n    if (params[p].degrees) {\n      this[p] = this[p] * D2R;\n    }\n  }.bind(this));\n\n  if (Math.abs((Math.abs(this.lat0) - HALF_PI)) < EPSLN) {\n    this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;\n  } else if (Math.abs(this.lat0) < EPSLN) {\n    this.mode = mode.EQUIT;\n  } else {\n    this.mode = mode.OBLIQ;\n    this.sinph0 = Math.sin(this.lat0);\n    this.cosph0 = Math.cos(this.lat0);\n  }\n\n  this.pn1 = this.h / this.a;  // Normalize relative to the Earth's radius\n\n  if (this.pn1 <= 0 || this.pn1 > 1e10) {\n    throw new Error(\"Invalid height\");\n  }\n  \n  this.p = 1 + this.pn1;\n  this.rp = 1 / this.p;\n  this.h1 = 1 / this.pn1;\n  this.pfact = (this.p + 1) * this.h1;\n  this.es = 0;\n\n  var omega = this.tilt;\n  var gamma = this.azi;\n  this.cg = Math.cos(gamma);\n  this.sg = Math.sin(gamma);\n  this.cw = Math.cos(omega);\n  this.sw = Math.sin(omega);\n}\n\nexport function forward(p) {\n  p.x -= this.long0;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var coslam = Math.cos(p.x);\n  var x, y;\n  switch (this.mode) {\n    case mode.OBLIQ:\n      y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      break;\n    case mode.EQUIT:\n      y = cosphi * coslam;\n      break;\n    case mode.S_POLE:\n      y = -sinphi;\n      break;\n    case mode.N_POLE:\n      y = sinphi;\n      break;\n  }\n  y = this.pn1 / (this.p - y);\n  x = y * cosphi * Math.sin(p.x);\n\n  switch (this.mode) {\n    case mode.OBLIQ:\n      y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n      break;\n    case mode.EQUIT:\n      y *= sinphi;\n      break;\n    case mode.N_POLE:\n      y *= -(cosphi * coslam);\n      break;\n    case mode.S_POLE:\n      y *= cosphi * coslam;\n      break;\n  }\n\n  // Tilt \n  var yt, ba;\n  yt = y * this.cg + x * this.sg;\n  ba = 1 / (yt * this.sw * this.h1 + this.cw);\n  x = (x * this.cg - y * this.sg) * this.cw * ba;\n  y = yt * ba;\n\n  p.x = x * this.a;\n  p.y = y * this.a;\n  return p;\n}\n\nexport function inverse(p) {\n  p.x /= this.a;\n  p.y /= this.a;\n  var r = { x: p.x, y: p.y };\n\n  // Un-Tilt\n  var bm, bq, yt;\n  yt = 1 / (this.pn1 - p.y * this.sw);\n  bm = this.pn1 * p.x * yt;\n  bq = this.pn1 * p.y * this.cw * yt;\n  p.x = bm * this.cg + bq * this.sg;\n  p.y = bq * this.cg - bm * this.sg;\n\n  var rh = hypot(p.x, p.y);\n  if (Math.abs(rh) < EPSLN) {\n    r.x = 0;\n    r.y = p.y;\n  } else {\n    var cosz, sinz;\n    sinz = 1 - rh * rh * this.pfact;\n    sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);\n    cosz = Math.sqrt(1 - sinz * sinz);\n    switch (this.mode) {\n      case mode.OBLIQ:\n        r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);\n        p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;\n        p.x *= sinz * this.cosph0;\n        break;\n      case mode.EQUIT:\n        r.y = Math.asin(p.y * sinz / rh);\n        p.y = cosz * rh;\n        p.x *= sinz;\n        break;\n      case mode.N_POLE:\n        r.y = Math.asin(cosz);\n        p.y = -p.y;\n        break;\n      case mode.S_POLE:\n        r.y = -Math.asin(cosz);\n        break;\n    }\n    r.x = Math.atan2(p.x, p.y);\n  }\n\n  p.x = r.x + this.long0;\n  p.y = r.y;\n  return p;\n}\n\nexport var names = [\"Tilted_Perspective\", \"tpers\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import hypot from '../common/hypot';\n\nexport function init() {\n    this.flip_axis = (this.sweep === 'x' ? 1 : 0);\n    this.h = Number(this.h);\n    this.radius_g_1 = this.h / this.a;\n\n    if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {\n        throw new Error();\n    }\n\n    this.radius_g = 1.0 + this.radius_g_1;\n    this.C = this.radius_g * this.radius_g - 1.0;\n\n    if (this.es !== 0.0) {\n        var one_es = 1.0 - this.es;\n        var rone_es = 1 / one_es;\n\n        this.radius_p = Math.sqrt(one_es);\n        this.radius_p2 = one_es;\n        this.radius_p_inv2 = rone_es;\n\n        this.shape = 'ellipse'; // Use as a condition in the forward and inverse functions.\n    } else {\n        this.radius_p = 1.0;\n        this.radius_p2 = 1.0;\n        this.radius_p_inv2 = 1.0;\n\n        this.shape = 'sphere';  // Use as a condition in the forward and inverse functions.\n    }\n\n    if (!this.title) {\n        this.title = \"Geostationary Satellite View\";\n    }\n}\n\nfunction forward(p) {\n    var lon = p.x;\n    var lat = p.y;\n    var tmp, v_x, v_y, v_z;\n    lon = lon - this.long0;\n\n    if (this.shape === 'ellipse') {\n        lat = Math.atan(this.radius_p2 * Math.tan(lat));\n        var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));\n\n        v_x = r * Math.cos(lon) * Math.cos(lat);\n        v_y = r * Math.sin(lon) * Math.cos(lat);\n        v_z = r * Math.sin(lat);\n\n        if (((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2) < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        tmp = this.radius_g - v_x;\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    } else if (this.shape === 'sphere') {\n        tmp = Math.cos(lat);\n        v_x = Math.cos(lon) * tmp;\n        v_y = Math.sin(lon) * tmp;\n        v_z = Math.sin(lat);\n        tmp = this.radius_g - v_x;\n\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    }\n    p.x = p.x * this.a;\n    p.y = p.y * this.a;\n    return p;\n}\n\nfunction inverse(p) {\n    var v_x = -1.0;\n    var v_y = 0.0;\n    var v_z = 0.0;\n    var a, b, det, k;\n\n    p.x = p.x / this.a;\n    p.y = p.y / this.a;\n\n    if (this.shape === 'ellipse') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * hypot(1.0, v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * hypot(1.0, v_y);\n        }\n\n        var v_zp = v_z / this.radius_p;\n        a = v_y * v_y + v_zp * v_zp + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n        p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));\n    } else if (this.shape === 'sphere') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);\n        }\n\n        a = v_y * v_y + v_z * v_z + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n    }\n    p.x = p.x + this.long0;\n    return p;\n}\n\nexport var names = [\"Geostationary Satellite View\", \"Geostationary_Satellite\", \"geos\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names,\n};\n\n","import tmerc from './lib/projections/tmerc';\nimport etmerc from './lib/projections/etmerc';\nimport utm from './lib/projections/utm';\nimport sterea from './lib/projections/sterea';\nimport stere from './lib/projections/stere';\nimport somerc from './lib/projections/somerc';\nimport omerc from './lib/projections/omerc';\nimport lcc from './lib/projections/lcc';\nimport krovak from './lib/projections/krovak';\nimport cass from './lib/projections/cass';\nimport laea from './lib/projections/laea';\nimport aea from './lib/projections/aea';\nimport gnom from './lib/projections/gnom';\nimport cea from './lib/projections/cea';\nimport eqc from './lib/projections/eqc';\nimport poly from './lib/projections/poly';\nimport nzmg from './lib/projections/nzmg';\nimport mill from './lib/projections/mill';\nimport sinu from './lib/projections/sinu';\nimport moll from './lib/projections/moll';\nimport eqdc from './lib/projections/eqdc';\nimport vandg from './lib/projections/vandg';\nimport aeqd from './lib/projections/aeqd';\nimport ortho from './lib/projections/ortho';\nimport qsc from './lib/projections/qsc';\nimport robin from './lib/projections/robin';\nimport geocent from './lib/projections/geocent';\nimport tpers from './lib/projections/tpers';\nimport geos from './lib/projections/geos';\nexport default function(proj4){\n  proj4.Proj.projections.add(tmerc);\n  proj4.Proj.projections.add(etmerc);\n  proj4.Proj.projections.add(utm);\n  proj4.Proj.projections.add(sterea);\n  proj4.Proj.projections.add(stere);\n  proj4.Proj.projections.add(somerc);\n  proj4.Proj.projections.add(omerc);\n  proj4.Proj.projections.add(lcc);\n  proj4.Proj.projections.add(krovak);\n  proj4.Proj.projections.add(cass);\n  proj4.Proj.projections.add(laea);\n  proj4.Proj.projections.add(aea);\n  proj4.Proj.projections.add(gnom);\n  proj4.Proj.projections.add(cea);\n  proj4.Proj.projections.add(eqc);\n  proj4.Proj.projections.add(poly);\n  proj4.Proj.projections.add(nzmg);\n  proj4.Proj.projections.add(mill);\n  proj4.Proj.projections.add(sinu);\n  proj4.Proj.projections.add(moll);\n  proj4.Proj.projections.add(eqdc);\n  proj4.Proj.projections.add(vandg);\n  proj4.Proj.projections.add(aeqd);\n  proj4.Proj.projections.add(ortho);\n  proj4.Proj.projections.add(qsc);\n  proj4.Proj.projections.add(robin);\n  proj4.Proj.projections.add(geocent);\n  proj4.Proj.projections.add(tpers);\n  proj4.Proj.projections.add(geos);\n}","import proj4 from './core';\nimport Proj from \"./Proj\";\nimport Point from \"./Point\";\nimport common from \"./common/toPoint\";\nimport defs from \"./defs\";\nimport nadgrid from \"./nadgrid\";\nimport transform from \"./transform\";\nimport mgrs from \"mgrs\";\nimport includedProjections from \"../projs\";\n\nproj4.defaultDatum = 'WGS84'; //default datum\nproj4.Proj = Proj;\nproj4.WGS84 = new proj4.Proj('WGS84');\nproj4.Point = Point;\nproj4.toPoint = common;\nproj4.defs = defs;\nproj4.nadgrid = nadgrid;\nproj4.transform = transform;\nproj4.mgrs = mgrs;\nproj4.version = '__VERSION__';\nincludedProjections(proj4);\nexport default proj4;\n","/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexport var earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: earthRadius / 111325,\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input) {\n    return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n","import { isNumber, } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        isNumber(coordinates[0]) &&\n        isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n","import { getCoord, getGeom } from \"@turf/invariant\";\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nexport default function booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = getCoord(point);\n    var geom = getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","module.exports = {\"type\":\"FeatureCollection\",\"features\":[\n{\"type\":\"Feature\",\"id\":\"AFG\",\"properties\":{\"name\":\"Afghanistan\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[61.210817,35.650072],[62.230651,35.270664],[62.984662,35.404041],[63.193538,35.857166],[63.982896,36.007957],[64.546479,36.312073],[64.746105,37.111818],[65.588948,37.305217],[65.745631,37.661164],[66.217385,37.39379],[66.518607,37.362784],[67.075782,37.356144],[67.83,37.144994],[68.135562,37.023115],[68.859446,37.344336],[69.196273,37.151144],[69.518785,37.608997],[70.116578,37.588223],[70.270574,37.735165],[70.376304,38.138396],[70.806821,38.486282],[71.348131,38.258905],[71.239404,37.953265],[71.541918,37.905774],[71.448693,37.065645],[71.844638,36.738171],[72.193041,36.948288],[72.63689,37.047558],[73.260056,37.495257],[73.948696,37.421566],[74.980002,37.41999],[75.158028,37.133031],[74.575893,37.020841],[74.067552,36.836176],[72.920025,36.720007],[71.846292,36.509942],[71.262348,36.074388],[71.498768,35.650563],[71.613076,35.153203],[71.115019,34.733126],[71.156773,34.348911],[70.881803,33.988856],[69.930543,34.02012],[70.323594,33.358533],[69.687147,33.105499],[69.262522,32.501944],[69.317764,31.901412],[68.926677,31.620189],[68.556932,31.71331],[67.792689,31.58293],[67.683394,31.303154],[66.938891,31.304911],[66.381458,30.738899],[66.346473,29.887943],[65.046862,29.472181],[64.350419,29.560031],[64.148002,29.340819],[63.550261,29.468331],[62.549857,29.318572],[60.874248,29.829239],[61.781222,30.73585],[61.699314,31.379506],[60.941945,31.548075],[60.863655,32.18292],[60.536078,32.981269],[60.9637,33.528832],[60.52843,33.676446],[60.803193,34.404102],[61.210817,35.650072]]]}},\n{\"type\":\"Feature\",\"id\":\"AGO\",\"properties\":{\"name\":\"Angola\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[16.326528,-5.87747],[16.57318,-6.622645],[16.860191,-7.222298],[17.089996,-7.545689],[17.47297,-8.068551],[18.134222,-7.987678],[18.464176,-7.847014],[19.016752,-7.988246],[19.166613,-7.738184],[19.417502,-7.155429],[20.037723,-7.116361],[20.091622,-6.94309],[20.601823,-6.939318],[20.514748,-7.299606],[21.728111,-7.290872],[21.746456,-7.920085],[21.949131,-8.305901],[21.801801,-8.908707],[21.875182,-9.523708],[22.208753,-9.894796],[22.155268,-11.084801],[22.402798,-10.993075],[22.837345,-11.017622],[23.456791,-10.867863],[23.912215,-10.926826],[24.017894,-11.237298],[23.904154,-11.722282],[24.079905,-12.191297],[23.930922,-12.565848],[24.016137,-12.911046],[21.933886,-12.898437],[21.887843,-16.08031],[22.562478,-16.898451],[23.215048,-17.523116],[21.377176,-17.930636],[18.956187,-17.789095],[18.263309,-17.309951],[14.209707,-17.353101],[14.058501,-17.423381],[13.462362,-16.971212],[12.814081,-16.941343],[12.215461,-17.111668],[11.734199,-17.301889],[11.640096,-16.673142],[11.778537,-15.793816],[12.123581,-14.878316],[12.175619,-14.449144],[12.500095,-13.5477],[12.738479,-13.137906],[13.312914,-12.48363],[13.633721,-12.038645],[13.738728,-11.297863],[13.686379,-10.731076],[13.387328,-10.373578],[13.120988,-9.766897],[12.87537,-9.166934],[12.929061,-8.959091],[13.236433,-8.562629],[12.93304,-7.596539],[12.728298,-6.927122],[12.227347,-6.294448],[12.322432,-6.100092],[12.735171,-5.965682],[13.024869,-5.984389],[13.375597,-5.864241],[16.326528,-5.87747]]],[[[12.436688,-5.684304],[12.182337,-5.789931],[11.914963,-5.037987],[12.318608,-4.60623],[12.62076,-4.438023],[12.995517,-4.781103],[12.631612,-4.991271],[12.468004,-5.248362],[12.436688,-5.684304]]]]}},\n{\"type\":\"Feature\",\"id\":\"ALB\",\"properties\":{\"name\":\"Albania\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[20.590247,41.855404],[20.463175,41.515089],[20.605182,41.086226],[21.02004,40.842727],[20.99999,40.580004],[20.674997,40.435],[20.615,40.110007],[20.150016,39.624998],[19.98,39.694993],[19.960002,39.915006],[19.406082,40.250773],[19.319059,40.72723],[19.40355,41.409566],[19.540027,41.719986],[19.371769,41.877548],[19.304486,42.195745],[19.738051,42.688247],[19.801613,42.500093],[20.0707,42.58863],[20.283755,42.32026],[20.52295,42.21787],[20.590247,41.855404]]]}},\n{\"type\":\"Feature\",\"id\":\"ARE\",\"properties\":{\"name\":\"United Arab Emirates\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[51.579519,24.245497],[51.757441,24.294073],[51.794389,24.019826],[52.577081,24.177439],[53.404007,24.151317],[54.008001,24.121758],[54.693024,24.797892],[55.439025,25.439145],[56.070821,26.055464],[56.261042,25.714606],[56.396847,24.924732],[55.886233,24.920831],[55.804119,24.269604],[55.981214,24.130543],[55.528632,23.933604],[55.525841,23.524869],[55.234489,23.110993],[55.208341,22.70833],[55.006803,22.496948],[52.000733,23.001154],[51.617708,24.014219],[51.579519,24.245497]]]}},\n{\"type\":\"Feature\",\"id\":\"ARG\",\"properties\":{\"name\":\"Argentina\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-65.5,-55.2],[-66.45,-55.25],[-66.95992,-54.89681],[-67.56244,-54.87001],[-68.63335,-54.8695],[-68.63401,-52.63637],[-68.25,-53.1],[-67.75,-53.85],[-66.45,-54.45],[-65.05,-54.7],[-65.5,-55.2]]],[[[-64.964892,-22.075862],[-64.377021,-22.798091],[-63.986838,-21.993644],[-62.846468,-22.034985],[-62.685057,-22.249029],[-60.846565,-23.880713],[-60.028966,-24.032796],[-58.807128,-24.771459],[-57.777217,-25.16234],[-57.63366,-25.603657],[-58.618174,-27.123719],[-57.60976,-27.395899],[-56.486702,-27.548499],[-55.695846,-27.387837],[-54.788795,-26.621786],[-54.625291,-25.739255],[-54.13005,-25.547639],[-53.628349,-26.124865],[-53.648735,-26.923473],[-54.490725,-27.474757],[-55.162286,-27.881915],[-56.2909,-28.852761],[-57.625133,-30.216295],[-57.874937,-31.016556],[-58.14244,-32.044504],[-58.132648,-33.040567],[-58.349611,-33.263189],[-58.427074,-33.909454],[-58.495442,-34.43149],[-57.22583,-35.288027],[-57.362359,-35.97739],[-56.737487,-36.413126],[-56.788285,-36.901572],[-57.749157,-38.183871],[-59.231857,-38.72022],[-61.237445,-38.928425],[-62.335957,-38.827707],[-62.125763,-39.424105],[-62.330531,-40.172586],[-62.145994,-40.676897],[-62.745803,-41.028761],[-63.770495,-41.166789],[-64.73209,-40.802677],[-65.118035,-41.064315],[-64.978561,-42.058001],[-64.303408,-42.359016],[-63.755948,-42.043687],[-63.458059,-42.563138],[-64.378804,-42.873558],[-65.181804,-43.495381],[-65.328823,-44.501366],[-65.565269,-45.036786],[-66.509966,-45.039628],[-67.293794,-45.551896],[-67.580546,-46.301773],[-66.597066,-47.033925],[-65.641027,-47.236135],[-65.985088,-48.133289],[-67.166179,-48.697337],[-67.816088,-49.869669],[-68.728745,-50.264218],[-69.138539,-50.73251],[-68.815561,-51.771104],[-68.149995,-52.349983],[-68.571545,-52.299444],[-69.498362,-52.142761],[-71.914804,-52.009022],[-72.329404,-51.425956],[-72.309974,-50.67701],[-72.975747,-50.74145],[-73.328051,-50.378785],[-73.415436,-49.318436],[-72.648247,-48.878618],[-72.331161,-48.244238],[-72.447355,-47.738533],[-71.917258,-46.884838],[-71.552009,-45.560733],[-71.659316,-44.973689],[-71.222779,-44.784243],[-71.329801,-44.407522],[-71.793623,-44.207172],[-71.464056,-43.787611],[-71.915424,-43.408565],[-72.148898,-42.254888],[-71.746804,-42.051386],[-71.915734,-40.832339],[-71.680761,-39.808164],[-71.413517,-38.916022],[-70.814664,-38.552995],[-71.118625,-37.576827],[-71.121881,-36.658124],[-70.364769,-36.005089],[-70.388049,-35.169688],[-69.817309,-34.193571],[-69.814777,-33.273886],[-70.074399,-33.09121],[-70.535069,-31.36501],[-69.919008,-30.336339],[-70.01355,-29.367923],[-69.65613,-28.459141],[-69.001235,-27.521214],[-68.295542,-26.89934],[-68.5948,-26.506909],[-68.386001,-26.185016],[-68.417653,-24.518555],[-67.328443,-24.025303],[-66.985234,-22.986349],[-67.106674,-22.735925],[-66.273339,-21.83231],[-64.964892,-22.075862]]]]}},\n{\"type\":\"Feature\",\"id\":\"ARM\",\"properties\":{\"name\":\"Armenia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[43.582746,41.092143],[44.97248,41.248129],[45.179496,40.985354],[45.560351,40.81229],[45.359175,40.561504],[45.891907,40.218476],[45.610012,39.899994],[46.034534,39.628021],[46.483499,39.464155],[46.50572,38.770605],[46.143623,38.741201],[45.735379,39.319719],[45.739978,39.473999],[45.298145,39.471751],[45.001987,39.740004],[44.79399,39.713003],[44.400009,40.005],[43.656436,40.253564],[43.752658,40.740201],[43.582746,41.092143]]]}},\n{\"type\":\"Feature\",\"id\":\"ATA\",\"properties\":{\"name\":\"Antarctica\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-59.572095,-80.040179],[-59.865849,-80.549657],[-60.159656,-81.000327],[-62.255393,-80.863178],[-64.488125,-80.921934],[-65.741666,-80.588827],[-65.741666,-80.549657],[-66.290031,-80.255773],[-64.037688,-80.294944],[-61.883246,-80.39287],[-61.138976,-79.981371],[-60.610119,-79.628679],[-59.572095,-80.040179]]],[[[-159.208184,-79.497059],[-161.127601,-79.634209],[-162.439847,-79.281465],[-163.027408,-78.928774],[-163.066604,-78.869966],[-163.712896,-78.595667],[-163.105801,-78.223338],[-161.245113,-78.380176],[-160.246208,-78.693645],[-159.482405,-79.046338],[-159.208184,-79.497059]]],[[[-45.154758,-78.04707],[-43.920828,-78.478103],[-43.48995,-79.08556],[-43.372438,-79.516645],[-43.333267,-80.026123],[-44.880537,-80.339644],[-46.506174,-80.594357],[-48.386421,-80.829485],[-50.482107,-81.025442],[-52.851988,-80.966685],[-54.164259,-80.633528],[-53.987991,-80.222028],[-51.853134,-79.94773],[-50.991326,-79.614623],[-50.364595,-79.183487],[-49.914131,-78.811209],[-49.306959,-78.458569],[-48.660616,-78.047018],[-48.660616,-78.047019],[-48.151396,-78.04707],[-46.662857,-77.831476],[-45.154758,-78.04707]]],[[[-121.211511,-73.50099],[-119.918851,-73.657725],[-118.724143,-73.481353],[-119.292119,-73.834097],[-120.232217,-74.08881],[-121.62283,-74.010468],[-122.621735,-73.657778],[-122.621735,-73.657777],[-122.406245,-73.324619],[-121.211511,-73.50099]]],[[[-125.559566,-73.481353],[-124.031882,-73.873268],[-124.619469,-73.834097],[-125.912181,-73.736118],[-127.28313,-73.461769],[-127.28313,-73.461768],[-126.558472,-73.246226],[-125.559566,-73.481353]]],[[[-98.98155,-71.933334],[-97.884743,-72.070535],[-96.787937,-71.952971],[-96.20035,-72.521205],[-96.983765,-72.442864],[-98.198083,-72.482035],[-99.432013,-72.442864],[-100.783455,-72.50162],[-101.801868,-72.305663],[-102.330725,-71.894164],[-101.703967,-71.717792],[-100.430919,-71.854993],[-98.98155,-71.933334]]],[[[-68.451346,-70.955823],[-68.333834,-71.406493],[-68.510128,-71.798407],[-68.784297,-72.170736],[-69.959471,-72.307885],[-71.075889,-72.503842],[-72.388134,-72.484257],[-71.8985,-72.092343],[-73.073622,-72.229492],[-74.19004,-72.366693],[-74.953895,-72.072757],[-75.012625,-71.661258],[-73.915819,-71.269345],[-73.915819,-71.269344],[-73.230331,-71.15178],[-72.074717,-71.190951],[-71.780962,-70.681473],[-71.72218,-70.309196],[-71.741791,-69.505782],[-71.173815,-69.035475],[-70.253252,-68.87874],[-69.724447,-69.251017],[-69.489422,-69.623346],[-69.058518,-70.074016],[-68.725541,-70.505153],[-68.451346,-70.955823]]],[[[-58.614143,-64.152467],[-59.045073,-64.36801],[-59.789342,-64.211223],[-60.611928,-64.309202],[-61.297416,-64.54433],[-62.0221,-64.799094],[-62.51176,-65.09303],[-62.648858,-65.484942],[-62.590128,-65.857219],[-62.120079,-66.190326],[-62.805567,-66.425505],[-63.74569,-66.503847],[-64.294106,-66.837004],[-64.881693,-67.150474],[-65.508425,-67.58161],[-65.665082,-67.953887],[-65.312545,-68.365335],[-64.783715,-68.678908],[-63.961103,-68.913984],[-63.1973,-69.227556],[-62.785955,-69.619419],[-62.570516,-69.991747],[-62.276736,-70.383661],[-61.806661,-70.716768],[-61.512906,-71.089045],[-61.375809,-72.010074],[-61.081977,-72.382351],[-61.003661,-72.774265],[-60.690269,-73.166179],[-60.827367,-73.695242],[-61.375809,-74.106742],[-61.96337,-74.439848],[-63.295201,-74.576997],[-63.74569,-74.92974],[-64.352836,-75.262847],[-65.860987,-75.635124],[-67.192818,-75.79191],[-68.446282,-76.007452],[-69.797724,-76.222995],[-70.600724,-76.634494],[-72.206776,-76.673665],[-73.969536,-76.634494],[-75.555977,-76.712887],[-77.24037,-76.712887],[-76.926979,-77.104802],[-75.399294,-77.28107],[-74.282876,-77.55542],[-73.656119,-77.908112],[-74.772536,-78.221633],[-76.4961,-78.123654],[-77.925858,-78.378419],[-77.984666,-78.789918],[-78.023785,-79.181833],[-76.848637,-79.514939],[-76.633224,-79.887216],[-75.360097,-80.259545],[-73.244852,-80.416331],[-71.442946,-80.69063],[-70.013163,-81.004151],[-68.191646,-81.317672],[-65.704279,-81.474458],[-63.25603,-81.748757],[-61.552026,-82.042692],[-59.691416,-82.37585],[-58.712121,-82.846106],[-58.222487,-83.218434],[-57.008117,-82.865691],[-55.362894,-82.571755],[-53.619771,-82.258235],[-51.543644,-82.003521],[-49.76135,-81.729171],[-47.273931,-81.709586],[-44.825708,-81.846735],[-42.808363,-82.081915],[-42.16202,-81.65083],[-40.771433,-81.356894],[-38.244818,-81.337309],[-36.26667,-81.121715],[-34.386397,-80.906172],[-32.310296,-80.769023],[-30.097098,-80.592651],[-28.549802,-80.337938],[-29.254901,-79.985195],[-29.685805,-79.632503],[-29.685805,-79.260226],[-31.624808,-79.299397],[-33.681324,-79.456132],[-35.639912,-79.456132],[-35.914107,-79.083855],[-35.77701,-78.339248],[-35.326546,-78.123654],[-33.896763,-77.888526],[-32.212369,-77.65345],[-30.998051,-77.359515],[-29.783732,-77.065579],[-28.882779,-76.673665],[-27.511752,-76.497345],[-26.160336,-76.360144],[-25.474822,-76.281803],[-23.927552,-76.24258],[-22.458598,-76.105431],[-21.224694,-75.909474],[-20.010375,-75.674346],[-18.913543,-75.439218],[-17.522982,-75.125698],[-16.641589,-74.79254],[-15.701491,-74.498604],[-15.40771,-74.106742],[-16.46532,-73.871614],[-16.112784,-73.460114],[-15.446855,-73.146542],[-14.408805,-72.950585],[-13.311973,-72.715457],[-12.293508,-72.401936],[-11.510067,-72.010074],[-11.020433,-71.539767],[-10.295774,-71.265416],[-9.101015,-71.324224],[-8.611381,-71.65733],[-7.416622,-71.696501],[-7.377451,-71.324224],[-6.868232,-70.93231],[-5.790985,-71.030289],[-5.536375,-71.402617],[-4.341667,-71.461373],[-3.048981,-71.285053],[-1.795492,-71.167438],[-0.659489,-71.226246],[-0.228637,-71.637745],[0.868195,-71.304639],[1.886686,-71.128267],[3.022638,-70.991118],[4.139055,-70.853917],[5.157546,-70.618789],[6.273912,-70.462055],[7.13572,-70.246512],[7.742866,-69.893769],[8.48711,-70.148534],[9.525135,-70.011333],[10.249845,-70.48164],[10.817821,-70.834332],[11.953824,-70.638375],[12.404287,-70.246512],[13.422778,-69.972162],[14.734998,-70.030918],[15.126757,-70.403247],[15.949342,-70.030918],[17.026589,-69.913354],[18.201711,-69.874183],[19.259373,-69.893769],[20.375739,-70.011333],[21.452985,-70.07014],[21.923034,-70.403247],[22.569403,-70.697182],[23.666184,-70.520811],[24.841357,-70.48164],[25.977309,-70.48164],[27.093726,-70.462055],[28.09258,-70.324854],[29.150242,-70.20729],[30.031583,-69.93294],[30.971733,-69.75662],[31.990172,-69.658641],[32.754053,-69.384291],[33.302443,-68.835642],[33.870419,-68.502588],[34.908495,-68.659271],[35.300202,-69.012014],[36.16201,-69.247142],[37.200035,-69.168748],[37.905108,-69.52144],[38.649404,-69.776205],[39.667894,-69.541077],[40.020431,-69.109941],[40.921358,-68.933621],[41.959434,-68.600514],[42.938702,-68.463313],[44.113876,-68.267408],[44.897291,-68.051866],[45.719928,-67.816738],[46.503343,-67.601196],[47.44344,-67.718759],[48.344419,-67.366068],[48.990736,-67.091718],[49.930885,-67.111303],[50.753471,-66.876175],[50.949325,-66.523484],[51.791547,-66.249133],[52.614133,-66.053176],[53.613038,-65.89639],[54.53355,-65.818049],[55.414943,-65.876805],[56.355041,-65.974783],[57.158093,-66.249133],[57.255968,-66.680218],[58.137361,-67.013324],[58.744508,-67.287675],[59.939318,-67.405239],[60.605221,-67.679589],[61.427806,-67.953887],[62.387489,-68.012695],[63.19049,-67.816738],[64.052349,-67.405239],[64.992447,-67.620729],[65.971715,-67.738345],[66.911864,-67.855909],[67.891133,-67.934302],[68.890038,-67.934302],[69.712624,-68.972791],[69.673453,-69.227556],[69.555941,-69.678226],[68.596258,-69.93294],[67.81274,-70.305268],[67.949889,-70.697182],[69.066307,-70.677545],[68.929157,-71.069459],[68.419989,-71.441788],[67.949889,-71.853287],[68.71377,-72.166808],[69.869307,-72.264787],[71.024895,-72.088415],[71.573285,-71.696501],[71.906288,-71.324224],[72.454627,-71.010703],[73.08141,-70.716768],[73.33602,-70.364024],[73.864877,-69.874183],[74.491557,-69.776205],[75.62756,-69.737034],[76.626465,-69.619419],[77.644904,-69.462684],[78.134539,-69.07077],[78.428371,-68.698441],[79.113859,-68.326216],[80.093127,-68.071503],[80.93535,-67.875546],[81.483792,-67.542388],[82.051767,-67.366068],[82.776426,-67.209282],[83.775331,-67.30726],[84.676206,-67.209282],[85.655527,-67.091718],[86.752359,-67.150474],[87.477017,-66.876175],[87.986289,-66.209911],[88.358411,-66.484261],[88.828408,-66.954568],[89.67063,-67.150474],[90.630365,-67.228867],[91.5901,-67.111303],[92.608539,-67.189696],[93.548637,-67.209282],[94.17542,-67.111303],[95.017591,-67.170111],[95.781472,-67.385653],[96.682399,-67.248504],[97.759646,-67.248504],[98.68021,-67.111303],[99.718182,-67.248504],[100.384188,-66.915346],[100.893356,-66.58224],[101.578896,-66.30789],[102.832411,-65.563284],[103.478676,-65.700485],[104.242557,-65.974783],[104.90846,-66.327527],[106.181561,-66.934931],[107.160881,-66.954568],[108.081393,-66.954568],[109.15864,-66.837004],[110.235835,-66.699804],[111.058472,-66.425505],[111.74396,-66.13157],[112.860378,-66.092347],[113.604673,-65.876805],[114.388088,-66.072762],[114.897308,-66.386283],[115.602381,-66.699804],[116.699161,-66.660633],[117.384701,-66.915346],[118.57946,-67.170111],[119.832924,-67.268089],[120.871,-67.189696],[121.654415,-66.876175],[122.320369,-66.562654],[123.221296,-66.484261],[124.122274,-66.621462],[125.160247,-66.719389],[126.100396,-66.562654],[127.001427,-66.562654],[127.882768,-66.660633],[128.80328,-66.758611],[129.704259,-66.58224],[130.781454,-66.425505],[131.799945,-66.386283],[132.935896,-66.386283],[133.85646,-66.288304],[134.757387,-66.209963],[135.031582,-65.72007],[135.070753,-65.308571],[135.697485,-65.582869],[135.873805,-66.033591],[136.206705,-66.44509],[136.618049,-66.778197],[137.460271,-66.954568],[138.596223,-66.895761],[139.908442,-66.876175],[140.809421,-66.817367],[142.121692,-66.817367],[143.061842,-66.797782],[144.374061,-66.837004],[145.490427,-66.915346],[146.195552,-67.228867],[145.999699,-67.601196],[146.646067,-67.895131],[147.723263,-68.130259],[148.839629,-68.385024],[150.132314,-68.561292],[151.483705,-68.71813],[152.502247,-68.874813],[153.638199,-68.894502],[154.284567,-68.561292],[155.165857,-68.835642],[155.92979,-69.149215],[156.811132,-69.384291],[158.025528,-69.482269],[159.181013,-69.599833],[159.670699,-69.991747],[160.80665,-70.226875],[161.570479,-70.579618],[162.686897,-70.736353],[163.842434,-70.716768],[164.919681,-70.775524],[166.11444,-70.755938],[167.309095,-70.834332],[168.425616,-70.971481],[169.463589,-71.20666],[170.501665,-71.402617],[171.20679,-71.696501],[171.089227,-72.088415],[170.560422,-72.441159],[170.109958,-72.891829],[169.75737,-73.24452],[169.287321,-73.65602],[167.975101,-73.812806],[167.387489,-74.165498],[166.094803,-74.38104],[165.644391,-74.772954],[164.958851,-75.145283],[164.234193,-75.458804],[163.822797,-75.870303],[163.568239,-76.24258],[163.47026,-76.693302],[163.489897,-77.065579],[164.057873,-77.457442],[164.273363,-77.82977],[164.743464,-78.182514],[166.604126,-78.319611],[166.995781,-78.750748],[165.193876,-78.907483],[163.666217,-79.123025],[161.766385,-79.162248],[160.924162,-79.730482],[160.747894,-80.200737],[160.316964,-80.573066],[159.788211,-80.945395],[161.120016,-81.278501],[161.629287,-81.690001],[162.490992,-82.062278],[163.705336,-82.395435],[165.095949,-82.708956],[166.604126,-83.022477],[168.895665,-83.335998],[169.404782,-83.825891],[172.283934,-84.041433],[172.477049,-84.117914],[173.224083,-84.41371],[175.985672,-84.158997],[178.277212,-84.472518],[180,-84.71338],[-179.942499,-84.721443],[-179.058677,-84.139412],[-177.256772,-84.452933],[-177.140807,-84.417941],[-176.084673,-84.099259],[-175.947235,-84.110449],[-175.829882,-84.117914],[-174.382503,-84.534323],[-173.116559,-84.117914],[-172.889106,-84.061019],[-169.951223,-83.884647],[-168.999989,-84.117914],[-168.530199,-84.23739],[-167.022099,-84.570497],[-164.182144,-84.82521],[-161.929775,-85.138731],[-158.07138,-85.37391],[-155.192253,-85.09956],[-150.942099,-85.295517],[-148.533073,-85.609038],[-145.888918,-85.315102],[-143.107718,-85.040752],[-142.892279,-84.570497],[-146.829068,-84.531274],[-150.060732,-84.296146],[-150.902928,-83.904232],[-153.586201,-83.68869],[-153.409907,-83.23802],[-153.037759,-82.82652],[-152.665637,-82.454192],[-152.861517,-82.042692],[-154.526299,-81.768394],[-155.29018,-81.41565],[-156.83745,-81.102129],[-154.408787,-81.160937],[-152.097662,-81.004151],[-150.648293,-81.337309],[-148.865998,-81.043373],[-147.22075,-80.671045],[-146.417749,-80.337938],[-146.770286,-79.926439],[-148.062947,-79.652089],[-149.531901,-79.358205],[-151.588416,-79.299397],[-153.390322,-79.162248],[-155.329376,-79.064269],[-155.975668,-78.69194],[-157.268302,-78.378419],[-158.051768,-78.025676],[-158.365134,-76.889207],[-157.875474,-76.987238],[-156.974573,-77.300759],[-155.329376,-77.202728],[-153.742832,-77.065579],[-152.920247,-77.496664],[-151.33378,-77.398737],[-150.00195,-77.183143],[-148.748486,-76.908845],[-147.612483,-76.575738],[-146.104409,-76.47776],[-146.143528,-76.105431],[-146.496091,-75.733154],[-146.20231,-75.380411],[-144.909624,-75.204039],[-144.322037,-75.537197],[-142.794353,-75.34124],[-141.638764,-75.086475],[-140.209007,-75.06689],[-138.85759,-74.968911],[-137.5062,-74.733783],[-136.428901,-74.518241],[-135.214583,-74.302699],[-134.431194,-74.361455],[-133.745654,-74.439848],[-132.257168,-74.302699],[-130.925311,-74.479019],[-129.554284,-74.459433],[-128.242038,-74.322284],[-126.890622,-74.420263],[-125.402082,-74.518241],[-124.011496,-74.479019],[-122.562152,-74.498604],[-121.073613,-74.518241],[-119.70256,-74.479019],[-118.684145,-74.185083],[-117.469801,-74.028348],[-116.216312,-74.243891],[-115.021552,-74.067519],[-113.944331,-73.714828],[-113.297988,-74.028348],[-112.945452,-74.38104],[-112.299083,-74.714198],[-111.261059,-74.420263],[-110.066325,-74.79254],[-108.714909,-74.910103],[-107.559346,-75.184454],[-106.149148,-75.125698],[-104.876074,-74.949326],[-103.367949,-74.988497],[-102.016507,-75.125698],[-100.645531,-75.302018],[-100.1167,-74.870933],[-100.763043,-74.537826],[-101.252703,-74.185083],[-102.545337,-74.106742],[-103.113313,-73.734413],[-103.328752,-73.362084],[-103.681289,-72.61753],[-102.917485,-72.754679],[-101.60524,-72.813436],[-100.312528,-72.754679],[-99.13738,-72.911414],[-98.118889,-73.20535],[-97.688037,-73.558041],[-96.336595,-73.616849],[-95.043961,-73.4797],[-93.672907,-73.283743],[-92.439003,-73.166179],[-91.420564,-73.401307],[-90.088733,-73.322914],[-89.226951,-72.558722],[-88.423951,-73.009393],[-87.268337,-73.185764],[-86.014822,-73.087786],[-85.192236,-73.4797],[-83.879991,-73.518871],[-82.665646,-73.636434],[-81.470913,-73.851977],[-80.687447,-73.4797],[-80.295791,-73.126956],[-79.296886,-73.518871],[-77.925858,-73.420892],[-76.907367,-73.636434],[-76.221879,-73.969541],[-74.890049,-73.871614],[-73.852024,-73.65602],[-72.833533,-73.401307],[-71.619215,-73.264157],[-70.209042,-73.146542],[-68.935916,-73.009393],[-67.956622,-72.79385],[-67.369061,-72.480329],[-67.134036,-72.049244],[-67.251548,-71.637745],[-67.56494,-71.245831],[-67.917477,-70.853917],[-68.230843,-70.462055],[-68.485452,-70.109311],[-68.544209,-69.717397],[-68.446282,-69.325535],[-67.976233,-68.953206],[-67.5845,-68.541707],[-67.427843,-68.149844],[-67.62367,-67.718759],[-67.741183,-67.326845],[-67.251548,-66.876175],[-66.703184,-66.58224],[-66.056815,-66.209963],[-65.371327,-65.89639],[-64.568276,-65.602506],[-64.176542,-65.171423],[-63.628152,-64.897073],[-63.001394,-64.642308],[-62.041686,-64.583552],[-61.414928,-64.270031],[-60.709855,-64.074074],[-59.887269,-63.95651],[-59.162585,-63.701745],[-58.594557,-63.388224],[-57.811143,-63.27066],[-57.223582,-63.525425],[-57.59573,-63.858532],[-58.614143,-64.152467]]]]}},\n{\"type\":\"Feature\",\"id\":\"ATF\",\"properties\":{\"name\":\"French Southern and Antarctic Lands\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[68.935,-48.625],[69.58,-48.94],[70.525,-49.065],[70.56,-49.255],[70.28,-49.71],[68.745,-49.775],[68.72,-49.2425],[68.8675,-48.83],[68.935,-48.625]]]}},\n{\"type\":\"Feature\",\"id\":\"AUS\",\"properties\":{\"name\":\"Australia\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[145.397978,-40.792549],[146.364121,-41.137695],[146.908584,-41.000546],[147.689259,-40.808258],[148.289068,-40.875438],[148.359865,-42.062445],[148.017301,-42.407024],[147.914052,-43.211522],[147.564564,-42.937689],[146.870343,-43.634597],[146.663327,-43.580854],[146.048378,-43.549745],[145.43193,-42.693776],[145.29509,-42.03361],[144.718071,-41.162552],[144.743755,-40.703975],[145.397978,-40.792549]]],[[[143.561811,-13.763656],[143.922099,-14.548311],[144.563714,-14.171176],[144.894908,-14.594458],[145.374724,-14.984976],[145.271991,-15.428205],[145.48526,-16.285672],[145.637033,-16.784918],[145.888904,-16.906926],[146.160309,-17.761655],[146.063674,-18.280073],[146.387478,-18.958274],[147.471082,-19.480723],[148.177602,-19.955939],[148.848414,-20.39121],[148.717465,-20.633469],[149.28942,-21.260511],[149.678337,-22.342512],[150.077382,-22.122784],[150.482939,-22.556142],[150.727265,-22.402405],[150.899554,-23.462237],[151.609175,-24.076256],[152.07354,-24.457887],[152.855197,-25.267501],[153.136162,-26.071173],[153.161949,-26.641319],[153.092909,-27.2603],[153.569469,-28.110067],[153.512108,-28.995077],[153.339095,-29.458202],[153.069241,-30.35024],[153.089602,-30.923642],[152.891578,-31.640446],[152.450002,-32.550003],[151.709117,-33.041342],[151.343972,-33.816023],[151.010555,-34.31036],[150.714139,-35.17346],[150.32822,-35.671879],[150.075212,-36.420206],[149.946124,-37.109052],[149.997284,-37.425261],[149.423882,-37.772681],[148.304622,-37.809061],[147.381733,-38.219217],[146.922123,-38.606532],[146.317922,-39.035757],[145.489652,-38.593768],[144.876976,-38.417448],[145.032212,-37.896188],[144.485682,-38.085324],[143.609974,-38.809465],[142.745427,-38.538268],[142.17833,-38.380034],[141.606582,-38.308514],[140.638579,-38.019333],[139.992158,-37.402936],[139.806588,-36.643603],[139.574148,-36.138362],[139.082808,-35.732754],[138.120748,-35.612296],[138.449462,-35.127261],[138.207564,-34.384723],[137.71917,-35.076825],[136.829406,-35.260535],[137.352371,-34.707339],[137.503886,-34.130268],[137.890116,-33.640479],[137.810328,-32.900007],[136.996837,-33.752771],[136.372069,-34.094766],[135.989043,-34.890118],[135.208213,-34.47867],[135.239218,-33.947953],[134.613417,-33.222778],[134.085904,-32.848072],[134.273903,-32.617234],[132.990777,-32.011224],[132.288081,-31.982647],[131.326331,-31.495803],[129.535794,-31.590423],[128.240938,-31.948489],[127.102867,-32.282267],[126.148714,-32.215966],[125.088623,-32.728751],[124.221648,-32.959487],[124.028947,-33.483847],[123.659667,-33.890179],[122.811036,-33.914467],[122.183064,-34.003402],[121.299191,-33.821036],[120.580268,-33.930177],[119.893695,-33.976065],[119.298899,-34.509366],[119.007341,-34.464149],[118.505718,-34.746819],[118.024972,-35.064733],[117.295507,-35.025459],[116.625109,-35.025097],[115.564347,-34.386428],[115.026809,-34.196517],[115.048616,-33.623425],[115.545123,-33.487258],[115.714674,-33.259572],[115.679379,-32.900369],[115.801645,-32.205062],[115.689611,-31.612437],[115.160909,-30.601594],[114.997043,-30.030725],[115.040038,-29.461095],[114.641974,-28.810231],[114.616498,-28.516399],[114.173579,-28.118077],[114.048884,-27.334765],[113.477498,-26.543134],[113.338953,-26.116545],[113.778358,-26.549025],[113.440962,-25.621278],[113.936901,-25.911235],[114.232852,-26.298446],[114.216161,-25.786281],[113.721255,-24.998939],[113.625344,-24.683971],[113.393523,-24.384764],[113.502044,-23.80635],[113.706993,-23.560215],[113.843418,-23.059987],[113.736552,-22.475475],[114.149756,-21.755881],[114.225307,-22.517488],[114.647762,-21.82952],[115.460167,-21.495173],[115.947373,-21.068688],[116.711615,-20.701682],[117.166316,-20.623599],[117.441545,-20.746899],[118.229559,-20.374208],[118.836085,-20.263311],[118.987807,-20.044203],[119.252494,-19.952942],[119.805225,-19.976506],[120.85622,-19.683708],[121.399856,-19.239756],[121.655138,-18.705318],[122.241665,-18.197649],[122.286624,-17.798603],[122.312772,-17.254967],[123.012574,-16.4052],[123.433789,-17.268558],[123.859345,-17.069035],[123.503242,-16.596506],[123.817073,-16.111316],[124.258287,-16.327944],[124.379726,-15.56706],[124.926153,-15.0751],[125.167275,-14.680396],[125.670087,-14.51007],[125.685796,-14.230656],[126.125149,-14.347341],[126.142823,-14.095987],[126.582589,-13.952791],[127.065867,-13.817968],[127.804633,-14.276906],[128.35969,-14.86917],[128.985543,-14.875991],[129.621473,-14.969784],[129.4096,-14.42067],[129.888641,-13.618703],[130.339466,-13.357376],[130.183506,-13.10752],[130.617795,-12.536392],[131.223495,-12.183649],[131.735091,-12.302453],[132.575298,-12.114041],[132.557212,-11.603012],[131.824698,-11.273782],[132.357224,-11.128519],[133.019561,-11.376411],[133.550846,-11.786515],[134.393068,-12.042365],[134.678632,-11.941183],[135.298491,-12.248606],[135.882693,-11.962267],[136.258381,-12.049342],[136.492475,-11.857209],[136.95162,-12.351959],[136.685125,-12.887223],[136.305407,-13.29123],[135.961758,-13.324509],[136.077617,-13.724278],[135.783836,-14.223989],[135.428664,-14.715432],[135.500184,-14.997741],[136.295175,-15.550265],[137.06536,-15.870762],[137.580471,-16.215082],[138.303217,-16.807604],[138.585164,-16.806622],[139.108543,-17.062679],[139.260575,-17.371601],[140.215245,-17.710805],[140.875463,-17.369069],[141.07111,-16.832047],[141.274095,-16.38887],[141.398222,-15.840532],[141.702183,-15.044921],[141.56338,-14.561333],[141.63552,-14.270395],[141.519869,-13.698078],[141.65092,-12.944688],[141.842691,-12.741548],[141.68699,-12.407614],[141.928629,-11.877466],[142.118488,-11.328042],[142.143706,-11.042737],[142.51526,-10.668186],[142.79731,-11.157355],[142.866763,-11.784707],[143.115947,-11.90563],[143.158632,-12.325656],[143.522124,-12.834358],[143.597158,-13.400422],[143.561811,-13.763656]]]]}},\n{\"type\":\"Feature\",\"id\":\"AUT\",\"properties\":{\"name\":\"Austria\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[16.979667,48.123497],[16.903754,47.714866],[16.340584,47.712902],[16.534268,47.496171],[16.202298,46.852386],[16.011664,46.683611],[15.137092,46.658703],[14.632472,46.431817],[13.806475,46.509306],[12.376485,46.767559],[12.153088,47.115393],[11.164828,46.941579],[11.048556,46.751359],[10.442701,46.893546],[9.932448,46.920728],[9.47997,47.10281],[9.632932,47.347601],[9.594226,47.525058],[9.896068,47.580197],[10.402084,47.302488],[10.544504,47.566399],[11.426414,47.523766],[12.141357,47.703083],[12.62076,47.672388],[12.932627,47.467646],[13.025851,47.637584],[12.884103,48.289146],[13.243357,48.416115],[13.595946,48.877172],[14.338898,48.555305],[14.901447,48.964402],[15.253416,49.039074],[16.029647,48.733899],[16.499283,48.785808],[16.960288,48.596982],[16.879983,48.470013],[16.979667,48.123497]]]}},\n{\"type\":\"Feature\",\"id\":\"AZE\",\"properties\":{\"name\":\"Azerbaijan\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[45.001987,39.740004],[45.298145,39.471751],[45.739978,39.473999],[45.735379,39.319719],[46.143623,38.741201],[45.457722,38.874139],[44.952688,39.335765],[44.79399,39.713003],[45.001987,39.740004]]],[[[47.373315,41.219732],[47.815666,41.151416],[47.987283,41.405819],[48.584353,41.80887],[49.110264,41.282287],[49.618915,40.572924],[50.08483,40.526157],[50.392821,40.256561],[49.569202,40.176101],[49.395259,39.399482],[49.223228,39.049219],[48.856532,38.815486],[48.883249,38.320245],[48.634375,38.270378],[48.010744,38.794015],[48.355529,39.288765],[48.060095,39.582235],[47.685079,39.508364],[46.50572,38.770605],[46.483499,39.464155],[46.034534,39.628021],[45.610012,39.899994],[45.891907,40.218476],[45.359175,40.561504],[45.560351,40.81229],[45.179496,40.985354],[44.97248,41.248129],[45.217426,41.411452],[45.962601,41.123873],[46.501637,41.064445],[46.637908,41.181673],[46.145432,41.722802],[46.404951,41.860675],[46.686071,41.827137],[47.373315,41.219732]]]]}},\n{\"type\":\"Feature\",\"id\":\"BDI\",\"properties\":{\"name\":\"Burundi\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[29.339998,-4.499983],[29.276384,-3.293907],[29.024926,-2.839258],[29.632176,-2.917858],[29.938359,-2.348487],[30.469696,-2.413858],[30.527677,-2.807632],[30.743013,-3.034285],[30.752263,-3.35933],[30.50556,-3.568567],[30.116333,-4.090138],[29.753512,-4.452389],[29.339998,-4.499983]]]}},\n{\"type\":\"Feature\",\"id\":\"BEL\",\"properties\":{\"name\":\"Belgium\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[3.314971,51.345781],[4.047071,51.267259],[4.973991,51.475024],[5.606976,51.037298],[6.156658,50.803721],[6.043073,50.128052],[5.782417,50.090328],[5.674052,49.529484],[4.799222,49.985373],[4.286023,49.907497],[3.588184,50.378992],[3.123252,50.780363],[2.658422,50.796848],[2.513573,51.148506],[3.314971,51.345781]]]}},\n{\"type\":\"Feature\",\"id\":\"BEN\",\"properties\":{\"name\":\"Benin\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[2.691702,6.258817],[1.865241,6.142158],[1.618951,6.832038],[1.664478,9.12859],[1.463043,9.334624],[1.425061,9.825395],[1.077795,10.175607],[0.772336,10.470808],[0.899563,10.997339],[1.24347,11.110511],[1.447178,11.547719],[1.935986,11.64115],[2.154474,11.94015],[2.490164,12.233052],[2.848643,12.235636],[3.61118,11.660167],[3.572216,11.327939],[3.797112,10.734746],[3.60007,10.332186],[3.705438,10.06321],[3.220352,9.444153],[2.912308,9.137608],[2.723793,8.506845],[2.749063,7.870734],[2.691702,6.258817]]]}},\n{\"type\":\"Feature\",\"id\":\"BFA\",\"properties\":{\"name\":\"Burkina Faso\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-2.827496,9.642461],[-3.511899,9.900326],[-3.980449,9.862344],[-4.330247,9.610835],[-4.779884,9.821985],[-4.954653,10.152714],[-5.404342,10.370737],[-5.470565,10.95127],[-5.197843,11.375146],[-5.220942,11.713859],[-4.427166,12.542646],[-4.280405,13.228444],[-4.006391,13.472485],[-3.522803,13.337662],[-3.103707,13.541267],[-2.967694,13.79815],[-2.191825,14.246418],[-2.001035,14.559008],[-1.066363,14.973815],[-0.515854,15.116158],[-0.266257,14.924309],[0.374892,14.928908],[0.295646,14.444235],[0.429928,13.988733],[0.993046,13.33575],[1.024103,12.851826],[2.177108,12.625018],[2.154474,11.94015],[1.935986,11.64115],[1.447178,11.547719],[1.24347,11.110511],[0.899563,10.997339],[0.023803,11.018682],[-0.438702,11.098341],[-0.761576,10.93693],[-1.203358,11.009819],[-2.940409,10.96269],[-2.963896,10.395335],[-2.827496,9.642461]]]}},\n{\"type\":\"Feature\",\"id\":\"BGD\",\"properties\":{\"name\":\"Bangladesh\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[92.672721,22.041239],[92.652257,21.324048],[92.303234,21.475485],[92.368554,20.670883],[92.082886,21.192195],[92.025215,21.70157],[91.834891,22.182936],[91.417087,22.765019],[90.496006,22.805017],[90.586957,22.392794],[90.272971,21.836368],[89.847467,22.039146],[89.70205,21.857116],[89.418863,21.966179],[89.031961,22.055708],[88.876312,22.879146],[88.52977,23.631142],[88.69994,24.233715],[88.084422,24.501657],[88.306373,24.866079],[88.931554,25.238692],[88.209789,25.768066],[88.563049,26.446526],[89.355094,26.014407],[89.832481,25.965082],[89.920693,25.26975],[90.872211,25.132601],[91.799596,25.147432],[92.376202,24.976693],[91.915093,24.130414],[91.46773,24.072639],[91.158963,23.503527],[91.706475,22.985264],[91.869928,23.624346],[92.146035,23.627499],[92.672721,22.041239]]]}},\n{\"type\":\"Feature\",\"id\":\"BGR\",\"properties\":{\"name\":\"Bulgaria\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[22.65715,44.234923],[22.944832,43.823785],[23.332302,43.897011],[24.100679,43.741051],[25.569272,43.688445],[26.065159,43.943494],[27.2424,44.175986],[27.970107,43.812468],[28.558081,43.707462],[28.039095,43.293172],[27.673898,42.577892],[27.99672,42.007359],[27.135739,42.141485],[26.117042,41.826905],[26.106138,41.328899],[25.197201,41.234486],[24.492645,41.583896],[23.692074,41.309081],[22.952377,41.337994],[22.881374,41.999297],[22.380526,42.32026],[22.545012,42.461362],[22.436595,42.580321],[22.604801,42.898519],[22.986019,43.211161],[22.500157,43.642814],[22.410446,44.008063],[22.65715,44.234923]]]}},\n{\"type\":\"Feature\",\"id\":\"BHS\",\"properties\":{\"name\":\"The Bahamas\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-77.53466,23.75975],[-77.78,23.71],[-78.03405,24.28615],[-78.40848,24.57564],[-78.19087,25.2103],[-77.89,25.17],[-77.54,24.34],[-77.53466,23.75975]]],[[[-77.82,26.58],[-78.91,26.42],[-78.98,26.79],[-78.51,26.87],[-77.85,26.84],[-77.82,26.58]]],[[[-77,26.59],[-77.17255,25.87918],[-77.35641,26.00735],[-77.34,26.53],[-77.78802,26.92516],[-77.79,27.04],[-77,26.59]]]]}},\n{\"type\":\"Feature\",\"id\":\"BIH\",\"properties\":{\"name\":\"Bosnia and Herzegovina\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[19.005486,44.860234],[19.36803,44.863],[19.11761,44.42307],[19.59976,44.03847],[19.454,43.5681],[19.21852,43.52384],[19.03165,43.43253],[18.70648,43.20011],[18.56,42.65],[17.674922,43.028563],[17.297373,43.446341],[16.916156,43.667722],[16.456443,44.04124],[16.23966,44.351143],[15.750026,44.818712],[15.959367,45.233777],[16.318157,45.004127],[16.534939,45.211608],[17.002146,45.233777],[17.861783,45.06774],[18.553214,45.08159],[19.005486,44.860234]]]}},\n{\"type\":\"Feature\",\"id\":\"BLR\",\"properties\":{\"name\":\"Belarus\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[23.484128,53.912498],[24.450684,53.905702],[25.536354,54.282423],[25.768433,54.846963],[26.588279,55.167176],[26.494331,55.615107],[27.10246,55.783314],[28.176709,56.16913],[29.229513,55.918344],[29.371572,55.670091],[29.896294,55.789463],[30.873909,55.550976],[30.971836,55.081548],[30.757534,54.811771],[31.384472,54.157056],[31.791424,53.974639],[31.731273,53.794029],[32.405599,53.618045],[32.693643,53.351421],[32.304519,53.132726],[31.497644,53.167427],[31.305201,53.073996],[31.540018,52.742052],[31.785998,52.101678],[30.927549,52.042353],[30.619454,51.822806],[30.555117,51.319503],[30.157364,51.416138],[29.254938,51.368234],[28.992835,51.602044],[28.617613,51.427714],[28.241615,51.572227],[27.454066,51.592303],[26.337959,51.832289],[25.327788,51.910656],[24.553106,51.888461],[24.005078,51.617444],[23.527071,51.578454],[23.508002,52.023647],[23.199494,52.486977],[23.799199,52.691099],[23.804935,53.089731],[23.527536,53.470122],[23.484128,53.912498]]]}},\n{\"type\":\"Feature\",\"id\":\"BLZ\",\"properties\":{\"name\":\"Belize\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-89.14308,17.808319],[-89.150909,17.955468],[-89.029857,18.001511],[-88.848344,17.883198],[-88.490123,18.486831],[-88.300031,18.499982],[-88.296336,18.353273],[-88.106813,18.348674],[-88.123479,18.076675],[-88.285355,17.644143],[-88.197867,17.489475],[-88.302641,17.131694],[-88.239518,17.036066],[-88.355428,16.530774],[-88.551825,16.265467],[-88.732434,16.233635],[-88.930613,15.887273],[-89.229122,15.886938],[-89.150806,17.015577],[-89.14308,17.808319]]]}},\n{\"type\":\"Feature\",\"id\":\"BMU\",\"properties\":{\"name\":\"Bermuda\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-64.7799734332998,32.3072000581802],[-64.7873319183061,32.3039237143428],[-64.7946942710173,32.3032682700388],[-64.8094297981283,32.3098175728414],[-64.8167896352437,32.3058845718466],[-64.8101968029642,32.3022833180511],[-64.7962291465484,32.2934409732427],[-64.7815086336978,32.2868973114514],[-64.7997025513437,32.2796896417328],[-64.8066707691087,32.2747767569465],[-64.8225587873683,32.2669111289395],[-64.8287548840306,32.2669075473817],[-64.8306732143498,32.2583944840235],[-64.8399924854972,32.254782282336],[-64.8566090462354,32.2547740387514],[-64.8682296789446,32.2616393614322],[-64.8628241459563,32.2724481933959],[-64.8748651338951,32.2757120264753],[-64.8717752856644,32.2819371582026],[-64.8671422127295,32.2930760547989],[-64.8559068764437,32.2960321186471],[-64.8597429072279,32.3015842021933],[-64.8439233486717,32.3140553852543],[-64.8350242329311,32.3242161760006],[-64.8338690593672,32.3294587561557],[-64.8520298651164,32.3110911879954],[-64.8635922932573,32.3048469433363],[-64.8686668994079,32.30910745083],[-64.8721354593415,32.3041908606301],[-64.8779667328485,32.3038632800462],[-64.8780046844321,32.2907757831692],[-64.8849776658292,32.2819261366004],[-64.8783230004629,32.2613001418681],[-64.863194968877,32.2465799485801],[-64.8519819555722,32.2485519134663],[-64.842311980074,32.2492123317296],[-64.8388242605209,32.2475773472534],[-64.8334002575532,32.2462714714698],[-64.8256389530584,32.2472637398594],[-64.8205697556026,32.2531698880328],[-64.8105087275579,32.2561208974156],[-64.7900177727338,32.2659446936992],[-64.7745415970416,32.2718413023427],[-64.7644742436426,32.2855931353214],[-64.7551803442276,32.2908326702531],[-64.7423982971436,32.2996734994024],[-64.7206991797682,32.3137542201258],[-64.7117851247134,32.3176823360806],[-64.6962778813133,32.3275029115532],[-64.6768921127452,32.3324095397555],[-64.6567136927777,32.3451776458469],[-64.6532168823499,32.3494356627941],[-64.6605720384429,32.3589423487763],[-64.65125819471,32.3615600906466],[-64.6462011670816,32.36975169749],[-64.6613227512832,32.3763135008721],[-64.6690666074397,32.388444543924],[-64.6834270548595,32.3854968316788],[-64.6954617672714,32.3763221285869],[-64.70438689565,32.3704254760469],[-64.7117569982798,32.368132600249],[-64.7061764744404,32.3600110593559],[-64.700531552697,32.3590601356818],[-64.6940348033967,32.3640708659835],[-64.6895164826082,32.3633598579866],[-64.6864150099255,32.3547797587266],[-64.6824635995504,32.3540628176846],[-64.6835876652835,32.3626447677968],[-64.6801998697415,32.3631199096979],[-64.6672170444687,32.3597751617473],[-64.6598811264978,32.3497625771755],[-64.6737331235384,32.3390281851635],[-64.6887090648183,32.3342439408053],[-64.706732854446,32.3429010723036],[-64.7149301576112,32.3552188753513],[-64.7185967666669,32.3552239212394],[-64.7214189847314,32.3518830231342],[-64.7270616067222,32.3466461715475],[-64.734962460882,32.3442819830499],[-64.7383521549094,32.3407216514918],[-64.7411729976333,32.3311790864627],[-64.7423019216485,32.323311561213],[-64.7462482354281,32.318538611581],[-64.7566773739613,32.3130509130175],[-64.768738200563,32.3088369816572],[-64.7799734332998,32.3072000581802]]]}},\n{\"type\":\"Feature\",\"id\":\"BOL\",\"properties\":{\"name\":\"Bolivia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-62.846468,-22.034985],[-63.986838,-21.993644],[-64.377021,-22.798091],[-64.964892,-22.075862],[-66.273339,-21.83231],[-67.106674,-22.735925],[-67.82818,-22.872919],[-68.219913,-21.494347],[-68.757167,-20.372658],[-68.442225,-19.405068],[-68.966818,-18.981683],[-69.100247,-18.260125],[-69.590424,-17.580012],[-68.959635,-16.500698],[-69.389764,-15.660129],[-69.160347,-15.323974],[-69.339535,-14.953195],[-68.948887,-14.453639],[-68.929224,-13.602684],[-68.88008,-12.899729],[-68.66508,-12.5613],[-69.529678,-10.951734],[-68.786158,-11.03638],[-68.271254,-11.014521],[-68.048192,-10.712059],[-67.173801,-10.306812],[-66.646908,-9.931331],[-65.338435,-9.761988],[-65.444837,-10.511451],[-65.321899,-10.895872],[-65.402281,-11.56627],[-64.316353,-12.461978],[-63.196499,-12.627033],[-62.80306,-13.000653],[-62.127081,-13.198781],[-61.713204,-13.489202],[-61.084121,-13.479384],[-60.503304,-13.775955],[-60.459198,-14.354007],[-60.264326,-14.645979],[-60.251149,-15.077219],[-60.542966,-15.09391],[-60.15839,-16.258284],[-58.24122,-16.299573],[-58.388058,-16.877109],[-58.280804,-17.27171],[-57.734558,-17.552468],[-57.498371,-18.174188],[-57.676009,-18.96184],[-57.949997,-19.400004],[-57.853802,-19.969995],[-58.166392,-20.176701],[-58.183471,-19.868399],[-59.115042,-19.356906],[-60.043565,-19.342747],[-61.786326,-19.633737],[-62.265961,-20.513735],[-62.291179,-21.051635],[-62.685057,-22.249029],[-62.846468,-22.034985]]]}},\n{\"type\":\"Feature\",\"id\":\"BRA\",\"properties\":{\"name\":\"Brazil\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-57.625133,-30.216295],[-56.2909,-28.852761],[-55.162286,-27.881915],[-54.490725,-27.474757],[-53.648735,-26.923473],[-53.628349,-26.124865],[-54.13005,-25.547639],[-54.625291,-25.739255],[-54.428946,-25.162185],[-54.293476,-24.5708],[-54.29296,-24.021014],[-54.652834,-23.839578],[-55.027902,-24.001274],[-55.400747,-23.956935],[-55.517639,-23.571998],[-55.610683,-22.655619],[-55.797958,-22.35693],[-56.473317,-22.0863],[-56.88151,-22.282154],[-57.937156,-22.090176],[-57.870674,-20.732688],[-58.166392,-20.176701],[-57.853802,-19.969995],[-57.949997,-19.400004],[-57.676009,-18.96184],[-57.498371,-18.174188],[-57.734558,-17.552468],[-58.280804,-17.27171],[-58.388058,-16.877109],[-58.24122,-16.299573],[-60.15839,-16.258284],[-60.542966,-15.09391],[-60.251149,-15.077219],[-60.264326,-14.645979],[-60.459198,-14.354007],[-60.503304,-13.775955],[-61.084121,-13.479384],[-61.713204,-13.489202],[-62.127081,-13.198781],[-62.80306,-13.000653],[-63.196499,-12.627033],[-64.316353,-12.461978],[-65.402281,-11.56627],[-65.321899,-10.895872],[-65.444837,-10.511451],[-65.338435,-9.761988],[-66.646908,-9.931331],[-67.173801,-10.306812],[-68.048192,-10.712059],[-68.271254,-11.014521],[-68.786158,-11.03638],[-69.529678,-10.951734],[-70.093752,-11.123972],[-70.548686,-11.009147],[-70.481894,-9.490118],[-71.302412,-10.079436],[-72.184891,-10.053598],[-72.563033,-9.520194],[-73.226713,-9.462213],[-73.015383,-9.032833],[-73.571059,-8.424447],[-73.987235,-7.52383],[-73.723401,-7.340999],[-73.724487,-6.918595],[-73.120027,-6.629931],[-73.219711,-6.089189],[-72.964507,-5.741251],[-72.891928,-5.274561],[-71.748406,-4.593983],[-70.928843,-4.401591],[-70.794769,-4.251265],[-69.893635,-4.298187],[-69.444102,-1.556287],[-69.420486,-1.122619],[-69.577065,-0.549992],[-70.020656,-0.185156],[-70.015566,0.541414],[-69.452396,0.706159],[-69.252434,0.602651],[-69.218638,0.985677],[-69.804597,1.089081],[-69.816973,1.714805],[-67.868565,1.692455],[-67.53781,2.037163],[-67.259998,1.719999],[-67.065048,1.130112],[-66.876326,1.253361],[-66.325765,0.724452],[-65.548267,0.789254],[-65.354713,1.095282],[-64.611012,1.328731],[-64.199306,1.492855],[-64.083085,1.916369],[-63.368788,2.2009],[-63.422867,2.411068],[-64.269999,2.497006],[-64.408828,3.126786],[-64.368494,3.79721],[-64.816064,4.056445],[-64.628659,4.148481],[-63.888343,4.02053],[-63.093198,3.770571],[-62.804533,4.006965],[-62.08543,4.162124],[-60.966893,4.536468],[-60.601179,4.918098],[-60.733574,5.200277],[-60.213683,5.244486],[-59.980959,5.014061],[-60.111002,4.574967],[-59.767406,4.423503],[-59.53804,3.958803],[-59.815413,3.606499],[-59.974525,2.755233],[-59.718546,2.24963],[-59.646044,1.786894],[-59.030862,1.317698],[-58.540013,1.268088],[-58.429477,1.463942],[-58.11345,1.507195],[-57.660971,1.682585],[-57.335823,1.948538],[-56.782704,1.863711],[-56.539386,1.899523],[-55.995698,1.817667],[-55.9056,2.021996],[-56.073342,2.220795],[-55.973322,2.510364],[-55.569755,2.421506],[-55.097587,2.523748],[-54.524754,2.311849],[-54.088063,2.105557],[-53.778521,2.376703],[-53.554839,2.334897],[-53.418465,2.053389],[-52.939657,2.124858],[-52.556425,2.504705],[-52.249338,3.241094],[-51.657797,4.156232],[-51.317146,4.203491],[-51.069771,3.650398],[-50.508875,1.901564],[-49.974076,1.736483],[-49.947101,1.04619],[-50.699251,0.222984],[-50.388211,-0.078445],[-48.620567,-0.235489],[-48.584497,-1.237805],[-47.824956,-0.581618],[-46.566584,-0.941028],[-44.905703,-1.55174],[-44.417619,-2.13775],[-44.581589,-2.691308],[-43.418791,-2.38311],[-41.472657,-2.912018],[-39.978665,-2.873054],[-38.500383,-3.700652],[-37.223252,-4.820946],[-36.452937,-5.109404],[-35.597796,-5.149504],[-35.235389,-5.464937],[-34.89603,-6.738193],[-34.729993,-7.343221],[-35.128212,-8.996401],[-35.636967,-9.649282],[-37.046519,-11.040721],[-37.683612,-12.171195],[-38.423877,-13.038119],[-38.673887,-13.057652],[-38.953276,-13.79337],[-38.882298,-15.667054],[-39.161092,-17.208407],[-39.267339,-17.867746],[-39.583521,-18.262296],[-39.760823,-19.599113],[-40.774741,-20.904512],[-40.944756,-21.937317],[-41.754164,-22.370676],[-41.988284,-22.97007],[-43.074704,-22.967693],[-44.647812,-23.351959],[-45.352136,-23.796842],[-46.472093,-24.088969],[-47.648972,-24.885199],[-48.495458,-25.877025],[-48.641005,-26.623698],[-48.474736,-27.175912],[-48.66152,-28.186135],[-48.888457,-28.674115],[-49.587329,-29.224469],[-50.696874,-30.984465],[-51.576226,-31.777698],[-52.256081,-32.24537],[-52.7121,-33.196578],[-53.373662,-33.768378],[-53.650544,-33.202004],[-53.209589,-32.727666],[-53.787952,-32.047243],[-54.572452,-31.494511],[-55.60151,-30.853879],[-55.973245,-30.883076],[-56.976026,-30.109686],[-57.625133,-30.216295]]]}},\n{\"type\":\"Feature\",\"id\":\"BRN\",\"properties\":{\"name\":\"Brunei\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[114.204017,4.525874],[114.599961,4.900011],[115.45071,5.44773],[115.4057,4.955228],[115.347461,4.316636],[114.869557,4.348314],[114.659596,4.007637],[114.204017,4.525874]]]}},\n{\"type\":\"Feature\",\"id\":\"BTN\",\"properties\":{\"name\":\"Bhutan\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[91.696657,27.771742],[92.103712,27.452614],[92.033484,26.83831],[91.217513,26.808648],[90.373275,26.875724],[89.744528,26.719403],[88.835643,27.098966],[88.814248,27.299316],[89.47581,28.042759],[90.015829,28.296439],[90.730514,28.064954],[91.258854,28.040614],[91.696657,27.771742]]]}},\n{\"type\":\"Feature\",\"id\":\"BWA\",\"properties\":{\"name\":\"Botswana\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[25.649163,-18.536026],[25.850391,-18.714413],[26.164791,-19.293086],[27.296505,-20.39152],[27.724747,-20.499059],[27.727228,-20.851802],[28.02137,-21.485975],[28.794656,-21.639454],[29.432188,-22.091313],[28.017236,-22.827754],[27.11941,-23.574323],[26.786407,-24.240691],[26.485753,-24.616327],[25.941652,-24.696373],[25.765849,-25.174845],[25.664666,-25.486816],[25.025171,-25.71967],[24.211267,-25.670216],[23.73357,-25.390129],[23.312097,-25.26869],[22.824271,-25.500459],[22.579532,-25.979448],[22.105969,-26.280256],[21.605896,-26.726534],[20.889609,-26.828543],[20.66647,-26.477453],[20.758609,-25.868136],[20.165726,-24.917962],[19.895768,-24.76779],[19.895458,-21.849157],[20.881134,-21.814327],[20.910641,-18.252219],[21.65504,-18.219146],[23.196858,-17.869038],[23.579006,-18.281261],[24.217365,-17.889347],[24.520705,-17.887125],[25.084443,-17.661816],[25.264226,-17.73654],[25.649163,-18.536026]]]}},\n{\"type\":\"Feature\",\"id\":\"CAF\",\"properties\":{\"name\":\"Central African Republic\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[15.27946,7.421925],[16.106232,7.497088],[16.290562,7.754307],[16.456185,7.734774],[16.705988,7.508328],[17.96493,7.890914],[18.389555,8.281304],[18.911022,8.630895],[18.81201,8.982915],[19.094008,9.074847],[20.059685,9.012706],[21.000868,9.475985],[21.723822,10.567056],[22.231129,10.971889],[22.864165,11.142395],[22.977544,10.714463],[23.554304,10.089255],[23.55725,9.681218],[23.394779,9.265068],[23.459013,8.954286],[23.805813,8.666319],[24.567369,8.229188],[25.114932,7.825104],[25.124131,7.500085],[25.796648,6.979316],[26.213418,6.546603],[26.465909,5.946717],[27.213409,5.550953],[27.374226,5.233944],[27.044065,5.127853],[26.402761,5.150875],[25.650455,5.256088],[25.278798,5.170408],[25.128833,4.927245],[24.805029,4.897247],[24.410531,5.108784],[23.297214,4.609693],[22.84148,4.710126],[22.704124,4.633051],[22.405124,4.02916],[21.659123,4.224342],[20.927591,4.322786],[20.290679,4.691678],[19.467784,5.031528],[18.932312,4.709506],[18.542982,4.201785],[18.453065,3.504386],[17.8099,3.560196],[17.133042,3.728197],[16.537058,3.198255],[16.012852,2.26764],[15.907381,2.557389],[15.862732,3.013537],[15.405396,3.335301],[15.03622,3.851367],[14.950953,4.210389],[14.478372,4.732605],[14.558936,5.030598],[14.459407,5.451761],[14.53656,6.226959],[14.776545,6.408498],[15.27946,7.421925]]]}},\n{\"type\":\"Feature\",\"id\":\"CAN\",\"properties\":{\"name\":\"Canada\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-63.6645,46.55001],[-62.9393,46.41587],[-62.01208,46.44314],[-62.50391,46.03339],[-62.87433,45.96818],[-64.1428,46.39265],[-64.39261,46.72747],[-64.01486,47.03601],[-63.6645,46.55001]]],[[[-61.806305,49.10506],[-62.29318,49.08717],[-63.58926,49.40069],[-64.51912,49.87304],[-64.17322,49.95718],[-62.85829,49.70641],[-61.835585,49.28855],[-61.806305,49.10506]]],[[[-123.510002,48.510011],[-124.012891,48.370846],[-125.655013,48.825005],[-125.954994,49.179996],[-126.850004,49.53],[-127.029993,49.814996],[-128.059336,49.994959],[-128.444584,50.539138],[-128.358414,50.770648],[-127.308581,50.552574],[-126.695001,50.400903],[-125.755007,50.295018],[-125.415002,49.950001],[-124.920768,49.475275],[-123.922509,49.062484],[-123.510002,48.510011]]],[[[-56.134036,50.68701],[-56.795882,49.812309],[-56.143105,50.150117],[-55.471492,49.935815],[-55.822401,49.587129],[-54.935143,49.313011],[-54.473775,49.556691],[-53.476549,49.249139],[-53.786014,48.516781],[-53.086134,48.687804],[-52.958648,48.157164],[-52.648099,47.535548],[-53.069158,46.655499],[-53.521456,46.618292],[-54.178936,46.807066],[-53.961869,47.625207],[-54.240482,47.752279],[-55.400773,46.884994],[-55.997481,46.91972],[-55.291219,47.389562],[-56.250799,47.632545],[-57.325229,47.572807],[-59.266015,47.603348],[-59.419494,47.899454],[-58.796586,48.251525],[-59.231625,48.523188],[-58.391805,49.125581],[-57.35869,50.718274],[-56.73865,51.287438],[-55.870977,51.632094],[-55.406974,51.588273],[-55.600218,51.317075],[-56.134036,50.68701]]],[[[-132.710008,54.040009],[-131.74999,54.120004],[-132.04948,52.984621],[-131.179043,52.180433],[-131.57783,52.182371],[-132.180428,52.639707],[-132.549992,53.100015],[-133.054611,53.411469],[-133.239664,53.85108],[-133.180004,54.169975],[-132.710008,54.040009]]],[[[-79.26582,62.158675],[-79.65752,61.63308],[-80.09956,61.7181],[-80.36215,62.01649],[-80.315395,62.085565],[-79.92939,62.3856],[-79.52002,62.36371],[-79.26582,62.158675]]],[[[-81.89825,62.7108],[-83.06857,62.15922],[-83.77462,62.18231],[-83.99367,62.4528],[-83.25048,62.91409],[-81.87699,62.90458],[-81.89825,62.7108]]],[[[-85.161308,65.657285],[-84.975764,65.217518],[-84.464012,65.371772],[-83.882626,65.109618],[-82.787577,64.766693],[-81.642014,64.455136],[-81.55344,63.979609],[-80.817361,64.057486],[-80.103451,63.725981],[-80.99102,63.411246],[-82.547178,63.651722],[-83.108798,64.101876],[-84.100417,63.569712],[-85.523405,63.052379],[-85.866769,63.637253],[-87.221983,63.541238],[-86.35276,64.035833],[-86.224886,64.822917],[-85.883848,65.738778],[-85.161308,65.657285]]],[[[-75.86588,67.14886],[-76.98687,67.09873],[-77.2364,67.58809],[-76.81166,68.14856],[-75.89521,68.28721],[-75.1145,68.01036],[-75.10333,67.58202],[-75.21597,67.44425],[-75.86588,67.14886]]],[[[-95.647681,69.10769],[-96.269521,68.75704],[-97.617401,69.06003],[-98.431801,68.9507],[-99.797401,69.40003],[-98.917401,69.71003],[-98.218261,70.14354],[-97.157401,69.86003],[-96.557401,69.68003],[-96.257401,69.49003],[-95.647681,69.10769]]],[[[-90.5471,69.49766],[-90.55151,68.47499],[-89.21515,69.25873],[-88.01966,68.61508],[-88.31749,67.87338],[-87.35017,67.19872],[-86.30607,67.92146],[-85.57664,68.78456],[-85.52197,69.88211],[-84.10081,69.80539],[-82.62258,69.65826],[-81.28043,69.16202],[-81.2202,68.66567],[-81.96436,68.13253],[-81.25928,67.59716],[-81.38653,67.11078],[-83.34456,66.41154],[-84.73542,66.2573],[-85.76943,66.55833],[-86.0676,66.05625],[-87.03143,65.21297],[-87.32324,64.77563],[-88.48296,64.09897],[-89.91444,64.03273],[-90.70398,63.61017],[-90.77004,62.96021],[-91.93342,62.83508],[-93.15698,62.02469],[-94.24153,60.89865],[-94.62931,60.11021],[-94.6846,58.94882],[-93.21502,58.78212],[-92.76462,57.84571],[-92.29703,57.08709],[-90.89769,57.28468],[-89.03953,56.85172],[-88.03978,56.47162],[-87.32421,55.99914],[-86.07121,55.72383],[-85.01181,55.3026],[-83.36055,55.24489],[-82.27285,55.14832],[-82.4362,54.28227],[-82.12502,53.27703],[-81.40075,52.15788],[-79.91289,51.20842],[-79.14301,51.53393],[-78.60191,52.56208],[-79.12421,54.14145],[-79.82958,54.66772],[-78.22874,55.13645],[-77.0956,55.83741],[-76.54137,56.53423],[-76.62319,57.20263],[-77.30226,58.05209],[-78.51688,58.80458],[-77.33676,59.85261],[-77.77272,60.75788],[-78.10687,62.31964],[-77.41067,62.55053],[-75.69621,62.2784],[-74.6682,62.18111],[-73.83988,62.4438],[-72.90853,62.10507],[-71.67708,61.52535],[-71.37369,61.13717],[-69.59042,61.06141],[-69.62033,60.22125],[-69.2879,58.95736],[-68.37455,58.80106],[-67.64976,58.21206],[-66.20178,58.76731],[-65.24517,59.87071],[-64.58352,60.33558],[-63.80475,59.4426],[-62.50236,58.16708],[-61.39655,56.96745],[-61.79866,56.33945],[-60.46853,55.77548],[-59.56962,55.20407],[-57.97508,54.94549],[-57.3332,54.6265],[-56.93689,53.78032],[-56.15811,53.64749],[-55.75632,53.27036],[-55.68338,52.14664],[-56.40916,51.7707],[-57.12691,51.41972],[-58.77482,51.0643],[-60.03309,50.24277],[-61.72366,50.08046],[-63.86251,50.29099],[-65.36331,50.2982],[-66.39905,50.22897],[-67.23631,49.51156],[-68.51114,49.06836],[-69.95362,47.74488],[-71.10458,46.82171],[-70.25522,46.98606],[-68.65,48.3],[-66.55243,49.1331],[-65.05626,49.23278],[-64.17099,48.74248],[-65.11545,48.07085],[-64.79854,46.99297],[-64.47219,46.23849],[-63.17329,45.73902],[-61.52072,45.88377],[-60.51815,47.00793],[-60.4486,46.28264],[-59.80287,45.9204],[-61.03988,45.26525],[-63.25471,44.67014],[-64.24656,44.26553],[-65.36406,43.54523],[-66.1234,43.61867],[-66.16173,44.46512],[-64.42549,45.29204],[-66.02605,45.25931],[-67.13741,45.13753],[-67.79134,45.70281],[-67.79046,47.06636],[-68.23444,47.35486],[-68.905,47.185],[-69.237216,47.447781],[-69.99997,46.69307],[-70.305,45.915],[-70.66,45.46],[-71.08482,45.30524],[-71.405,45.255],[-71.50506,45.0082],[-73.34783,45.00738],[-74.867,45.00048],[-75.31821,44.81645],[-76.375,44.09631],[-76.5,44.018459],[-76.820034,43.628784],[-77.737885,43.629056],[-78.72028,43.625089],[-79.171674,43.466339],[-79.01,43.27],[-78.92,42.965],[-78.939362,42.863611],[-80.247448,42.3662],[-81.277747,42.209026],[-82.439278,41.675105],[-82.690089,41.675105],[-83.02981,41.832796],[-83.142,41.975681],[-83.12,42.08],[-82.9,42.43],[-82.43,42.98],[-82.137642,43.571088],[-82.337763,44.44],[-82.550925,45.347517],[-83.592851,45.816894],[-83.469551,45.994686],[-83.616131,46.116927],[-83.890765,46.116927],[-84.091851,46.275419],[-84.14212,46.512226],[-84.3367,46.40877],[-84.6049,46.4396],[-84.543749,46.538684],[-84.779238,46.637102],[-84.87608,46.900083],[-85.652363,47.220219],[-86.461991,47.553338],[-87.439793,47.94],[-88.378114,48.302918],[-89.272917,48.019808],[-89.6,48.01],[-90.83,48.27],[-91.64,48.14],[-92.61,48.45],[-93.63087,48.60926],[-94.32914,48.67074],[-94.64,48.84],[-94.81758,49.38905],[-95.15609,49.38425],[-95.15907,49],[-97.22872,49.0007],[-100.65,49],[-104.04826,48.99986],[-107.05,49],[-110.05,49],[-113,49],[-116.04818,49],[-117.03121,49],[-120,49],[-122.84,49],[-122.97421,49.002538],[-124.91024,49.98456],[-125.62461,50.41656],[-127.43561,50.83061],[-127.99276,51.71583],[-127.85032,52.32961],[-129.12979,52.75538],[-129.30523,53.56159],[-130.51497,54.28757],[-130.53611,54.80278],[-129.98,55.285],[-130.00778,55.91583],[-131.70781,56.55212],[-132.73042,57.69289],[-133.35556,58.41028],[-134.27111,58.86111],[-134.945,59.27056],[-135.47583,59.78778],[-136.47972,59.46389],[-137.4525,58.905],[-138.34089,59.56211],[-139.039,60],[-140.013,60.27682],[-140.99778,60.30639],[-140.9925,66.00003],[-140.986,69.712],[-139.12052,69.47102],[-137.54636,68.99002],[-136.50358,68.89804],[-135.62576,69.31512],[-134.41464,69.62743],[-132.92925,69.50534],[-131.43136,69.94451],[-129.79471,70.19369],[-129.10773,69.77927],[-128.36156,70.01286],[-128.13817,70.48384],[-127.44712,70.37721],[-125.75632,69.48058],[-124.42483,70.1584],[-124.28968,69.39969],[-123.06108,69.56372],[-122.6835,69.85553],[-121.47226,69.79778],[-119.94288,69.37786],[-117.60268,69.01128],[-116.22643,68.84151],[-115.2469,68.90591],[-113.89794,68.3989],[-115.30489,67.90261],[-113.49727,67.68815],[-110.798,67.80612],[-109.94619,67.98104],[-108.8802,67.38144],[-107.79239,67.88736],[-108.81299,68.31164],[-108.16721,68.65392],[-106.95,68.7],[-106.15,68.8],[-105.34282,68.56122],[-104.33791,68.018],[-103.22115,68.09775],[-101.45433,67.64689],[-99.90195,67.80566],[-98.4432,67.78165],[-98.5586,68.40394],[-97.66948,68.57864],[-96.11991,68.23939],[-96.12588,67.29338],[-95.48943,68.0907],[-94.685,68.06383],[-94.23282,69.06903],[-95.30408,69.68571],[-96.47131,70.08976],[-96.39115,71.19482],[-95.2088,71.92053],[-93.88997,71.76015],[-92.87818,71.31869],[-91.51964,70.19129],[-92.40692,69.69997],[-90.5471,69.49766]]],[[[-114.16717,73.12145],[-114.66634,72.65277],[-112.44102,72.9554],[-111.05039,72.4504],[-109.92035,72.96113],[-109.00654,72.63335],[-108.18835,71.65089],[-107.68599,72.06548],[-108.39639,73.08953],[-107.51645,73.23598],[-106.52259,73.07601],[-105.40246,72.67259],[-104.77484,71.6984],[-104.46476,70.99297],[-102.78537,70.49776],[-100.98078,70.02432],[-101.08929,69.58447],[-102.73116,69.50402],[-102.09329,69.11962],[-102.43024,68.75282],[-104.24,68.91],[-105.96,69.18],[-107.12254,69.11922],[-109,68.78],[-111.534149,68.630059],[-113.3132,68.53554],[-113.85496,69.00744],[-115.22,69.28],[-116.10794,69.16821],[-117.34,69.96],[-116.67473,70.06655],[-115.13112,70.2373],[-113.72141,70.19237],[-112.4161,70.36638],[-114.35,70.6],[-116.48684,70.52045],[-117.9048,70.54056],[-118.43238,70.9092],[-116.11311,71.30918],[-117.65568,71.2952],[-119.40199,71.55859],[-118.56267,72.30785],[-117.86642,72.70594],[-115.18909,73.31459],[-114.16717,73.12145]]],[[[-104.5,73.42],[-105.38,72.76],[-106.94,73.46],[-106.6,73.6],[-105.26,73.64],[-104.5,73.42]]],[[[-76.34,73.102685],[-76.251404,72.826385],[-77.314438,72.855545],[-78.39167,72.876656],[-79.486252,72.742203],[-79.775833,72.802902],[-80.876099,73.333183],[-80.833885,73.693184],[-80.353058,73.75972],[-78.064438,73.651932],[-76.34,73.102685]]],[[[-86.562179,73.157447],[-85.774371,72.534126],[-84.850112,73.340278],[-82.31559,73.750951],[-80.600088,72.716544],[-80.748942,72.061907],[-78.770639,72.352173],[-77.824624,72.749617],[-75.605845,72.243678],[-74.228616,71.767144],[-74.099141,71.33084],[-72.242226,71.556925],[-71.200015,70.920013],[-68.786054,70.525024],[-67.91497,70.121948],[-66.969033,69.186087],[-68.805123,68.720198],[-66.449866,68.067163],[-64.862314,67.847539],[-63.424934,66.928473],[-61.851981,66.862121],[-62.163177,66.160251],[-63.918444,64.998669],[-65.14886,65.426033],[-66.721219,66.388041],[-68.015016,66.262726],[-68.141287,65.689789],[-67.089646,65.108455],[-65.73208,64.648406],[-65.320168,64.382737],[-64.669406,63.392927],[-65.013804,62.674185],[-66.275045,62.945099],[-68.783186,63.74567],[-67.369681,62.883966],[-66.328297,62.280075],[-66.165568,61.930897],[-68.877367,62.330149],[-71.023437,62.910708],[-72.235379,63.397836],[-71.886278,63.679989],[-73.378306,64.193963],[-74.834419,64.679076],[-74.818503,64.389093],[-77.70998,64.229542],[-78.555949,64.572906],[-77.897281,65.309192],[-76.018274,65.326969],[-73.959795,65.454765],[-74.293883,65.811771],[-73.944912,66.310578],[-72.651167,67.284576],[-72.92606,67.726926],[-73.311618,68.069437],[-74.843307,68.554627],[-76.869101,68.894736],[-76.228649,69.147769],[-77.28737,69.76954],[-78.168634,69.826488],[-78.957242,70.16688],[-79.492455,69.871808],[-81.305471,69.743185],[-84.944706,69.966634],[-87.060003,70.260001],[-88.681713,70.410741],[-89.51342,70.762038],[-88.467721,71.218186],[-89.888151,71.222552],[-90.20516,72.235074],[-89.436577,73.129464],[-88.408242,73.537889],[-85.826151,73.803816],[-86.562179,73.157447]]],[[[-100.35642,73.84389],[-99.16387,73.63339],[-97.38,73.76],[-97.12,73.47],[-98.05359,72.99052],[-96.54,72.56],[-96.72,71.66],[-98.35966,71.27285],[-99.32286,71.35639],[-100.01482,71.73827],[-102.5,72.51],[-102.48,72.83],[-100.43836,72.70588],[-101.54,73.36],[-100.35642,73.84389]]],[[[-93.196296,72.771992],[-94.269047,72.024596],[-95.409856,72.061881],[-96.033745,72.940277],[-96.018268,73.43743],[-95.495793,73.862417],[-94.503658,74.134907],[-92.420012,74.100025],[-90.509793,73.856732],[-92.003965,72.966244],[-93.196296,72.771992]]],[[[-120.46,71.383602],[-123.09219,70.90164],[-123.62,71.34],[-125.928949,71.868688],[-125.5,72.292261],[-124.80729,73.02256],[-123.94,73.68],[-124.91775,74.29275],[-121.53788,74.44893],[-120.10978,74.24135],[-117.55564,74.18577],[-116.58442,73.89607],[-115.51081,73.47519],[-116.76794,73.22292],[-119.22,72.52],[-120.46,71.82],[-120.46,71.383602]]],[[[-93.612756,74.979997],[-94.156909,74.592347],[-95.608681,74.666864],[-96.820932,74.927623],[-96.288587,75.377828],[-94.85082,75.647218],[-93.977747,75.29649],[-93.612756,74.979997]]],[[[-98.5,76.72],[-97.735585,76.25656],[-97.704415,75.74344],[-98.16,75],[-99.80874,74.89744],[-100.88366,75.05736],[-100.86292,75.64075],[-102.50209,75.5638],[-102.56552,76.3366],[-101.48973,76.30537],[-99.98349,76.64634],[-98.57699,76.58859],[-98.5,76.72]]],[[[-108.21141,76.20168],[-107.81943,75.84552],[-106.92893,76.01282],[-105.881,75.9694],[-105.70498,75.47951],[-106.31347,75.00527],[-109.7,74.85],[-112.22307,74.41696],[-113.74381,74.39427],[-113.87135,74.72029],[-111.79421,75.1625],[-116.31221,75.04343],[-117.7104,75.2222],[-116.34602,76.19903],[-115.40487,76.47887],[-112.59056,76.14134],[-110.81422,75.54919],[-109.0671,75.47321],[-110.49726,76.42982],[-109.5811,76.79417],[-108.54859,76.67832],[-108.21141,76.20168]]],[[[-94.684086,77.097878],[-93.573921,76.776296],[-91.605023,76.778518],[-90.741846,76.449597],[-90.969661,76.074013],[-89.822238,75.847774],[-89.187083,75.610166],[-87.838276,75.566189],[-86.379192,75.482421],[-84.789625,75.699204],[-82.753445,75.784315],[-81.128531,75.713983],[-80.057511,75.336849],[-79.833933,74.923127],[-80.457771,74.657304],[-81.948843,74.442459],[-83.228894,74.564028],[-86.097452,74.410032],[-88.15035,74.392307],[-89.764722,74.515555],[-92.422441,74.837758],[-92.768285,75.38682],[-92.889906,75.882655],[-93.893824,76.319244],[-95.962457,76.441381],[-97.121379,76.751078],[-96.745123,77.161389],[-94.684086,77.097878]]],[[[-116.198587,77.645287],[-116.335813,76.876962],[-117.106051,76.530032],[-118.040412,76.481172],[-119.899318,76.053213],[-121.499995,75.900019],[-122.854924,76.116543],[-122.854925,76.116543],[-121.157535,76.864508],[-119.103939,77.51222],[-117.570131,77.498319],[-116.198587,77.645287]]],[[[-93.840003,77.519997],[-94.295608,77.491343],[-96.169654,77.555111],[-96.436304,77.834629],[-94.422577,77.820005],[-93.720656,77.634331],[-93.840003,77.519997]]],[[[-110.186938,77.697015],[-112.051191,77.409229],[-113.534279,77.732207],[-112.724587,78.05105],[-111.264443,78.152956],[-109.854452,77.996325],[-110.186938,77.697015]]],[[[-109.663146,78.601973],[-110.881314,78.40692],[-112.542091,78.407902],[-112.525891,78.550555],[-111.50001,78.849994],[-110.963661,78.804441],[-109.663146,78.601973]]],[[[-95.830295,78.056941],[-97.309843,77.850597],[-98.124289,78.082857],[-98.552868,78.458105],[-98.631984,78.87193],[-97.337231,78.831984],[-96.754399,78.765813],[-95.559278,78.418315],[-95.830295,78.056941]]],[[[-100.060192,78.324754],[-99.670939,77.907545],[-101.30394,78.018985],[-102.949809,78.343229],[-105.176133,78.380332],[-104.210429,78.67742],[-105.41958,78.918336],[-105.492289,79.301594],[-103.529282,79.165349],[-100.825158,78.800462],[-100.060192,78.324754]]],[[[-87.02,79.66],[-85.81435,79.3369],[-87.18756,79.0393],[-89.03535,78.28723],[-90.80436,78.21533],[-92.87669,78.34333],[-93.95116,78.75099],[-93.93574,79.11373],[-93.14524,79.3801],[-94.974,79.37248],[-96.07614,79.70502],[-96.70972,80.15777],[-96.01644,80.60233],[-95.32345,80.90729],[-94.29843,80.97727],[-94.73542,81.20646],[-92.40984,81.25739],[-91.13289,80.72345],[-89.45,80.509322],[-87.81,80.32],[-87.02,79.66]]],[[[-68.5,83.106322],[-65.82735,83.02801],[-63.68,82.9],[-61.85,82.6286],[-61.89388,82.36165],[-64.334,81.92775],[-66.75342,81.72527],[-67.65755,81.50141],[-65.48031,81.50657],[-67.84,80.9],[-69.4697,80.61683],[-71.18,79.8],[-73.2428,79.63415],[-73.88,79.430162],[-76.90773,79.32309],[-75.52924,79.19766],[-76.22046,79.01907],[-75.39345,78.52581],[-76.34354,78.18296],[-77.88851,77.89991],[-78.36269,77.50859],[-79.75951,77.20968],[-79.61965,76.98336],[-77.91089,77.022045],[-77.88911,76.777955],[-80.56125,76.17812],[-83.17439,76.45403],[-86.11184,76.29901],[-87.6,76.42],[-89.49068,76.47239],[-89.6161,76.95213],[-87.76739,77.17833],[-88.26,77.9],[-87.65,77.970222],[-84.97634,77.53873],[-86.34,78.18],[-87.96192,78.37181],[-87.15198,78.75867],[-85.37868,78.9969],[-85.09495,79.34543],[-86.50734,79.73624],[-86.93179,80.25145],[-84.19844,80.20836],[-83.408696,80.1],[-81.84823,80.46442],[-84.1,80.58],[-87.59895,80.51627],[-89.36663,80.85569],[-90.2,81.26],[-91.36786,81.5531],[-91.58702,81.89429],[-90.1,82.085],[-88.93227,82.11751],[-86.97024,82.27961],[-85.5,82.652273],[-84.260005,82.6],[-83.18,82.32],[-82.42,82.86],[-81.1,83.02],[-79.30664,83.13056],[-76.25,83.172059],[-75.71878,83.06404],[-72.83153,83.23324],[-70.665765,83.169781],[-68.5,83.106322]]]]}},\n{\"type\":\"Feature\",\"id\":\"CHE\",\"properties\":{\"name\":\"Switzerland\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[9.594226,47.525058],[9.632932,47.347601],[9.47997,47.10281],[9.932448,46.920728],[10.442701,46.893546],[10.363378,46.483571],[9.922837,46.314899],[9.182882,46.440215],[8.966306,46.036932],[8.489952,46.005151],[8.31663,46.163642],[7.755992,45.82449],[7.273851,45.776948],[6.843593,45.991147],[6.5001,46.429673],[6.022609,46.27299],[6.037389,46.725779],[6.768714,47.287708],[6.736571,47.541801],[7.192202,47.449766],[7.466759,47.620582],[8.317301,47.61358],[8.522612,47.830828],[9.594226,47.525058]]]}},\n{\"type\":\"Feature\",\"id\":\"CHL\",\"properties\":{\"name\":\"Chile\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-68.63401,-52.63637],[-68.63335,-54.8695],[-67.56244,-54.87001],[-66.95992,-54.89681],[-67.29103,-55.30124],[-68.14863,-55.61183],[-68.639991,-55.580018],[-69.2321,-55.49906],[-69.95809,-55.19843],[-71.00568,-55.05383],[-72.2639,-54.49514],[-73.2852,-53.95752],[-74.66253,-52.83749],[-73.8381,-53.04743],[-72.43418,-53.7154],[-71.10773,-54.07433],[-70.59178,-53.61583],[-70.26748,-52.93123],[-69.34565,-52.5183],[-68.63401,-52.63637]]],[[[-68.219913,-21.494347],[-67.82818,-22.872919],[-67.106674,-22.735925],[-66.985234,-22.986349],[-67.328443,-24.025303],[-68.417653,-24.518555],[-68.386001,-26.185016],[-68.5948,-26.506909],[-68.295542,-26.89934],[-69.001235,-27.521214],[-69.65613,-28.459141],[-70.01355,-29.367923],[-69.919008,-30.336339],[-70.535069,-31.36501],[-70.074399,-33.09121],[-69.814777,-33.273886],[-69.817309,-34.193571],[-70.388049,-35.169688],[-70.364769,-36.005089],[-71.121881,-36.658124],[-71.118625,-37.576827],[-70.814664,-38.552995],[-71.413517,-38.916022],[-71.680761,-39.808164],[-71.915734,-40.832339],[-71.746804,-42.051386],[-72.148898,-42.254888],[-71.915424,-43.408565],[-71.464056,-43.787611],[-71.793623,-44.207172],[-71.329801,-44.407522],[-71.222779,-44.784243],[-71.659316,-44.973689],[-71.552009,-45.560733],[-71.917258,-46.884838],[-72.447355,-47.738533],[-72.331161,-48.244238],[-72.648247,-48.878618],[-73.415436,-49.318436],[-73.328051,-50.378785],[-72.975747,-50.74145],[-72.309974,-50.67701],[-72.329404,-51.425956],[-71.914804,-52.009022],[-69.498362,-52.142761],[-68.571545,-52.299444],[-69.461284,-52.291951],[-69.94278,-52.537931],[-70.845102,-52.899201],[-71.006332,-53.833252],[-71.429795,-53.856455],[-72.557943,-53.53141],[-73.702757,-52.835069],[-73.702757,-52.83507],[-74.946763,-52.262754],[-75.260026,-51.629355],[-74.976632,-51.043396],[-75.479754,-50.378372],[-75.608015,-48.673773],[-75.18277,-47.711919],[-74.126581,-46.939253],[-75.644395,-46.647643],[-74.692154,-45.763976],[-74.351709,-44.103044],[-73.240356,-44.454961],[-72.717804,-42.383356],[-73.3889,-42.117532],[-73.701336,-43.365776],[-74.331943,-43.224958],[-74.017957,-41.794813],[-73.677099,-39.942213],[-73.217593,-39.258689],[-73.505559,-38.282883],[-73.588061,-37.156285],[-73.166717,-37.12378],[-72.553137,-35.50884],[-71.861732,-33.909093],[-71.43845,-32.418899],[-71.668721,-30.920645],[-71.370083,-30.095682],[-71.489894,-28.861442],[-70.905124,-27.64038],[-70.724954,-25.705924],[-70.403966,-23.628997],[-70.091246,-21.393319],[-70.16442,-19.756468],[-70.372572,-18.347975],[-69.858444,-18.092694],[-69.590424,-17.580012],[-69.100247,-18.260125],[-68.966818,-18.981683],[-68.442225,-19.405068],[-68.757167,-20.372658],[-68.219913,-21.494347]]]]}},\n{\"type\":\"Feature\",\"id\":\"CHN\",\"properties\":{\"name\":\"China\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[110.339188,18.678395],[109.47521,18.197701],[108.655208,18.507682],[108.626217,19.367888],[109.119056,19.821039],[110.211599,20.101254],[110.786551,20.077534],[111.010051,19.69593],[110.570647,19.255879],[110.339188,18.678395]]],[[[127.657407,49.76027],[129.397818,49.4406],[130.582293,48.729687],[130.987282,47.790132],[132.506672,47.78897],[133.373596,48.183442],[135.026311,48.47823],[134.500814,47.57844],[134.112362,47.212467],[133.769644,46.116927],[133.097127,45.144066],[131.883454,45.321162],[131.025212,44.967953],[131.288555,44.11152],[131.144688,42.92999],[130.633866,42.903015],[130.640016,42.395009],[129.994267,42.985387],[129.596669,42.424982],[128.052215,41.994285],[128.208433,41.466772],[127.343783,41.503152],[126.869083,41.816569],[126.182045,41.107336],[125.079942,40.569824],[124.265625,39.928493],[122.86757,39.637788],[122.131388,39.170452],[121.054554,38.897471],[121.585995,39.360854],[121.376757,39.750261],[122.168595,40.422443],[121.640359,40.94639],[120.768629,40.593388],[119.639602,39.898056],[119.023464,39.252333],[118.042749,39.204274],[117.532702,38.737636],[118.059699,38.061476],[118.87815,37.897325],[118.911636,37.448464],[119.702802,37.156389],[120.823457,37.870428],[121.711259,37.481123],[122.357937,37.454484],[122.519995,36.930614],[121.104164,36.651329],[120.637009,36.11144],[119.664562,35.609791],[119.151208,34.909859],[120.227525,34.360332],[120.620369,33.376723],[121.229014,32.460319],[121.908146,31.692174],[121.891919,30.949352],[121.264257,30.676267],[121.503519,30.142915],[122.092114,29.83252],[121.938428,29.018022],[121.684439,28.225513],[121.125661,28.135673],[120.395473,27.053207],[119.585497,25.740781],[118.656871,24.547391],[117.281606,23.624501],[115.890735,22.782873],[114.763827,22.668074],[114.152547,22.22376],[113.80678,22.54834],[113.241078,22.051367],[111.843592,21.550494],[110.785466,21.397144],[110.444039,20.341033],[109.889861,20.282457],[109.627655,21.008227],[109.864488,21.395051],[108.522813,21.715212],[108.05018,21.55238],[107.04342,21.811899],[106.567273,22.218205],[106.725403,22.794268],[105.811247,22.976892],[105.329209,23.352063],[104.476858,22.81915],[103.504515,22.703757],[102.706992,22.708795],[102.170436,22.464753],[101.652018,22.318199],[101.80312,21.174367],[101.270026,21.201652],[101.180005,21.436573],[101.150033,21.849984],[100.416538,21.558839],[99.983489,21.742937],[99.240899,22.118314],[99.531992,22.949039],[98.898749,23.142722],[98.660262,24.063286],[97.60472,23.897405],[97.724609,25.083637],[98.671838,25.918703],[98.712094,26.743536],[98.68269,27.508812],[98.246231,27.747221],[97.911988,28.335945],[97.327114,28.261583],[96.248833,28.411031],[96.586591,28.83098],[96.117679,29.452802],[95.404802,29.031717],[94.56599,29.277438],[93.413348,28.640629],[92.503119,27.896876],[91.696657,27.771742],[91.258854,28.040614],[90.730514,28.064954],[90.015829,28.296439],[89.47581,28.042759],[88.814248,27.299316],[88.730326,28.086865],[88.120441,27.876542],[86.954517,27.974262],[85.82332,28.203576],[85.011638,28.642774],[84.23458,28.839894],[83.898993,29.320226],[83.337115,29.463732],[82.327513,30.115268],[81.525804,30.422717],[81.111256,30.183481],[79.721367,30.882715],[78.738894,31.515906],[78.458446,32.618164],[79.176129,32.48378],[79.208892,32.994395],[78.811086,33.506198],[78.912269,34.321936],[77.837451,35.49401],[76.192848,35.898403],[75.896897,36.666806],[75.158028,37.133031],[74.980002,37.41999],[74.829986,37.990007],[74.864816,38.378846],[74.257514,38.606507],[73.928852,38.505815],[73.675379,39.431237],[73.960013,39.660008],[73.822244,39.893973],[74.776862,40.366425],[75.467828,40.562072],[76.526368,40.427946],[76.904484,41.066486],[78.187197,41.185316],[78.543661,41.582243],[80.11943,42.123941],[80.25999,42.349999],[80.18015,42.920068],[80.866206,43.180362],[79.966106,44.917517],[81.947071,45.317027],[82.458926,45.53965],[83.180484,47.330031],[85.16429,47.000956],[85.720484,47.452969],[85.768233,48.455751],[86.598776,48.549182],[87.35997,49.214981],[87.751264,49.297198],[88.013832,48.599463],[88.854298,48.069082],[90.280826,47.693549],[90.970809,46.888146],[90.585768,45.719716],[90.94554,45.286073],[92.133891,45.115076],[93.480734,44.975472],[94.688929,44.352332],[95.306875,44.241331],[95.762455,43.319449],[96.349396,42.725635],[97.451757,42.74889],[99.515817,42.524691],[100.845866,42.663804],[101.83304,42.514873],[103.312278,41.907468],[104.522282,41.908347],[104.964994,41.59741],[106.129316,42.134328],[107.744773,42.481516],[109.243596,42.519446],[110.412103,42.871234],[111.129682,43.406834],[111.829588,43.743118],[111.667737,44.073176],[111.348377,44.457442],[111.873306,45.102079],[112.436062,45.011646],[113.463907,44.808893],[114.460332,45.339817],[115.985096,45.727235],[116.717868,46.388202],[117.421701,46.672733],[118.874326,46.805412],[119.66327,46.69268],[119.772824,47.048059],[118.866574,47.74706],[118.064143,48.06673],[117.295507,47.697709],[116.308953,47.85341],[115.742837,47.726545],[115.485282,48.135383],[116.191802,49.134598],[116.678801,49.888531],[117.879244,49.510983],[119.288461,50.142883],[119.279366,50.582908],[120.18205,51.643566],[120.738191,51.964115],[120.725789,52.516226],[120.177089,52.753886],[121.003085,53.251401],[122.245748,53.431726],[123.571507,53.458804],[125.068211,53.161045],[125.946349,52.792799],[126.564399,51.784255],[126.939157,51.353894],[127.287456,50.739797],[127.657407,49.76027]]]]}},\n{\"type\":\"Feature\",\"id\":\"CIV\",\"properties\":{\"name\":\"Ivory Coast\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-2.856125,4.994476],[-3.311084,4.984296],[-4.00882,5.179813],[-4.649917,5.168264],[-5.834496,4.993701],[-6.528769,4.705088],[-7.518941,4.338288],[-7.712159,4.364566],[-7.635368,5.188159],[-7.539715,5.313345],[-7.570153,5.707352],[-7.993693,6.12619],[-8.311348,6.193033],[-8.60288,6.467564],[-8.385452,6.911801],[-8.485446,7.395208],[-8.439298,7.686043],[-8.280703,7.68718],[-8.221792,8.123329],[-8.299049,8.316444],[-8.203499,8.455453],[-7.8321,8.575704],[-8.079114,9.376224],[-8.309616,9.789532],[-8.229337,10.12902],[-8.029944,10.206535],[-7.89959,10.297382],[-7.622759,10.147236],[-6.850507,10.138994],[-6.666461,10.430811],[-6.493965,10.411303],[-6.205223,10.524061],[-6.050452,10.096361],[-5.816926,10.222555],[-5.404342,10.370737],[-4.954653,10.152714],[-4.779884,9.821985],[-4.330247,9.610835],[-3.980449,9.862344],[-3.511899,9.900326],[-2.827496,9.642461],[-2.56219,8.219628],[-2.983585,7.379705],[-3.24437,6.250472],[-2.810701,5.389051],[-2.856125,4.994476]]]}},\n{\"type\":\"Feature\",\"id\":\"CMR\",\"properties\":{\"name\":\"Cameroon\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[13.075822,2.267097],[12.951334,2.321616],[12.35938,2.192812],[11.751665,2.326758],[11.276449,2.261051],[9.649158,2.283866],[9.795196,3.073404],[9.404367,3.734527],[8.948116,3.904129],[8.744924,4.352215],[8.488816,4.495617],[8.500288,4.771983],[8.757533,5.479666],[9.233163,6.444491],[9.522706,6.453482],[10.118277,7.03877],[10.497375,7.055358],[11.058788,6.644427],[11.745774,6.981383],[11.839309,7.397042],[12.063946,7.799808],[12.218872,8.305824],[12.753672,8.717763],[12.955468,9.417772],[13.1676,9.640626],[13.308676,10.160362],[13.57295,10.798566],[14.415379,11.572369],[14.468192,11.904752],[14.577178,12.085361],[14.181336,12.483657],[14.213531,12.802035],[14.495787,12.859396],[14.893386,12.219048],[14.960152,11.555574],[14.923565,10.891325],[15.467873,9.982337],[14.909354,9.992129],[14.627201,9.920919],[14.171466,10.021378],[13.954218,9.549495],[14.544467,8.965861],[14.979996,8.796104],[15.120866,8.38215],[15.436092,7.692812],[15.27946,7.421925],[14.776545,6.408498],[14.53656,6.226959],[14.459407,5.451761],[14.558936,5.030598],[14.478372,4.732605],[14.950953,4.210389],[15.03622,3.851367],[15.405396,3.335301],[15.862732,3.013537],[15.907381,2.557389],[16.012852,2.26764],[15.940919,1.727673],[15.146342,1.964015],[14.337813,2.227875],[13.075822,2.267097]]]}},\n{\"type\":\"Feature\",\"id\":\"COD\",\"properties\":{\"name\":\"Democratic Republic of the Congo\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[30.83386,3.509166],[30.773347,2.339883],[31.174149,2.204465],[30.85267,1.849396],[30.468508,1.583805],[30.086154,1.062313],[29.875779,0.59738],[29.819503,-0.20531],[29.587838,-0.587406],[29.579466,-1.341313],[29.291887,-1.620056],[29.254835,-2.21511],[29.117479,-2.292211],[29.024926,-2.839258],[29.276384,-3.293907],[29.339998,-4.499983],[29.519987,-5.419979],[29.419993,-5.939999],[29.620032,-6.520015],[30.199997,-7.079981],[30.740015,-8.340007],[30.346086,-8.238257],[29.002912,-8.407032],[28.734867,-8.526559],[28.449871,-9.164918],[28.673682,-9.605925],[28.49607,-10.789884],[28.372253,-11.793647],[28.642417,-11.971569],[29.341548,-12.360744],[29.616001,-12.178895],[29.699614,-13.257227],[28.934286,-13.248958],[28.523562,-12.698604],[28.155109,-12.272481],[27.388799,-12.132747],[27.16442,-11.608748],[26.553088,-11.92444],[25.75231,-11.784965],[25.418118,-11.330936],[24.78317,-11.238694],[24.314516,-11.262826],[24.257155,-10.951993],[23.912215,-10.926826],[23.456791,-10.867863],[22.837345,-11.017622],[22.402798,-10.993075],[22.155268,-11.084801],[22.208753,-9.894796],[21.875182,-9.523708],[21.801801,-8.908707],[21.949131,-8.305901],[21.746456,-7.920085],[21.728111,-7.290872],[20.514748,-7.299606],[20.601823,-6.939318],[20.091622,-6.94309],[20.037723,-7.116361],[19.417502,-7.155429],[19.166613,-7.738184],[19.016752,-7.988246],[18.464176,-7.847014],[18.134222,-7.987678],[17.47297,-8.068551],[17.089996,-7.545689],[16.860191,-7.222298],[16.57318,-6.622645],[16.326528,-5.87747],[13.375597,-5.864241],[13.024869,-5.984389],[12.735171,-5.965682],[12.322432,-6.100092],[12.182337,-5.789931],[12.436688,-5.684304],[12.468004,-5.248362],[12.631612,-4.991271],[12.995517,-4.781103],[13.25824,-4.882957],[13.600235,-4.500138],[14.144956,-4.510009],[14.209035,-4.793092],[14.582604,-4.970239],[15.170992,-4.343507],[15.75354,-3.855165],[16.00629,-3.535133],[15.972803,-2.712392],[16.407092,-1.740927],[16.865307,-1.225816],[17.523716,-0.74383],[17.638645,-0.424832],[17.663553,-0.058084],[17.82654,0.288923],[17.774192,0.855659],[17.898835,1.741832],[18.094276,2.365722],[18.393792,2.900443],[18.453065,3.504386],[18.542982,4.201785],[18.932312,4.709506],[19.467784,5.031528],[20.290679,4.691678],[20.927591,4.322786],[21.659123,4.224342],[22.405124,4.02916],[22.704124,4.633051],[22.84148,4.710126],[23.297214,4.609693],[24.410531,5.108784],[24.805029,4.897247],[25.128833,4.927245],[25.278798,5.170408],[25.650455,5.256088],[26.402761,5.150875],[27.044065,5.127853],[27.374226,5.233944],[27.979977,4.408413],[28.428994,4.287155],[28.696678,4.455077],[29.159078,4.389267],[29.715995,4.600805],[29.9535,4.173699],[30.83386,3.509166]]]}},\n{\"type\":\"Feature\",\"id\":\"COG\",\"properties\":{\"name\":\"Republic of the Congo\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[12.995517,-4.781103],[12.62076,-4.438023],[12.318608,-4.60623],[11.914963,-5.037987],[11.093773,-3.978827],[11.855122,-3.426871],[11.478039,-2.765619],[11.820964,-2.514161],[12.495703,-2.391688],[12.575284,-1.948511],[13.109619,-2.42874],[13.992407,-2.470805],[14.29921,-1.998276],[14.425456,-1.333407],[14.316418,-0.552627],[13.843321,0.038758],[14.276266,1.19693],[14.026669,1.395677],[13.282631,1.314184],[13.003114,1.830896],[13.075822,2.267097],[14.337813,2.227875],[15.146342,1.964015],[15.940919,1.727673],[16.012852,2.26764],[16.537058,3.198255],[17.133042,3.728197],[17.8099,3.560196],[18.453065,3.504386],[18.393792,2.900443],[18.094276,2.365722],[17.898835,1.741832],[17.774192,0.855659],[17.82654,0.288923],[17.663553,-0.058084],[17.638645,-0.424832],[17.523716,-0.74383],[16.865307,-1.225816],[16.407092,-1.740927],[15.972803,-2.712392],[16.00629,-3.535133],[15.75354,-3.855165],[15.170992,-4.343507],[14.582604,-4.970239],[14.209035,-4.793092],[14.144956,-4.510009],[13.600235,-4.500138],[13.25824,-4.882957],[12.995517,-4.781103]]]}},\n{\"type\":\"Feature\",\"id\":\"COL\",\"properties\":{\"name\":\"Colombia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-75.373223,-0.152032],[-75.801466,0.084801],[-76.292314,0.416047],[-76.57638,0.256936],[-77.424984,0.395687],[-77.668613,0.825893],[-77.855061,0.809925],[-78.855259,1.380924],[-78.990935,1.69137],[-78.617831,1.766404],[-78.662118,2.267355],[-78.42761,2.629556],[-77.931543,2.696606],[-77.510431,3.325017],[-77.12769,3.849636],[-77.496272,4.087606],[-77.307601,4.667984],[-77.533221,5.582812],[-77.318815,5.845354],[-77.476661,6.691116],[-77.881571,7.223771],[-77.753414,7.70984],[-77.431108,7.638061],[-77.242566,7.935278],[-77.474723,8.524286],[-77.353361,8.670505],[-76.836674,8.638749],[-76.086384,9.336821],[-75.6746,9.443248],[-75.664704,9.774003],[-75.480426,10.61899],[-74.906895,11.083045],[-74.276753,11.102036],[-74.197223,11.310473],[-73.414764,11.227015],[-72.627835,11.731972],[-72.238195,11.95555],[-71.75409,12.437303],[-71.399822,12.376041],[-71.137461,12.112982],[-71.331584,11.776284],[-71.973922,11.608672],[-72.227575,11.108702],[-72.614658,10.821975],[-72.905286,10.450344],[-73.027604,9.73677],[-73.304952,9.152],[-72.78873,9.085027],[-72.660495,8.625288],[-72.439862,8.405275],[-72.360901,8.002638],[-72.479679,7.632506],[-72.444487,7.423785],[-72.198352,7.340431],[-71.960176,6.991615],[-70.674234,7.087785],[-70.093313,6.960376],[-69.38948,6.099861],[-68.985319,6.206805],[-68.265052,6.153268],[-67.695087,6.267318],[-67.34144,6.095468],[-67.521532,5.55687],[-67.744697,5.221129],[-67.823012,4.503937],[-67.621836,3.839482],[-67.337564,3.542342],[-67.303173,3.318454],[-67.809938,2.820655],[-67.447092,2.600281],[-67.181294,2.250638],[-66.876326,1.253361],[-67.065048,1.130112],[-67.259998,1.719999],[-67.53781,2.037163],[-67.868565,1.692455],[-69.816973,1.714805],[-69.804597,1.089081],[-69.218638,0.985677],[-69.252434,0.602651],[-69.452396,0.706159],[-70.015566,0.541414],[-70.020656,-0.185156],[-69.577065,-0.549992],[-69.420486,-1.122619],[-69.444102,-1.556287],[-69.893635,-4.298187],[-70.394044,-3.766591],[-70.692682,-3.742872],[-70.047709,-2.725156],[-70.813476,-2.256865],[-71.413646,-2.342802],[-71.774761,-2.16979],[-72.325787,-2.434218],[-73.070392,-2.308954],[-73.659504,-1.260491],[-74.122395,-1.002833],[-74.441601,-0.53082],[-75.106625,-0.057205],[-75.373223,-0.152032]]]}},\n{\"type\":\"Feature\",\"id\":\"CRI\",\"properties\":{\"name\":\"Costa Rica\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-82.965783,8.225028],[-83.508437,8.446927],[-83.711474,8.656836],[-83.596313,8.830443],[-83.632642,9.051386],[-83.909886,9.290803],[-84.303402,9.487354],[-84.647644,9.615537],[-84.713351,9.908052],[-84.97566,10.086723],[-84.911375,9.795992],[-85.110923,9.55704],[-85.339488,9.834542],[-85.660787,9.933347],[-85.797445,10.134886],[-85.791709,10.439337],[-85.659314,10.754331],[-85.941725,10.895278],[-85.71254,11.088445],[-85.561852,11.217119],[-84.903003,10.952303],[-84.673069,11.082657],[-84.355931,10.999226],[-84.190179,10.79345],[-83.895054,10.726839],[-83.655612,10.938764],[-83.40232,10.395438],[-83.015677,9.992982],[-82.546196,9.566135],[-82.932891,9.476812],[-82.927155,9.07433],[-82.719183,8.925709],[-82.868657,8.807266],[-82.829771,8.626295],[-82.913176,8.423517],[-82.965783,8.225028]]]}},\n{\"type\":\"Feature\",\"id\":\"CUB\",\"properties\":{\"name\":\"Cuba\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-82.268151,23.188611],[-81.404457,23.117271],[-80.618769,23.10598],[-79.679524,22.765303],[-79.281486,22.399202],[-78.347434,22.512166],[-77.993296,22.277194],[-77.146422,21.657851],[-76.523825,21.20682],[-76.19462,21.220565],[-75.598222,21.016624],[-75.67106,20.735091],[-74.933896,20.693905],[-74.178025,20.284628],[-74.296648,20.050379],[-74.961595,19.923435],[-75.63468,19.873774],[-76.323656,19.952891],[-77.755481,19.855481],[-77.085108,20.413354],[-77.492655,20.673105],[-78.137292,20.739949],[-78.482827,21.028613],[-78.719867,21.598114],[-79.285,21.559175],[-80.217475,21.827324],[-80.517535,22.037079],[-81.820943,22.192057],[-82.169992,22.387109],[-81.795002,22.636965],[-82.775898,22.68815],[-83.494459,22.168518],[-83.9088,22.154565],[-84.052151,21.910575],[-84.54703,21.801228],[-84.974911,21.896028],[-84.447062,22.20495],[-84.230357,22.565755],[-83.77824,22.788118],[-83.267548,22.983042],[-82.510436,23.078747],[-82.268151,23.188611]]]}},\n{\"type\":\"Feature\",\"id\":\"-99\",\"properties\":{\"name\":\"Northern Cyprus\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[32.73178,35.140026],[32.802474,35.145504],[32.946961,35.386703],[33.667227,35.373216],[34.576474,35.671596],[33.900804,35.245756],[33.973617,35.058506],[33.86644,35.093595],[33.675392,35.017863],[33.525685,35.038688],[33.475817,35.000345],[33.455922,35.101424],[33.383833,35.162712],[33.190977,35.173125],[32.919572,35.087833],[32.73178,35.140026]]]}},\n{\"type\":\"Feature\",\"id\":\"CYP\",\"properties\":{\"name\":\"Cyprus\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[33.973617,35.058506],[34.004881,34.978098],[32.979827,34.571869],[32.490296,34.701655],[32.256667,35.103232],[32.73178,35.140026],[32.919572,35.087833],[33.190977,35.173125],[33.383833,35.162712],[33.455922,35.101424],[33.475817,35.000345],[33.525685,35.038688],[33.675392,35.017863],[33.86644,35.093595],[33.973617,35.058506]]]}},\n{\"type\":\"Feature\",\"id\":\"CZE\",\"properties\":{\"name\":\"Czech Republic\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[16.960288,48.596982],[16.499283,48.785808],[16.029647,48.733899],[15.253416,49.039074],[14.901447,48.964402],[14.338898,48.555305],[13.595946,48.877172],[13.031329,49.307068],[12.521024,49.547415],[12.415191,49.969121],[12.240111,50.266338],[12.966837,50.484076],[13.338132,50.733234],[14.056228,50.926918],[14.307013,51.117268],[14.570718,51.002339],[15.016996,51.106674],[15.490972,50.78473],[16.238627,50.697733],[16.176253,50.422607],[16.719476,50.215747],[16.868769,50.473974],[17.554567,50.362146],[17.649445,50.049038],[18.392914,49.988629],[18.853144,49.49623],[18.554971,49.495015],[18.399994,49.315001],[18.170498,49.271515],[18.104973,49.043983],[17.913512,48.996493],[17.886485,48.903475],[17.545007,48.800019],[17.101985,48.816969],[16.960288,48.596982]]]}},\n{\"type\":\"Feature\",\"id\":\"DEU\",\"properties\":{\"name\":\"Germany\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[9.921906,54.983104],[9.93958,54.596642],[10.950112,54.363607],[10.939467,54.008693],[11.956252,54.196486],[12.51844,54.470371],[13.647467,54.075511],[14.119686,53.757029],[14.353315,53.248171],[14.074521,52.981263],[14.4376,52.62485],[14.685026,52.089947],[14.607098,51.745188],[15.016996,51.106674],[14.570718,51.002339],[14.307013,51.117268],[14.056228,50.926918],[13.338132,50.733234],[12.966837,50.484076],[12.240111,50.266338],[12.415191,49.969121],[12.521024,49.547415],[13.031329,49.307068],[13.595946,48.877172],[13.243357,48.416115],[12.884103,48.289146],[13.025851,47.637584],[12.932627,47.467646],[12.62076,47.672388],[12.141357,47.703083],[11.426414,47.523766],[10.544504,47.566399],[10.402084,47.302488],[9.896068,47.580197],[9.594226,47.525058],[8.522612,47.830828],[8.317301,47.61358],[7.466759,47.620582],[7.593676,48.333019],[8.099279,49.017784],[6.65823,49.201958],[6.18632,49.463803],[6.242751,49.902226],[6.043073,50.128052],[6.156658,50.803721],[5.988658,51.851616],[6.589397,51.852029],[6.84287,52.22844],[7.092053,53.144043],[6.90514,53.482162],[7.100425,53.693932],[7.936239,53.748296],[8.121706,53.527792],[8.800734,54.020786],[8.572118,54.395646],[8.526229,54.962744],[9.282049,54.830865],[9.921906,54.983104]]]}},\n{\"type\":\"Feature\",\"id\":\"DJI\",\"properties\":{\"name\":\"Djibouti\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[43.081226,12.699639],[43.317852,12.390148],[43.286381,11.974928],[42.715874,11.735641],[43.145305,11.46204],[42.776852,10.926879],[42.55493,11.10511],[42.31414,11.0342],[41.75557,11.05091],[41.73959,11.35511],[41.66176,11.6312],[42,12.1],[42.35156,12.54223],[42.779642,12.455416],[43.081226,12.699639]]]}},\n{\"type\":\"Feature\",\"id\":\"DNK\",\"properties\":{\"name\":\"Denmark\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[12.690006,55.609991],[12.089991,54.800015],[11.043543,55.364864],[10.903914,55.779955],[12.370904,56.111407],[12.690006,55.609991]]],[[[10.912182,56.458621],[10.667804,56.081383],[10.369993,56.190007],[9.649985,55.469999],[9.921906,54.983104],[9.282049,54.830865],[8.526229,54.962744],[8.120311,55.517723],[8.089977,56.540012],[8.256582,56.809969],[8.543438,57.110003],[9.424469,57.172066],[9.775559,57.447941],[10.580006,57.730017],[10.546106,57.215733],[10.25,56.890016],[10.369993,56.609982],[10.912182,56.458621]]]]}},\n{\"type\":\"Feature\",\"id\":\"DOM\",\"properties\":{\"name\":\"Dominican Republic\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-71.712361,19.714456],[-71.587304,19.884911],[-70.806706,19.880286],[-70.214365,19.622885],[-69.950815,19.648],[-69.76925,19.293267],[-69.222126,19.313214],[-69.254346,19.015196],[-68.809412,18.979074],[-68.317943,18.612198],[-68.689316,18.205142],[-69.164946,18.422648],[-69.623988,18.380713],[-69.952934,18.428307],[-70.133233,18.245915],[-70.517137,18.184291],[-70.669298,18.426886],[-70.99995,18.283329],[-71.40021,17.598564],[-71.657662,17.757573],[-71.708305,18.044997],[-71.687738,18.31666],[-71.945112,18.6169],[-71.701303,18.785417],[-71.624873,19.169838],[-71.712361,19.714456]]]}},\n{\"type\":\"Feature\",\"id\":\"DZA\",\"properties\":{\"name\":\"Algeria\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[11.999506,23.471668],[8.572893,21.565661],[5.677566,19.601207],[4.267419,19.155265],[3.158133,19.057364],[3.146661,19.693579],[2.683588,19.85623],[2.060991,20.142233],[1.823228,20.610809],[-1.550055,22.792666],[-4.923337,24.974574],[-8.6844,27.395744],[-8.665124,27.589479],[-8.66559,27.656426],[-8.674116,28.841289],[-7.059228,29.579228],[-6.060632,29.7317],[-5.242129,30.000443],[-4.859646,30.501188],[-3.690441,30.896952],[-3.647498,31.637294],[-3.06898,31.724498],[-2.616605,32.094346],[-1.307899,32.262889],[-1.124551,32.651522],[-1.388049,32.864015],[-1.733455,33.919713],[-1.792986,34.527919],[-2.169914,35.168396],[-1.208603,35.714849],[-0.127454,35.888662],[0.503877,36.301273],[1.466919,36.605647],[3.161699,36.783905],[4.815758,36.865037],[5.32012,36.716519],[6.26182,37.110655],[7.330385,37.118381],[7.737078,36.885708],[8.420964,36.946427],[8.217824,36.433177],[8.376368,35.479876],[8.140981,34.655146],[7.524482,34.097376],[7.612642,33.344115],[8.430473,32.748337],[8.439103,32.506285],[9.055603,32.102692],[9.48214,30.307556],[9.805634,29.424638],[9.859998,28.95999],[9.683885,28.144174],[9.756128,27.688259],[9.629056,27.140953],[9.716286,26.512206],[9.319411,26.094325],[9.910693,25.365455],[9.948261,24.936954],[10.303847,24.379313],[10.771364,24.562532],[11.560669,24.097909],[11.999506,23.471668]]]}},\n{\"type\":\"Feature\",\"id\":\"ECU\",\"properties\":{\"name\":\"Ecuador\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-80.302561,-3.404856],[-79.770293,-2.657512],[-79.986559,-2.220794],[-80.368784,-2.685159],[-80.967765,-2.246943],[-80.764806,-1.965048],[-80.933659,-1.057455],[-80.58337,-0.906663],[-80.399325,-0.283703],[-80.020898,0.36034],[-80.09061,0.768429],[-79.542762,0.982938],[-78.855259,1.380924],[-77.855061,0.809925],[-77.668613,0.825893],[-77.424984,0.395687],[-76.57638,0.256936],[-76.292314,0.416047],[-75.801466,0.084801],[-75.373223,-0.152032],[-75.233723,-0.911417],[-75.544996,-1.56161],[-76.635394,-2.608678],[-77.837905,-3.003021],[-78.450684,-3.873097],[-78.639897,-4.547784],[-79.205289,-4.959129],[-79.624979,-4.454198],[-80.028908,-4.346091],[-80.442242,-4.425724],[-80.469295,-4.059287],[-80.184015,-3.821162],[-80.302561,-3.404856]]]}},\n{\"type\":\"Feature\",\"id\":\"EGY\",\"properties\":{\"name\":\"Egypt\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[34.9226,29.50133],[34.64174,29.09942],[34.42655,28.34399],[34.15451,27.8233],[33.92136,27.6487],[33.58811,27.97136],[33.13676,28.41765],[32.42323,29.85108],[32.32046,29.76043],[32.73482,28.70523],[33.34876,27.69989],[34.10455,26.14227],[34.47387,25.59856],[34.79507,25.03375],[35.69241,23.92671],[35.49372,23.75237],[35.52598,23.10244],[36.69069,22.20485],[36.86623,22],[32.9,22],[29.02,22],[25,22],[25,25.6825],[25,29.238655],[24.70007,30.04419],[24.95762,30.6616],[24.80287,31.08929],[25.16482,31.56915],[26.49533,31.58568],[27.45762,31.32126],[28.45048,31.02577],[28.91353,30.87005],[29.68342,31.18686],[30.09503,31.4734],[30.97693,31.55586],[31.68796,31.4296],[31.96041,30.9336],[32.19247,31.26034],[32.99392,31.02407],[33.7734,30.96746],[34.26544,31.21936],[34.9226,29.50133]]]}},\n{\"type\":\"Feature\",\"id\":\"ERI\",\"properties\":{\"name\":\"Eritrea\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[42.35156,12.54223],[42.00975,12.86582],[41.59856,13.45209],[41.155194,13.77332],[40.8966,14.11864],[40.026219,14.519579],[39.34061,14.53155],[39.0994,14.74064],[38.51295,14.50547],[37.90607,14.95943],[37.59377,14.2131],[36.42951,14.42211],[36.323189,14.822481],[36.75386,16.291874],[36.85253,16.95655],[37.16747,17.26314],[37.904,17.42754],[38.41009,17.998307],[38.990623,16.840626],[39.26611,15.922723],[39.814294,15.435647],[41.179275,14.49108],[41.734952,13.921037],[42.276831,13.343992],[42.589576,13.000421],[43.081226,12.699639],[42.779642,12.455416],[42.35156,12.54223]]]}},\n{\"type\":\"Feature\",\"id\":\"ESP\",\"properties\":{\"name\":\"Spain\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-9.034818,41.880571],[-8.984433,42.592775],[-9.392884,43.026625],[-7.97819,43.748338],[-6.754492,43.567909],[-5.411886,43.57424],[-4.347843,43.403449],[-3.517532,43.455901],[-1.901351,43.422802],[-1.502771,43.034014],[0.338047,42.579546],[0.701591,42.795734],[1.826793,42.343385],[2.985999,42.473015],[3.039484,41.89212],[2.091842,41.226089],[0.810525,41.014732],[0.721331,40.678318],[0.106692,40.123934],[-0.278711,39.309978],[0.111291,38.738514],[-0.467124,38.292366],[-0.683389,37.642354],[-1.438382,37.443064],[-2.146453,36.674144],[-3.415781,36.6589],[-4.368901,36.677839],[-4.995219,36.324708],[-5.37716,35.94685],[-5.866432,36.029817],[-6.236694,36.367677],[-6.520191,36.942913],[-7.453726,37.097788],[-7.537105,37.428904],[-7.166508,37.803894],[-7.029281,38.075764],[-7.374092,38.373059],[-7.098037,39.030073],[-7.498632,39.629571],[-7.066592,39.711892],[-7.026413,40.184524],[-6.86402,40.330872],[-6.851127,41.111083],[-6.389088,41.381815],[-6.668606,41.883387],[-7.251309,41.918346],[-7.422513,41.792075],[-8.013175,41.790886],[-8.263857,42.280469],[-8.671946,42.134689],[-9.034818,41.880571]]]}},\n{\"type\":\"Feature\",\"id\":\"EST\",\"properties\":{\"name\":\"Estonia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[24.312863,57.793424],[24.428928,58.383413],[24.061198,58.257375],[23.42656,58.612753],[23.339795,59.18724],[24.604214,59.465854],[25.864189,59.61109],[26.949136,59.445803],[27.981114,59.475388],[28.131699,59.300825],[27.420166,58.724581],[27.716686,57.791899],[27.288185,57.474528],[26.463532,57.476389],[25.60281,57.847529],[25.164594,57.970157],[24.312863,57.793424]]]}},\n{\"type\":\"Feature\",\"id\":\"ETH\",\"properties\":{\"name\":\"Ethiopia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[37.90607,14.95943],[38.51295,14.50547],[39.0994,14.74064],[39.34061,14.53155],[40.02625,14.51959],[40.8966,14.11864],[41.1552,13.77333],[41.59856,13.45209],[42.00975,12.86582],[42.35156,12.54223],[42,12.1],[41.66176,11.6312],[41.73959,11.35511],[41.75557,11.05091],[42.31414,11.0342],[42.55493,11.10511],[42.776852,10.926879],[42.55876,10.57258],[42.92812,10.02194],[43.29699,9.54048],[43.67875,9.18358],[46.94834,7.99688],[47.78942,8.003],[44.9636,5.00162],[43.66087,4.95755],[42.76967,4.25259],[42.12861,4.23413],[41.855083,3.918912],[41.1718,3.91909],[40.76848,4.25702],[39.85494,3.83879],[39.559384,3.42206],[38.89251,3.50074],[38.67114,3.61607],[38.43697,3.58851],[38.120915,3.598605],[36.855093,4.447864],[36.159079,4.447864],[35.817448,4.776966],[35.817448,5.338232],[35.298007,5.506],[34.70702,6.59422],[34.25032,6.82607],[34.0751,7.22595],[33.56829,7.71334],[32.95418,7.78497],[33.2948,8.35458],[33.8255,8.37916],[33.97498,8.68456],[33.96162,9.58358],[34.25745,10.63009],[34.73115,10.91017],[34.83163,11.31896],[35.26049,12.08286],[35.86363,12.57828],[36.27022,13.56333],[36.42951,14.42211],[37.59377,14.2131],[37.90607,14.95943]]]}},\n{\"type\":\"Feature\",\"id\":\"FIN\",\"properties\":{\"name\":\"Finland\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[28.59193,69.064777],[28.445944,68.364613],[29.977426,67.698297],[29.054589,66.944286],[30.21765,65.80598],[29.54443,64.948672],[30.444685,64.204453],[30.035872,63.552814],[31.516092,62.867687],[31.139991,62.357693],[30.211107,61.780028],[28.069998,60.503517],[26.255173,60.423961],[24.496624,60.057316],[22.869695,59.846373],[22.290764,60.391921],[21.322244,60.72017],[21.544866,61.705329],[21.059211,62.607393],[21.536029,63.189735],[22.442744,63.81781],[24.730512,64.902344],[25.398068,65.111427],[25.294043,65.534346],[23.903379,66.006927],[23.56588,66.396051],[23.539473,67.936009],[21.978535,68.616846],[20.645593,69.106247],[21.244936,69.370443],[22.356238,68.841741],[23.66205,68.891247],[24.735679,68.649557],[25.689213,69.092114],[26.179622,69.825299],[27.732292,70.164193],[29.015573,69.766491],[28.59193,69.064777]]]}},\n{\"type\":\"Feature\",\"id\":\"FJI\",\"properties\":{\"name\":\"Fiji\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[178.3736,-17.33992],[178.71806,-17.62846],[178.55271,-18.15059],[177.93266,-18.28799],[177.38146,-18.16432],[177.28504,-17.72465],[177.67087,-17.38114],[178.12557,-17.50481],[178.3736,-17.33992]]],[[[179.364143,-16.801354],[178.725059,-17.012042],[178.596839,-16.63915],[179.096609,-16.433984],[179.413509,-16.379054],[180,-16.067133],[180,-16.555217],[179.364143,-16.801354]]],[[[-179.917369,-16.501783],[-180,-16.555217],[-180,-16.067133],[-179.79332,-16.020882],[-179.917369,-16.501783]]]]}},\n{\"type\":\"Feature\",\"id\":\"FLK\",\"properties\":{\"name\":\"Falkland Islands\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-61.2,-51.85],[-60,-51.25],[-59.15,-51.5],[-58.55,-51.1],[-57.75,-51.55],[-58.05,-51.9],[-59.4,-52.2],[-59.85,-51.85],[-60.7,-52.3],[-61.2,-51.85]]]}},\n{\"type\":\"Feature\",\"id\":\"FRA\",\"properties\":{\"name\":\"France\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[9.560016,42.152492],[9.229752,41.380007],[8.775723,41.583612],[8.544213,42.256517],[8.746009,42.628122],[9.390001,43.009985],[9.560016,42.152492]]],[[[3.588184,50.378992],[4.286023,49.907497],[4.799222,49.985373],[5.674052,49.529484],[5.897759,49.442667],[6.18632,49.463803],[6.65823,49.201958],[8.099279,49.017784],[7.593676,48.333019],[7.466759,47.620582],[7.192202,47.449766],[6.736571,47.541801],[6.768714,47.287708],[6.037389,46.725779],[6.022609,46.27299],[6.5001,46.429673],[6.843593,45.991147],[6.802355,45.70858],[7.096652,45.333099],[6.749955,45.028518],[7.007562,44.254767],[7.549596,44.127901],[7.435185,43.693845],[6.529245,43.128892],[4.556963,43.399651],[3.100411,43.075201],[2.985999,42.473015],[1.826793,42.343385],[0.701591,42.795734],[0.338047,42.579546],[-1.502771,43.034014],[-1.901351,43.422802],[-1.384225,44.02261],[-1.193798,46.014918],[-2.225724,47.064363],[-2.963276,47.570327],[-4.491555,47.954954],[-4.59235,48.68416],[-3.295814,48.901692],[-1.616511,48.644421],[-1.933494,49.776342],[-0.989469,49.347376],[1.338761,50.127173],[1.639001,50.946606],[2.513573,51.148506],[2.658422,50.796848],[3.123252,50.780363],[3.588184,50.378992]]]]}},\n{\"type\":\"Feature\",\"id\":\"GAB\",\"properties\":{\"name\":\"Gabon\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[11.093773,-3.978827],[10.066135,-2.969483],[9.405245,-2.144313],[8.797996,-1.111301],[8.830087,-0.779074],[9.04842,-0.459351],[9.291351,0.268666],[9.492889,1.01012],[9.830284,1.067894],[11.285079,1.057662],[11.276449,2.261051],[11.751665,2.326758],[12.35938,2.192812],[12.951334,2.321616],[13.075822,2.267097],[13.003114,1.830896],[13.282631,1.314184],[14.026669,1.395677],[14.276266,1.19693],[13.843321,0.038758],[14.316418,-0.552627],[14.425456,-1.333407],[14.29921,-1.998276],[13.992407,-2.470805],[13.109619,-2.42874],[12.575284,-1.948511],[12.495703,-2.391688],[11.820964,-2.514161],[11.478039,-2.765619],[11.855122,-3.426871],[11.093773,-3.978827]]]}},\n{\"type\":\"Feature\",\"id\":\"GBR\",\"properties\":{\"name\":\"United Kingdom\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-5.661949,54.554603],[-6.197885,53.867565],[-6.95373,54.073702],[-7.572168,54.059956],[-7.366031,54.595841],[-7.572168,55.131622],[-6.733847,55.17286],[-5.661949,54.554603]]],[[[-3.005005,58.635],[-4.073828,57.553025],[-3.055002,57.690019],[-1.959281,57.6848],[-2.219988,56.870017],[-3.119003,55.973793],[-2.085009,55.909998],[-2.005676,55.804903],[-1.114991,54.624986],[-0.430485,54.464376],[0.184981,53.325014],[0.469977,52.929999],[1.681531,52.73952],[1.559988,52.099998],[1.050562,51.806761],[1.449865,51.289428],[0.550334,50.765739],[-0.787517,50.774989],[-2.489998,50.500019],[-2.956274,50.69688],[-3.617448,50.228356],[-4.542508,50.341837],[-5.245023,49.96],[-5.776567,50.159678],[-4.30999,51.210001],[-3.414851,51.426009],[-3.422719,51.426848],[-4.984367,51.593466],[-5.267296,51.9914],[-4.222347,52.301356],[-4.770013,52.840005],[-4.579999,53.495004],[-3.093831,53.404547],[-3.09208,53.404441],[-2.945009,53.985],[-3.614701,54.600937],[-3.630005,54.615013],[-4.844169,54.790971],[-5.082527,55.061601],[-4.719112,55.508473],[-5.047981,55.783986],[-5.586398,55.311146],[-5.644999,56.275015],[-6.149981,56.78501],[-5.786825,57.818848],[-5.009999,58.630013],[-4.211495,58.550845],[-3.005005,58.635]]]]}},\n{\"type\":\"Feature\",\"id\":\"GEO\",\"properties\":{\"name\":\"Georgia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[41.554084,41.535656],[41.703171,41.962943],[41.45347,42.645123],[40.875469,43.013628],[40.321394,43.128634],[39.955009,43.434998],[40.076965,43.553104],[40.922185,43.382159],[42.394395,43.220308],[43.756017,42.740828],[43.9312,42.554974],[44.537623,42.711993],[45.470279,42.502781],[45.77641,42.092444],[46.404951,41.860675],[46.145432,41.722802],[46.637908,41.181673],[46.501637,41.064445],[45.962601,41.123873],[45.217426,41.411452],[44.97248,41.248129],[43.582746,41.092143],[42.619549,41.583173],[41.554084,41.535656]]]}},\n{\"type\":\"Feature\",\"id\":\"GHA\",\"properties\":{\"name\":\"Ghana\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[1.060122,5.928837],[-0.507638,5.343473],[-1.063625,5.000548],[-1.964707,4.710462],[-2.856125,4.994476],[-2.810701,5.389051],[-3.24437,6.250472],[-2.983585,7.379705],[-2.56219,8.219628],[-2.827496,9.642461],[-2.963896,10.395335],[-2.940409,10.96269],[-1.203358,11.009819],[-0.761576,10.93693],[-0.438702,11.098341],[0.023803,11.018682],[-0.049785,10.706918],[0.36758,10.191213],[0.365901,9.465004],[0.461192,8.677223],[0.712029,8.312465],[0.490957,7.411744],[0.570384,6.914359],[0.836931,6.279979],[1.060122,5.928837]]]}},\n{\"type\":\"Feature\",\"id\":\"GIN\",\"properties\":{\"name\":\"Guinea\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-8.439298,7.686043],[-8.722124,7.711674],[-8.926065,7.309037],[-9.208786,7.313921],[-9.403348,7.526905],[-9.33728,7.928534],[-9.755342,8.541055],[-10.016567,8.428504],[-10.230094,8.406206],[-10.505477,8.348896],[-10.494315,8.715541],[-10.65477,8.977178],[-10.622395,9.26791],[-10.839152,9.688246],[-11.117481,10.045873],[-11.917277,10.046984],[-12.150338,9.858572],[-12.425929,9.835834],[-12.596719,9.620188],[-12.711958,9.342712],[-13.24655,8.903049],[-13.685154,9.494744],[-14.074045,9.886167],[-14.330076,10.01572],[-14.579699,10.214467],[-14.693232,10.656301],[-14.839554,10.876572],[-15.130311,11.040412],[-14.685687,11.527824],[-14.382192,11.509272],[-14.121406,11.677117],[-13.9008,11.678719],[-13.743161,11.811269],[-13.828272,12.142644],[-13.718744,12.247186],[-13.700476,12.586183],[-13.217818,12.575874],[-12.499051,12.33209],[-12.278599,12.35444],[-12.203565,12.465648],[-11.658301,12.386583],[-11.513943,12.442988],[-11.456169,12.076834],[-11.297574,12.077971],[-11.036556,12.211245],[-10.87083,12.177887],[-10.593224,11.923975],[-10.165214,11.844084],[-9.890993,12.060479],[-9.567912,12.194243],[-9.327616,12.334286],[-9.127474,12.30806],[-8.905265,12.088358],[-8.786099,11.812561],[-8.376305,11.393646],[-8.581305,11.136246],[-8.620321,10.810891],[-8.407311,10.909257],[-8.282357,10.792597],[-8.335377,10.494812],[-8.029944,10.206535],[-8.229337,10.12902],[-8.309616,9.789532],[-8.079114,9.376224],[-7.8321,8.575704],[-8.203499,8.455453],[-8.299049,8.316444],[-8.221792,8.123329],[-8.280703,7.68718],[-8.439298,7.686043]]]}},\n{\"type\":\"Feature\",\"id\":\"GMB\",\"properties\":{\"name\":\"Gambia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-16.841525,13.151394],[-16.713729,13.594959],[-15.624596,13.623587],[-15.39877,13.860369],[-15.081735,13.876492],[-14.687031,13.630357],[-14.376714,13.62568],[-14.046992,13.794068],[-13.844963,13.505042],[-14.277702,13.280585],[-14.712197,13.298207],[-15.141163,13.509512],[-15.511813,13.27857],[-15.691001,13.270353],[-15.931296,13.130284],[-16.841525,13.151394]]]}},\n{\"type\":\"Feature\",\"id\":\"GNB\",\"properties\":{\"name\":\"Guinea Bissau\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-15.130311,11.040412],[-15.66418,11.458474],[-16.085214,11.524594],[-16.314787,11.806515],[-16.308947,11.958702],[-16.613838,12.170911],[-16.677452,12.384852],[-16.147717,12.547762],[-15.816574,12.515567],[-15.548477,12.62817],[-13.700476,12.586183],[-13.718744,12.247186],[-13.828272,12.142644],[-13.743161,11.811269],[-13.9008,11.678719],[-14.121406,11.677117],[-14.382192,11.509272],[-14.685687,11.527824],[-15.130311,11.040412]]]}},\n{\"type\":\"Feature\",\"id\":\"GNQ\",\"properties\":{\"name\":\"Equatorial Guinea\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[9.492889,1.01012],[9.305613,1.160911],[9.649158,2.283866],[11.276449,2.261051],[11.285079,1.057662],[9.830284,1.067894],[9.492889,1.01012]]]}},\n{\"type\":\"Feature\",\"id\":\"GRC\",\"properties\":{\"name\":\"Greece\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[23.69998,35.705004],[24.246665,35.368022],[25.025015,35.424996],[25.769208,35.354018],[25.745023,35.179998],[26.290003,35.29999],[26.164998,35.004995],[24.724982,34.919988],[24.735007,35.084991],[23.514978,35.279992],[23.69998,35.705004]]],[[[26.604196,41.562115],[26.294602,40.936261],[26.056942,40.824123],[25.447677,40.852545],[24.925848,40.947062],[23.714811,40.687129],[24.407999,40.124993],[23.899968,39.962006],[23.342999,39.960998],[22.813988,40.476005],[22.626299,40.256561],[22.849748,39.659311],[23.350027,39.190011],[22.973099,38.970903],[23.530016,38.510001],[24.025025,38.219993],[24.040011,37.655015],[23.115003,37.920011],[23.409972,37.409991],[22.774972,37.30501],[23.154225,36.422506],[22.490028,36.41],[21.670026,36.844986],[21.295011,37.644989],[21.120034,38.310323],[20.730032,38.769985],[20.217712,39.340235],[20.150016,39.624998],[20.615,40.110007],[20.674997,40.435],[20.99999,40.580004],[21.02004,40.842727],[21.674161,40.931275],[22.055378,41.149866],[22.597308,41.130487],[22.76177,41.3048],[22.952377,41.337994],[23.692074,41.309081],[24.492645,41.583896],[25.197201,41.234486],[26.106138,41.328899],[26.117042,41.826905],[26.604196,41.562115]]]]}},\n{\"type\":\"Feature\",\"id\":\"GRL\",\"properties\":{\"name\":\"Greenland\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-46.76379,82.62796],[-43.40644,83.22516],[-39.89753,83.18018],[-38.62214,83.54905],[-35.08787,83.64513],[-27.10046,83.51966],[-20.84539,82.72669],[-22.69182,82.34165],[-26.51753,82.29765],[-31.9,82.2],[-31.39646,82.02154],[-27.85666,82.13178],[-24.84448,81.78697],[-22.90328,82.09317],[-22.07175,81.73449],[-23.16961,81.15271],[-20.62363,81.52462],[-15.76818,81.91245],[-12.77018,81.71885],[-12.20855,81.29154],[-16.28533,80.58004],[-16.85,80.35],[-20.04624,80.17708],[-17.73035,80.12912],[-18.9,79.4],[-19.70499,78.75128],[-19.67353,77.63859],[-18.47285,76.98565],[-20.03503,76.94434],[-21.67944,76.62795],[-19.83407,76.09808],[-19.59896,75.24838],[-20.66818,75.15585],[-19.37281,74.29561],[-21.59422,74.22382],[-20.43454,73.81713],[-20.76234,73.46436],[-22.17221,73.30955],[-23.56593,73.30663],[-22.31311,72.62928],[-22.29954,72.18409],[-24.27834,72.59788],[-24.79296,72.3302],[-23.44296,72.08016],[-22.13281,71.46898],[-21.75356,70.66369],[-23.53603,70.471],[-24.30702,70.85649],[-25.54341,71.43094],[-25.20135,70.75226],[-26.36276,70.22646],[-23.72742,70.18401],[-22.34902,70.12946],[-25.02927,69.2588],[-27.74737,68.47046],[-30.67371,68.12503],[-31.77665,68.12078],[-32.81105,67.73547],[-34.20196,66.67974],[-36.35284,65.9789],[-37.04378,65.93768],[-38.37505,65.69213],[-39.81222,65.45848],[-40.66899,64.83997],[-40.68281,64.13902],[-41.1887,63.48246],[-42.81938,62.68233],[-42.41666,61.90093],[-42.86619,61.07404],[-43.3784,60.09772],[-44.7875,60.03676],[-46.26364,60.85328],[-48.26294,60.85843],[-49.23308,61.40681],[-49.90039,62.38336],[-51.63325,63.62691],[-52.14014,64.27842],[-52.27659,65.1767],[-53.66166,66.09957],[-53.30161,66.8365],[-53.96911,67.18899],[-52.9804,68.35759],[-51.47536,68.72958],[-51.08041,69.14781],[-50.87122,69.9291],[-52.013585,69.574925],[-52.55792,69.42616],[-53.45629,69.283625],[-54.68336,69.61003],[-54.75001,70.28932],[-54.35884,70.821315],[-53.431315,70.835755],[-51.39014,70.56978],[-53.10937,71.20485],[-54.00422,71.54719],[-55,71.406537],[-55.83468,71.65444],[-54.71819,72.58625],[-55.32634,72.95861],[-56.12003,73.64977],[-57.32363,74.71026],[-58.59679,75.09861],[-58.58516,75.51727],[-61.26861,76.10238],[-63.39165,76.1752],[-66.06427,76.13486],[-68.50438,76.06141],[-69.66485,76.37975],[-71.40257,77.00857],[-68.77671,77.32312],[-66.76397,77.37595],[-71.04293,77.63595],[-73.297,78.04419],[-73.15938,78.43271],[-69.37345,78.91388],[-65.7107,79.39436],[-65.3239,79.75814],[-68.02298,80.11721],[-67.15129,80.51582],[-63.68925,81.21396],[-62.23444,81.3211],[-62.65116,81.77042],[-60.28249,82.03363],[-57.20744,82.19074],[-54.13442,82.19962],[-53.04328,81.88833],[-50.39061,82.43883],[-48.00386,82.06481],[-46.59984,81.985945],[-44.523,81.6607],[-46.9007,82.19979],[-46.76379,82.62796]]]}},\n{\"type\":\"Feature\",\"id\":\"GTM\",\"properties\":{\"name\":\"Guatemala\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-90.095555,13.735338],[-90.608624,13.909771],[-91.23241,13.927832],[-91.689747,14.126218],[-92.22775,14.538829],[-92.20323,14.830103],[-92.087216,15.064585],[-92.229249,15.251447],[-91.74796,16.066565],[-90.464473,16.069562],[-90.438867,16.41011],[-90.600847,16.470778],[-90.711822,16.687483],[-91.08167,16.918477],[-91.453921,17.252177],[-91.002269,17.254658],[-91.00152,17.817595],[-90.067934,17.819326],[-89.14308,17.808319],[-89.150806,17.015577],[-89.229122,15.886938],[-88.930613,15.887273],[-88.604586,15.70638],[-88.518364,15.855389],[-88.225023,15.727722],[-88.68068,15.346247],[-89.154811,15.066419],[-89.22522,14.874286],[-89.145535,14.678019],[-89.353326,14.424133],[-89.587343,14.362586],[-89.534219,14.244816],[-89.721934,14.134228],[-90.064678,13.88197],[-90.095555,13.735338]]]}},\n{\"type\":\"Feature\",\"id\":\"GUF\",\"properties\":{\"name\":\"French Guiana\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-52.556425,2.504705],[-52.939657,2.124858],[-53.418465,2.053389],[-53.554839,2.334897],[-53.778521,2.376703],[-54.088063,2.105557],[-54.524754,2.311849],[-54.27123,2.738748],[-54.184284,3.194172],[-54.011504,3.62257],[-54.399542,4.212611],[-54.478633,4.896756],[-53.958045,5.756548],[-53.618453,5.646529],[-52.882141,5.409851],[-51.823343,4.565768],[-51.657797,4.156232],[-52.249338,3.241094],[-52.556425,2.504705]]]}},\n{\"type\":\"Feature\",\"id\":\"GUY\",\"properties\":{\"name\":\"Guyana\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-59.758285,8.367035],[-59.101684,7.999202],[-58.482962,7.347691],[-58.454876,6.832787],[-58.078103,6.809094],[-57.542219,6.321268],[-57.147436,5.97315],[-57.307246,5.073567],[-57.914289,4.812626],[-57.86021,4.576801],[-58.044694,4.060864],[-57.601569,3.334655],[-57.281433,3.333492],[-57.150098,2.768927],[-56.539386,1.899523],[-56.782704,1.863711],[-57.335823,1.948538],[-57.660971,1.682585],[-58.11345,1.507195],[-58.429477,1.463942],[-58.540013,1.268088],[-59.030862,1.317698],[-59.646044,1.786894],[-59.718546,2.24963],[-59.974525,2.755233],[-59.815413,3.606499],[-59.53804,3.958803],[-59.767406,4.423503],[-60.111002,4.574967],[-59.980959,5.014061],[-60.213683,5.244486],[-60.733574,5.200277],[-61.410303,5.959068],[-61.139415,6.234297],[-61.159336,6.696077],[-60.543999,6.856584],[-60.295668,7.043911],[-60.637973,7.415],[-60.550588,7.779603],[-59.758285,8.367035]]]}},\n{\"type\":\"Feature\",\"id\":\"HND\",\"properties\":{\"name\":\"Honduras\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-87.316654,12.984686],[-87.489409,13.297535],[-87.793111,13.38448],[-87.723503,13.78505],[-87.859515,13.893312],[-88.065343,13.964626],[-88.503998,13.845486],[-88.541231,13.980155],[-88.843073,14.140507],[-89.058512,14.340029],[-89.353326,14.424133],[-89.145535,14.678019],[-89.22522,14.874286],[-89.154811,15.066419],[-88.68068,15.346247],[-88.225023,15.727722],[-88.121153,15.688655],[-87.901813,15.864458],[-87.61568,15.878799],[-87.522921,15.797279],[-87.367762,15.84694],[-86.903191,15.756713],[-86.440946,15.782835],[-86.119234,15.893449],[-86.001954,16.005406],[-85.683317,15.953652],[-85.444004,15.885749],[-85.182444,15.909158],[-84.983722,15.995923],[-84.52698,15.857224],[-84.368256,15.835158],[-84.063055,15.648244],[-83.773977,15.424072],[-83.410381,15.270903],[-83.147219,14.995829],[-83.489989,15.016267],[-83.628585,14.880074],[-83.975721,14.749436],[-84.228342,14.748764],[-84.449336,14.621614],[-84.649582,14.666805],[-84.820037,14.819587],[-84.924501,14.790493],[-85.052787,14.551541],[-85.148751,14.560197],[-85.165365,14.35437],[-85.514413,14.079012],[-85.698665,13.960078],[-85.801295,13.836055],[-86.096264,14.038187],[-86.312142,13.771356],[-86.520708,13.778487],[-86.755087,13.754845],[-86.733822,13.263093],[-86.880557,13.254204],[-87.005769,13.025794],[-87.316654,12.984686]]]}},\n{\"type\":\"Feature\",\"id\":\"HRV\",\"properties\":{\"name\":\"Croatia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[18.829838,45.908878],[19.072769,45.521511],[19.390476,45.236516],[19.005486,44.860234],[18.553214,45.08159],[17.861783,45.06774],[17.002146,45.233777],[16.534939,45.211608],[16.318157,45.004127],[15.959367,45.233777],[15.750026,44.818712],[16.23966,44.351143],[16.456443,44.04124],[16.916156,43.667722],[17.297373,43.446341],[17.674922,43.028563],[18.56,42.65],[18.450016,42.479991],[17.50997,42.849995],[16.930006,43.209998],[16.015385,43.507215],[15.174454,44.243191],[15.37625,44.317915],[14.920309,44.738484],[14.901602,45.07606],[14.258748,45.233777],[13.952255,44.802124],[13.656976,45.136935],[13.679403,45.484149],[13.71506,45.500324],[14.411968,45.466166],[14.595109,45.634941],[14.935244,45.471695],[15.327675,45.452316],[15.323954,45.731783],[15.67153,45.834154],[15.768733,46.238108],[16.564808,46.503751],[16.882515,46.380632],[17.630066,45.951769],[18.456062,45.759481],[18.829838,45.908878]]]}},\n{\"type\":\"Feature\",\"id\":\"HTI\",\"properties\":{\"name\":\"Haiti\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-73.189791,19.915684],[-72.579673,19.871501],[-71.712361,19.714456],[-71.624873,19.169838],[-71.701303,18.785417],[-71.945112,18.6169],[-71.687738,18.31666],[-71.708305,18.044997],[-72.372476,18.214961],[-72.844411,18.145611],[-73.454555,18.217906],[-73.922433,18.030993],[-74.458034,18.34255],[-74.369925,18.664908],[-73.449542,18.526053],[-72.694937,18.445799],[-72.334882,18.668422],[-72.79165,19.101625],[-72.784105,19.483591],[-73.415022,19.639551],[-73.189791,19.915684]]]}},\n{\"type\":\"Feature\",\"id\":\"HUN\",\"properties\":{\"name\":\"Hungary\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[16.202298,46.852386],[16.534268,47.496171],[16.340584,47.712902],[16.903754,47.714866],[16.979667,48.123497],[17.488473,47.867466],[17.857133,47.758429],[18.696513,47.880954],[18.777025,48.081768],[19.174365,48.111379],[19.661364,48.266615],[19.769471,48.202691],[20.239054,48.327567],[20.473562,48.56285],[20.801294,48.623854],[21.872236,48.319971],[22.085608,48.422264],[22.64082,48.15024],[22.710531,47.882194],[22.099768,47.672439],[21.626515,46.994238],[21.021952,46.316088],[20.220192,46.127469],[19.596045,46.17173],[18.829838,45.908878],[18.456062,45.759481],[17.630066,45.951769],[16.882515,46.380632],[16.564808,46.503751],[16.370505,46.841327],[16.202298,46.852386]]]}},\n{\"type\":\"Feature\",\"id\":\"IDN\",\"properties\":{\"name\":\"Indonesia\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[120.715609,-10.239581],[120.295014,-10.25865],[118.967808,-9.557969],[119.90031,-9.36134],[120.425756,-9.665921],[120.775502,-9.969675],[120.715609,-10.239581]]],[[[124.43595,-10.140001],[123.579982,-10.359987],[123.459989,-10.239995],[123.550009,-9.900016],[123.980009,-9.290027],[124.968682,-8.89279],[125.07002,-9.089987],[125.08852,-9.393173],[124.43595,-10.140001]]],[[[117.900018,-8.095681],[118.260616,-8.362383],[118.87846,-8.280683],[119.126507,-8.705825],[117.970402,-8.906639],[117.277731,-9.040895],[116.740141,-9.032937],[117.083737,-8.457158],[117.632024,-8.449303],[117.900018,-8.095681]]],[[[122.903537,-8.094234],[122.756983,-8.649808],[121.254491,-8.933666],[119.924391,-8.810418],[119.920929,-8.444859],[120.715092,-8.236965],[121.341669,-8.53674],[122.007365,-8.46062],[122.903537,-8.094234]]],[[[108.623479,-6.777674],[110.539227,-6.877358],[110.759576,-6.465186],[112.614811,-6.946036],[112.978768,-7.594213],[114.478935,-7.776528],[115.705527,-8.370807],[114.564511,-8.751817],[113.464734,-8.348947],[112.559672,-8.376181],[111.522061,-8.302129],[110.58615,-8.122605],[109.427667,-7.740664],[108.693655,-7.6416],[108.277763,-7.766657],[106.454102,-7.3549],[106.280624,-6.9249],[105.365486,-6.851416],[106.051646,-5.895919],[107.265009,-5.954985],[108.072091,-6.345762],[108.486846,-6.421985],[108.623479,-6.777674]]],[[[134.724624,-6.214401],[134.210134,-6.895238],[134.112776,-6.142467],[134.290336,-5.783058],[134.499625,-5.445042],[134.727002,-5.737582],[134.724624,-6.214401]]],[[[127.249215,-3.459065],[126.874923,-3.790983],[126.183802,-3.607376],[125.989034,-3.177273],[127.000651,-3.129318],[127.249215,-3.459065]]],[[[130.471344,-3.093764],[130.834836,-3.858472],[129.990547,-3.446301],[129.155249,-3.362637],[128.590684,-3.428679],[127.898891,-3.393436],[128.135879,-2.84365],[129.370998,-2.802154],[130.471344,-3.093764]]],[[[134.143368,-1.151867],[134.422627,-2.769185],[135.457603,-3.367753],[136.293314,-2.307042],[137.440738,-1.703513],[138.329727,-1.702686],[139.184921,-2.051296],[139.926684,-2.409052],[141.00021,-2.600151],[141.017057,-5.859022],[141.033852,-9.117893],[140.143415,-8.297168],[139.127767,-8.096043],[138.881477,-8.380935],[137.614474,-8.411683],[138.039099,-7.597882],[138.668621,-7.320225],[138.407914,-6.232849],[137.92784,-5.393366],[135.98925,-4.546544],[135.164598,-4.462931],[133.66288,-3.538853],[133.367705,-4.024819],[132.983956,-4.112979],[132.756941,-3.746283],[132.753789,-3.311787],[131.989804,-2.820551],[133.066845,-2.460418],[133.780031,-2.479848],[133.696212,-2.214542],[132.232373,-2.212526],[131.836222,-1.617162],[130.94284,-1.432522],[130.519558,-0.93772],[131.867538,-0.695461],[132.380116,-0.369538],[133.985548,-0.78021],[134.143368,-1.151867]]],[[[125.240501,1.419836],[124.437035,0.427881],[123.685505,0.235593],[122.723083,0.431137],[121.056725,0.381217],[120.183083,0.237247],[120.04087,-0.519658],[120.935905,-1.408906],[121.475821,-0.955962],[123.340565,-0.615673],[123.258399,-1.076213],[122.822715,-0.930951],[122.38853,-1.516858],[121.508274,-1.904483],[122.454572,-3.186058],[122.271896,-3.5295],[123.170963,-4.683693],[123.162333,-5.340604],[122.628515,-5.634591],[122.236394,-5.282933],[122.719569,-4.464172],[121.738234,-4.851331],[121.489463,-4.574553],[121.619171,-4.188478],[120.898182,-3.602105],[120.972389,-2.627643],[120.305453,-2.931604],[120.390047,-4.097579],[120.430717,-5.528241],[119.796543,-5.6734],[119.366906,-5.379878],[119.653606,-4.459417],[119.498835,-3.494412],[119.078344,-3.487022],[118.767769,-2.801999],[119.180974,-2.147104],[119.323394,-1.353147],[119.825999,0.154254],[120.035702,0.566477],[120.885779,1.309223],[121.666817,1.013944],[122.927567,0.875192],[124.077522,0.917102],[125.065989,1.643259],[125.240501,1.419836]]],[[[128.688249,1.132386],[128.635952,0.258486],[128.12017,0.356413],[127.968034,-0.252077],[128.379999,-0.780004],[128.100016,-0.899996],[127.696475,-0.266598],[127.39949,1.011722],[127.600512,1.810691],[127.932378,2.174596],[128.004156,1.628531],[128.594559,1.540811],[128.688249,1.132386]]],[[[117.875627,1.827641],[118.996747,0.902219],[117.811858,0.784242],[117.478339,0.102475],[117.521644,-0.803723],[116.560048,-1.487661],[116.533797,-2.483517],[116.148084,-4.012726],[116.000858,-3.657037],[114.864803,-4.106984],[114.468652,-3.495704],[113.755672,-3.43917],[113.256994,-3.118776],[112.068126,-3.478392],[111.703291,-2.994442],[111.04824,-3.049426],[110.223846,-2.934032],[110.070936,-1.592874],[109.571948,-1.314907],[109.091874,-0.459507],[108.952658,0.415375],[109.069136,1.341934],[109.66326,2.006467],[109.830227,1.338136],[110.514061,0.773131],[111.159138,0.976478],[111.797548,0.904441],[112.380252,1.410121],[112.859809,1.49779],[113.80585,1.217549],[114.621355,1.430688],[115.134037,2.821482],[115.519078,3.169238],[115.865517,4.306559],[117.015214,4.306094],[117.882035,4.137551],[117.313232,3.234428],[118.04833,2.28769],[117.875627,1.827641]]],[[[105.817655,-5.852356],[104.710384,-5.873285],[103.868213,-5.037315],[102.584261,-4.220259],[102.156173,-3.614146],[101.399113,-2.799777],[100.902503,-2.050262],[100.141981,-0.650348],[99.26374,0.183142],[98.970011,1.042882],[98.601351,1.823507],[97.699598,2.453184],[97.176942,3.308791],[96.424017,3.86886],[95.380876,4.970782],[95.293026,5.479821],[95.936863,5.439513],[97.484882,5.246321],[98.369169,4.26837],[99.142559,3.59035],[99.693998,3.174329],[100.641434,2.099381],[101.658012,2.083697],[102.498271,1.3987],[103.07684,0.561361],[103.838396,0.104542],[103.437645,-0.711946],[104.010789,-1.059212],[104.369991,-1.084843],[104.53949,-1.782372],[104.887893,-2.340425],[105.622111,-2.428844],[106.108593,-3.061777],[105.857446,-4.305525],[105.817655,-5.852356]]]]}},\n{\"type\":\"Feature\",\"id\":\"IND\",\"properties\":{\"name\":\"India\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[77.837451,35.49401],[78.912269,34.321936],[78.811086,33.506198],[79.208892,32.994395],[79.176129,32.48378],[78.458446,32.618164],[78.738894,31.515906],[79.721367,30.882715],[81.111256,30.183481],[80.476721,29.729865],[80.088425,28.79447],[81.057203,28.416095],[81.999987,27.925479],[83.304249,27.364506],[84.675018,27.234901],[85.251779,26.726198],[86.024393,26.630985],[87.227472,26.397898],[88.060238,26.414615],[88.174804,26.810405],[88.043133,27.445819],[88.120441,27.876542],[88.730326,28.086865],[88.814248,27.299316],[88.835643,27.098966],[89.744528,26.719403],[90.373275,26.875724],[91.217513,26.808648],[92.033484,26.83831],[92.103712,27.452614],[91.696657,27.771742],[92.503119,27.896876],[93.413348,28.640629],[94.56599,29.277438],[95.404802,29.031717],[96.117679,29.452802],[96.586591,28.83098],[96.248833,28.411031],[97.327114,28.261583],[97.402561,27.882536],[97.051989,27.699059],[97.133999,27.083774],[96.419366,27.264589],[95.124768,26.573572],[95.155153,26.001307],[94.603249,25.162495],[94.552658,24.675238],[94.106742,23.850741],[93.325188,24.078556],[93.286327,23.043658],[93.060294,22.703111],[93.166128,22.27846],[92.672721,22.041239],[92.146035,23.627499],[91.869928,23.624346],[91.706475,22.985264],[91.158963,23.503527],[91.46773,24.072639],[91.915093,24.130414],[92.376202,24.976693],[91.799596,25.147432],[90.872211,25.132601],[89.920693,25.26975],[89.832481,25.965082],[89.355094,26.014407],[88.563049,26.446526],[88.209789,25.768066],[88.931554,25.238692],[88.306373,24.866079],[88.084422,24.501657],[88.69994,24.233715],[88.52977,23.631142],[88.876312,22.879146],[89.031961,22.055708],[88.888766,21.690588],[88.208497,21.703172],[86.975704,21.495562],[87.033169,20.743308],[86.499351,20.151638],[85.060266,19.478579],[83.941006,18.30201],[83.189217,17.671221],[82.192792,17.016636],[82.191242,16.556664],[81.692719,16.310219],[80.791999,15.951972],[80.324896,15.899185],[80.025069,15.136415],[80.233274,13.835771],[80.286294,13.006261],[79.862547,12.056215],[79.857999,10.357275],[79.340512,10.308854],[78.885345,9.546136],[79.18972,9.216544],[78.277941,8.933047],[77.941165,8.252959],[77.539898,7.965535],[76.592979,8.899276],[76.130061,10.29963],[75.746467,11.308251],[75.396101,11.781245],[74.864816,12.741936],[74.616717,13.992583],[74.443859,14.617222],[73.534199,15.990652],[73.119909,17.92857],[72.820909,19.208234],[72.824475,20.419503],[72.630533,21.356009],[71.175273,20.757441],[70.470459,20.877331],[69.16413,22.089298],[69.644928,22.450775],[69.349597,22.84318],[68.176645,23.691965],[68.842599,24.359134],[71.04324,24.356524],[70.844699,25.215102],[70.282873,25.722229],[70.168927,26.491872],[69.514393,26.940966],[70.616496,27.989196],[71.777666,27.91318],[72.823752,28.961592],[73.450638,29.976413],[74.42138,30.979815],[74.405929,31.692639],[75.258642,32.271105],[74.451559,32.7649],[74.104294,33.441473],[73.749948,34.317699],[74.240203,34.748887],[75.757061,34.504923],[76.871722,34.653544],[77.837451,35.49401]]]}},\n{\"type\":\"Feature\",\"id\":\"IRL\",\"properties\":{\"name\":\"Ireland\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-6.197885,53.867565],[-6.032985,53.153164],[-6.788857,52.260118],[-8.561617,51.669301],[-9.977086,51.820455],[-9.166283,52.864629],[-9.688525,53.881363],[-8.327987,54.664519],[-7.572168,55.131622],[-7.366031,54.595841],[-7.572168,54.059956],[-6.95373,54.073702],[-6.197885,53.867565]]]}},\n{\"type\":\"Feature\",\"id\":\"IRN\",\"properties\":{\"name\":\"Iran\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[53.921598,37.198918],[54.800304,37.392421],[55.511578,37.964117],[56.180375,37.935127],[56.619366,38.121394],[57.330434,38.029229],[58.436154,37.522309],[59.234762,37.412988],[60.377638,36.527383],[61.123071,36.491597],[61.210817,35.650072],[60.803193,34.404102],[60.52843,33.676446],[60.9637,33.528832],[60.536078,32.981269],[60.863655,32.18292],[60.941945,31.548075],[61.699314,31.379506],[61.781222,30.73585],[60.874248,29.829239],[61.369309,29.303276],[61.771868,28.699334],[62.72783,28.259645],[62.755426,27.378923],[63.233898,27.217047],[63.316632,26.756532],[61.874187,26.239975],[61.497363,25.078237],[59.616134,25.380157],[58.525761,25.609962],[57.397251,25.739902],[56.970766,26.966106],[56.492139,27.143305],[55.72371,26.964633],[54.71509,26.480658],[53.493097,26.812369],[52.483598,27.580849],[51.520763,27.86569],[50.852948,28.814521],[50.115009,30.147773],[49.57685,29.985715],[48.941333,30.31709],[48.567971,29.926778],[48.014568,30.452457],[48.004698,30.985137],[47.685286,30.984853],[47.849204,31.709176],[47.334661,32.469155],[46.109362,33.017287],[45.416691,33.967798],[45.64846,34.748138],[46.151788,35.093259],[46.07634,35.677383],[45.420618,35.977546],[44.77267,37.17045],[44.225756,37.971584],[44.421403,38.281281],[44.109225,39.428136],[44.79399,39.713003],[44.952688,39.335765],[45.457722,38.874139],[46.143623,38.741201],[46.50572,38.770605],[47.685079,39.508364],[48.060095,39.582235],[48.355529,39.288765],[48.010744,38.794015],[48.634375,38.270378],[48.883249,38.320245],[49.199612,37.582874],[50.147771,37.374567],[50.842354,36.872814],[52.264025,36.700422],[53.82579,36.965031],[53.921598,37.198918]]]}},\n{\"type\":\"Feature\",\"id\":\"IRQ\",\"properties\":{\"name\":\"Iraq\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[45.420618,35.977546],[46.07634,35.677383],[46.151788,35.093259],[45.64846,34.748138],[45.416691,33.967798],[46.109362,33.017287],[47.334661,32.469155],[47.849204,31.709176],[47.685286,30.984853],[48.004698,30.985137],[48.014568,30.452457],[48.567971,29.926778],[47.974519,29.975819],[47.302622,30.05907],[46.568713,29.099025],[44.709499,29.178891],[41.889981,31.190009],[40.399994,31.889992],[39.195468,32.161009],[38.792341,33.378686],[41.006159,34.419372],[41.383965,35.628317],[41.289707,36.358815],[41.837064,36.605854],[42.349591,37.229873],[42.779126,37.385264],[43.942259,37.256228],[44.293452,37.001514],[44.772699,37.170445],[45.420618,35.977546]]]}},\n{\"type\":\"Feature\",\"id\":\"ISL\",\"properties\":{\"name\":\"Iceland\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-14.508695,66.455892],[-14.739637,65.808748],[-13.609732,65.126671],[-14.909834,64.364082],[-17.794438,63.678749],[-18.656246,63.496383],[-19.972755,63.643635],[-22.762972,63.960179],[-21.778484,64.402116],[-23.955044,64.89113],[-22.184403,65.084968],[-22.227423,65.378594],[-24.326184,65.611189],[-23.650515,66.262519],[-22.134922,66.410469],[-20.576284,65.732112],[-19.056842,66.276601],[-17.798624,65.993853],[-16.167819,66.526792],[-14.508695,66.455892]]]}},\n{\"type\":\"Feature\",\"id\":\"ISR\",\"properties\":{\"name\":\"Israel\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[35.719918,32.709192],[35.545665,32.393992],[35.18393,32.532511],[34.974641,31.866582],[35.225892,31.754341],[34.970507,31.616778],[34.927408,31.353435],[35.397561,31.489086],[35.420918,31.100066],[34.922603,29.501326],[34.265433,31.219361],[34.556372,31.548824],[34.488107,31.605539],[34.752587,32.072926],[34.955417,32.827376],[35.098457,33.080539],[35.126053,33.0909],[35.460709,33.08904],[35.552797,33.264275],[35.821101,33.277426],[35.836397,32.868123],[35.700798,32.716014],[35.719918,32.709192]]]}},\n{\"type\":\"Feature\",\"id\":\"ITA\",\"properties\":{\"name\":\"Italy\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[15.520376,38.231155],[15.160243,37.444046],[15.309898,37.134219],[15.099988,36.619987],[14.335229,36.996631],[13.826733,37.104531],[12.431004,37.61295],[12.570944,38.126381],[13.741156,38.034966],[14.761249,38.143874],[15.520376,38.231155]]],[[[9.210012,41.209991],[9.809975,40.500009],[9.669519,39.177376],[9.214818,39.240473],[8.806936,38.906618],[8.428302,39.171847],[8.388253,40.378311],[8.159998,40.950007],[8.709991,40.899984],[9.210012,41.209991]]],[[[12.376485,46.767559],[13.806475,46.509306],[13.69811,46.016778],[13.93763,45.591016],[13.141606,45.736692],[12.328581,45.381778],[12.383875,44.885374],[12.261453,44.600482],[12.589237,44.091366],[13.526906,43.587727],[14.029821,42.761008],[15.14257,41.95514],[15.926191,41.961315],[16.169897,41.740295],[15.889346,41.541082],[16.785002,41.179606],[17.519169,40.877143],[18.376687,40.355625],[18.480247,40.168866],[18.293385,39.810774],[17.73838,40.277671],[16.869596,40.442235],[16.448743,39.795401],[17.17149,39.4247],[17.052841,38.902871],[16.635088,38.843572],[16.100961,37.985899],[15.684087,37.908849],[15.687963,38.214593],[15.891981,38.750942],[16.109332,38.964547],[15.718814,39.544072],[15.413613,40.048357],[14.998496,40.172949],[14.703268,40.60455],[14.060672,40.786348],[13.627985,41.188287],[12.888082,41.25309],[12.106683,41.704535],[11.191906,42.355425],[10.511948,42.931463],[10.200029,43.920007],[9.702488,44.036279],[8.888946,44.366336],[8.428561,44.231228],[7.850767,43.767148],[7.435185,43.693845],[7.549596,44.127901],[7.007562,44.254767],[6.749955,45.028518],[7.096652,45.333099],[6.802355,45.70858],[6.843593,45.991147],[7.273851,45.776948],[7.755992,45.82449],[8.31663,46.163642],[8.489952,46.005151],[8.966306,46.036932],[9.182882,46.440215],[9.922837,46.314899],[10.363378,46.483571],[10.442701,46.893546],[11.048556,46.751359],[11.164828,46.941579],[12.153088,47.115393],[12.376485,46.767559]]]]}},\n{\"type\":\"Feature\",\"id\":\"JAM\",\"properties\":{\"name\":\"Jamaica\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-77.569601,18.490525],[-76.896619,18.400867],[-76.365359,18.160701],[-76.199659,17.886867],[-76.902561,17.868238],[-77.206341,17.701116],[-77.766023,17.861597],[-78.337719,18.225968],[-78.217727,18.454533],[-77.797365,18.524218],[-77.569601,18.490525]]]}},\n{\"type\":\"Feature\",\"id\":\"JOR\",\"properties\":{\"name\":\"Jordan\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[35.545665,32.393992],[35.719918,32.709192],[36.834062,32.312938],[38.792341,33.378686],[39.195468,32.161009],[39.004886,32.010217],[37.002166,31.508413],[37.998849,30.5085],[37.66812,30.338665],[37.503582,30.003776],[36.740528,29.865283],[36.501214,29.505254],[36.068941,29.197495],[34.956037,29.356555],[34.922603,29.501326],[35.420918,31.100066],[35.397561,31.489086],[35.545252,31.782505],[35.545665,32.393992]]]}},\n{\"type\":\"Feature\",\"id\":\"JPN\",\"properties\":{\"name\":\"Japan\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[134.638428,34.149234],[134.766379,33.806335],[134.203416,33.201178],[133.79295,33.521985],[133.280268,33.28957],[133.014858,32.704567],[132.363115,32.989382],[132.371176,33.463642],[132.924373,34.060299],[133.492968,33.944621],[133.904106,34.364931],[134.638428,34.149234]]],[[[140.976388,37.142074],[140.59977,36.343983],[140.774074,35.842877],[140.253279,35.138114],[138.975528,34.6676],[137.217599,34.606286],[135.792983,33.464805],[135.120983,33.849071],[135.079435,34.596545],[133.340316,34.375938],[132.156771,33.904933],[130.986145,33.885761],[132.000036,33.149992],[131.33279,31.450355],[130.686318,31.029579],[130.20242,31.418238],[130.447676,32.319475],[129.814692,32.61031],[129.408463,33.296056],[130.353935,33.604151],[130.878451,34.232743],[131.884229,34.749714],[132.617673,35.433393],[134.608301,35.731618],[135.677538,35.527134],[136.723831,37.304984],[137.390612,36.827391],[138.857602,37.827485],[139.426405,38.215962],[140.05479,39.438807],[139.883379,40.563312],[140.305783,41.195005],[141.368973,41.37856],[141.914263,39.991616],[141.884601,39.180865],[140.959489,38.174001],[140.976388,37.142074]]],[[[143.910162,44.1741],[144.613427,43.960883],[145.320825,44.384733],[145.543137,43.262088],[144.059662,42.988358],[143.18385,41.995215],[141.611491,42.678791],[141.067286,41.584594],[139.955106,41.569556],[139.817544,42.563759],[140.312087,43.333273],[141.380549,43.388825],[141.671952,44.772125],[141.967645,45.551483],[143.14287,44.510358],[143.910162,44.1741]]]]}},\n{\"type\":\"Feature\",\"id\":\"KAZ\",\"properties\":{\"name\":\"Kazakhstan\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[70.962315,42.266154],[70.388965,42.081308],[69.070027,41.384244],[68.632483,40.668681],[68.259896,40.662325],[67.985856,41.135991],[66.714047,41.168444],[66.510649,41.987644],[66.023392,41.994646],[66.098012,42.99766],[64.900824,43.728081],[63.185787,43.650075],[62.0133,43.504477],[61.05832,44.405817],[60.239972,44.784037],[58.689989,45.500014],[58.503127,45.586804],[55.928917,44.995858],[55.968191,41.308642],[55.455251,41.259859],[54.755345,42.043971],[54.079418,42.324109],[52.944293,42.116034],[52.50246,41.783316],[52.446339,42.027151],[52.692112,42.443895],[52.501426,42.792298],[51.342427,43.132975],[50.891292,44.031034],[50.339129,44.284016],[50.305643,44.609836],[51.278503,44.514854],[51.316899,45.245998],[52.16739,45.408391],[53.040876,45.259047],[53.220866,46.234646],[53.042737,46.853006],[52.042023,46.804637],[51.191945,47.048705],[50.034083,46.60899],[49.10116,46.39933],[48.593241,46.561034],[48.694734,47.075628],[48.057253,47.743753],[47.315231,47.715847],[46.466446,48.394152],[47.043672,49.152039],[46.751596,49.356006],[47.54948,50.454698],[48.577841,49.87476],[48.702382,50.605128],[50.766648,51.692762],[52.328724,51.718652],[54.532878,51.02624],[55.716941,50.621717],[56.777961,51.043551],[58.363291,51.063653],[59.642282,50.545442],[59.932807,50.842194],[61.337424,50.79907],[61.588003,51.272659],[59.967534,51.96042],[60.927269,52.447548],[60.739993,52.719986],[61.699986,52.979996],[60.978066,53.664993],[61.436591,54.006265],[65.178534,54.354228],[65.666876,54.601267],[68.1691,54.970392],[69.068167,55.38525],[70.865267,55.169734],[71.180131,54.133285],[72.22415,54.376655],[73.508516,54.035617],[73.425679,53.48981],[74.384845,53.546861],[76.8911,54.490524],[76.525179,54.177003],[77.800916,53.404415],[80.03556,50.864751],[80.568447,51.388336],[81.945986,50.812196],[83.383004,51.069183],[83.935115,50.889246],[84.416377,50.3114],[85.11556,50.117303],[85.54127,49.692859],[86.829357,49.826675],[87.35997,49.214981],[86.598776,48.549182],[85.768233,48.455751],[85.720484,47.452969],[85.16429,47.000956],[83.180484,47.330031],[82.458926,45.53965],[81.947071,45.317027],[79.966106,44.917517],[80.866206,43.180362],[80.18015,42.920068],[80.25999,42.349999],[79.643645,42.496683],[79.142177,42.856092],[77.658392,42.960686],[76.000354,42.988022],[75.636965,42.8779],[74.212866,43.298339],[73.645304,43.091272],[73.489758,42.500894],[71.844638,42.845395],[71.186281,42.704293],[70.962315,42.266154]]]}},\n{\"type\":\"Feature\",\"id\":\"KEN\",\"properties\":{\"name\":\"Kenya\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[40.993,-0.85829],[41.58513,-1.68325],[40.88477,-2.08255],[40.63785,-2.49979],[40.26304,-2.57309],[40.12119,-3.27768],[39.80006,-3.68116],[39.60489,-4.34653],[39.20222,-4.67677],[37.7669,-3.67712],[37.69869,-3.09699],[34.07262,-1.05982],[33.903711,-0.95],[33.893569,0.109814],[34.18,0.515],[34.6721,1.17694],[35.03599,1.90584],[34.59607,3.05374],[34.47913,3.5556],[34.005,4.249885],[34.620196,4.847123],[35.298007,5.506],[35.817448,5.338232],[35.817448,4.776966],[36.159079,4.447864],[36.855093,4.447864],[38.120915,3.598605],[38.43697,3.58851],[38.67114,3.61607],[38.89251,3.50074],[39.559384,3.42206],[39.85494,3.83879],[40.76848,4.25702],[41.1718,3.91909],[41.855083,3.918912],[40.98105,2.78452],[40.993,-0.85829]]]}},\n{\"type\":\"Feature\",\"id\":\"KGZ\",\"properties\":{\"name\":\"Kyrgyzstan\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[70.962315,42.266154],[71.186281,42.704293],[71.844638,42.845395],[73.489758,42.500894],[73.645304,43.091272],[74.212866,43.298339],[75.636965,42.8779],[76.000354,42.988022],[77.658392,42.960686],[79.142177,42.856092],[79.643645,42.496683],[80.25999,42.349999],[80.11943,42.123941],[78.543661,41.582243],[78.187197,41.185316],[76.904484,41.066486],[76.526368,40.427946],[75.467828,40.562072],[74.776862,40.366425],[73.822244,39.893973],[73.960013,39.660008],[73.675379,39.431237],[71.784694,39.279463],[70.549162,39.604198],[69.464887,39.526683],[69.55961,40.103211],[70.648019,39.935754],[71.014198,40.244366],[71.774875,40.145844],[73.055417,40.866033],[71.870115,41.3929],[71.157859,41.143587],[70.420022,41.519998],[71.259248,42.167711],[70.962315,42.266154]]]}},\n{\"type\":\"Feature\",\"id\":\"KHM\",\"properties\":{\"name\":\"Cambodia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[103.49728,10.632555],[103.09069,11.153661],[102.584932,12.186595],[102.348099,13.394247],[102.988422,14.225721],[104.281418,14.416743],[105.218777,14.273212],[106.043946,13.881091],[106.496373,14.570584],[107.382727,14.202441],[107.614548,13.535531],[107.491403,12.337206],[105.810524,11.567615],[106.24967,10.961812],[105.199915,10.88931],[104.334335,10.486544],[103.49728,10.632555]]]}},\n{\"type\":\"Feature\",\"id\":\"KOR\",\"properties\":{\"name\":\"South Korea\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[128.349716,38.612243],[129.21292,37.432392],[129.46045,36.784189],[129.468304,35.632141],[129.091377,35.082484],[128.18585,34.890377],[127.386519,34.475674],[126.485748,34.390046],[126.37392,34.93456],[126.559231,35.684541],[126.117398,36.725485],[126.860143,36.893924],[126.174759,37.749686],[126.237339,37.840378],[126.68372,37.804773],[127.073309,38.256115],[127.780035,38.304536],[128.205746,38.370397],[128.349716,38.612243]]]}},\n{\"type\":\"Feature\",\"id\":\"CS-KM\",\"properties\":{\"name\":\"Kosovo\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[20.76216,42.05186],[20.71731,41.84711],[20.59023,41.85541],[20.52295,42.21787],[20.28374,42.32025],[20.0707,42.58863],[20.25758,42.81275],[20.49679,42.88469],[20.63508,43.21671],[20.81448,43.27205],[20.95651,43.13094],[21.143395,43.068685],[21.27421,42.90959],[21.43866,42.86255],[21.63302,42.67717],[21.77505,42.6827],[21.66292,42.43922],[21.54332,42.32025],[21.576636,42.245224],[21.3527,42.2068],[20.76216,42.05186]]]}},\n{\"type\":\"Feature\",\"id\":\"KWT\",\"properties\":{\"name\":\"Kuwait\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[47.974519,29.975819],[48.183189,29.534477],[48.093943,29.306299],[48.416094,28.552004],[47.708851,28.526063],[47.459822,29.002519],[46.568713,29.099025],[47.302622,30.05907],[47.974519,29.975819]]]}},\n{\"type\":\"Feature\",\"id\":\"LAO\",\"properties\":{\"name\":\"Laos\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[105.218777,14.273212],[105.544338,14.723934],[105.589039,15.570316],[104.779321,16.441865],[104.716947,17.428859],[103.956477,18.240954],[103.200192,18.309632],[102.998706,17.961695],[102.413005,17.932782],[102.113592,18.109102],[101.059548,17.512497],[101.035931,18.408928],[101.282015,19.462585],[100.606294,19.508344],[100.548881,20.109238],[100.115988,20.41785],[100.329101,20.786122],[101.180005,21.436573],[101.270026,21.201652],[101.80312,21.174367],[101.652018,22.318199],[102.170436,22.464753],[102.754896,21.675137],[103.203861,20.766562],[104.435,20.758733],[104.822574,19.886642],[104.183388,19.624668],[103.896532,19.265181],[105.094598,18.666975],[105.925762,17.485315],[106.556008,16.604284],[107.312706,15.908538],[107.564525,15.202173],[107.382727,14.202441],[106.496373,14.570584],[106.043946,13.881091],[105.218777,14.273212]]]}},\n{\"type\":\"Feature\",\"id\":\"LBN\",\"properties\":{\"name\":\"Lebanon\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[35.821101,33.277426],[35.552797,33.264275],[35.460709,33.08904],[35.126053,33.0909],[35.482207,33.90545],[35.979592,34.610058],[35.998403,34.644914],[36.448194,34.593935],[36.61175,34.201789],[36.06646,33.824912],[35.821101,33.277426]]]}},\n{\"type\":\"Feature\",\"id\":\"LBR\",\"properties\":{\"name\":\"Liberia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-7.712159,4.364566],[-7.974107,4.355755],[-9.004794,4.832419],[-9.91342,5.593561],[-10.765384,6.140711],[-11.438779,6.785917],[-11.199802,7.105846],[-11.146704,7.396706],[-10.695595,7.939464],[-10.230094,8.406206],[-10.016567,8.428504],[-9.755342,8.541055],[-9.33728,7.928534],[-9.403348,7.526905],[-9.208786,7.313921],[-8.926065,7.309037],[-8.722124,7.711674],[-8.439298,7.686043],[-8.485446,7.395208],[-8.385452,6.911801],[-8.60288,6.467564],[-8.311348,6.193033],[-7.993693,6.12619],[-7.570153,5.707352],[-7.539715,5.313345],[-7.635368,5.188159],[-7.712159,4.364566]]]}},\n{\"type\":\"Feature\",\"id\":\"LBY\",\"properties\":{\"name\":\"Libya\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[14.8513,22.86295],[14.143871,22.491289],[13.581425,23.040506],[11.999506,23.471668],[11.560669,24.097909],[10.771364,24.562532],[10.303847,24.379313],[9.948261,24.936954],[9.910693,25.365455],[9.319411,26.094325],[9.716286,26.512206],[9.629056,27.140953],[9.756128,27.688259],[9.683885,28.144174],[9.859998,28.95999],[9.805634,29.424638],[9.48214,30.307556],[9.970017,30.539325],[10.056575,30.961831],[9.950225,31.37607],[10.636901,31.761421],[10.94479,32.081815],[11.432253,32.368903],[11.488787,33.136996],[12.66331,32.79278],[13.08326,32.87882],[13.91868,32.71196],[15.24563,32.26508],[15.71394,31.37626],[16.61162,31.18218],[18.02109,30.76357],[19.08641,30.26639],[19.57404,30.52582],[20.05335,30.98576],[19.82033,31.75179],[20.13397,32.2382],[20.85452,32.7068],[21.54298,32.8432],[22.89576,32.63858],[23.2368,32.19149],[23.60913,32.18726],[23.9275,32.01667],[24.92114,31.89936],[25.16482,31.56915],[24.80287,31.08929],[24.95762,30.6616],[24.70007,30.04419],[25,29.238655],[25,25.6825],[25,22],[25,20.00304],[23.85,20],[23.83766,19.58047],[19.84926,21.49509],[15.86085,23.40972],[14.8513,22.86295]]]}},\n{\"type\":\"Feature\",\"id\":\"LKA\",\"properties\":{\"name\":\"Sri Lanka\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[81.787959,7.523055],[81.637322,6.481775],[81.21802,6.197141],[80.348357,5.96837],[79.872469,6.763463],[79.695167,8.200843],[80.147801,9.824078],[80.838818,9.268427],[81.304319,8.564206],[81.787959,7.523055]]]}},\n{\"type\":\"Feature\",\"id\":\"LSO\",\"properties\":{\"name\":\"Lesotho\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[28.978263,-28.955597],[29.325166,-29.257387],[29.018415,-29.743766],[28.8484,-30.070051],[28.291069,-30.226217],[28.107205,-30.545732],[27.749397,-30.645106],[26.999262,-29.875954],[27.532511,-29.242711],[28.074338,-28.851469],[28.5417,-28.647502],[28.978263,-28.955597]]]}},\n{\"type\":\"Feature\",\"id\":\"LTU\",\"properties\":{\"name\":\"Lithuania\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[22.731099,54.327537],[22.651052,54.582741],[22.757764,54.856574],[22.315724,55.015299],[21.268449,55.190482],[21.0558,56.031076],[22.201157,56.337802],[23.878264,56.273671],[24.860684,56.372528],[25.000934,56.164531],[25.533047,56.100297],[26.494331,55.615107],[26.588279,55.167176],[25.768433,54.846963],[25.536354,54.282423],[24.450684,53.905702],[23.484128,53.912498],[23.243987,54.220567],[22.731099,54.327537]]]}},\n{\"type\":\"Feature\",\"id\":\"LUX\",\"properties\":{\"name\":\"Luxembourg\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[6.043073,50.128052],[6.242751,49.902226],[6.18632,49.463803],[5.897759,49.442667],[5.674052,49.529484],[5.782417,50.090328],[6.043073,50.128052]]]}},\n{\"type\":\"Feature\",\"id\":\"LVA\",\"properties\":{\"name\":\"Latvia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[21.0558,56.031076],[21.090424,56.783873],[21.581866,57.411871],[22.524341,57.753374],[23.318453,57.006236],[24.12073,57.025693],[24.312863,57.793424],[25.164594,57.970157],[25.60281,57.847529],[26.463532,57.476389],[27.288185,57.474528],[27.770016,57.244258],[27.855282,56.759326],[28.176709,56.16913],[27.10246,55.783314],[26.494331,55.615107],[25.533047,56.100297],[25.000934,56.164531],[24.860684,56.372528],[23.878264,56.273671],[22.201157,56.337802],[21.0558,56.031076]]]}},\n{\"type\":\"Feature\",\"id\":\"MAR\",\"properties\":{\"name\":\"Morocco\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-5.193863,35.755182],[-4.591006,35.330712],[-3.640057,35.399855],[-2.604306,35.179093],[-2.169914,35.168396],[-1.792986,34.527919],[-1.733455,33.919713],[-1.388049,32.864015],[-1.124551,32.651522],[-1.307899,32.262889],[-2.616605,32.094346],[-3.06898,31.724498],[-3.647498,31.637294],[-3.690441,30.896952],[-4.859646,30.501188],[-5.242129,30.000443],[-6.060632,29.7317],[-7.059228,29.579228],[-8.674116,28.841289],[-8.66559,27.656426],[-8.817809,27.656426],[-8.817828,27.656426],[-8.794884,27.120696],[-9.413037,27.088476],[-9.735343,26.860945],[-10.189424,26.860945],[-10.551263,26.990808],[-11.392555,26.883424],[-11.71822,26.104092],[-12.030759,26.030866],[-12.500963,24.770116],[-13.89111,23.691009],[-14.221168,22.310163],[-14.630833,21.86094],[-14.750955,21.5006],[-17.002962,21.420734],[-17.020428,21.42231],[-16.973248,21.885745],[-16.589137,22.158234],[-16.261922,22.67934],[-16.326414,23.017768],[-15.982611,23.723358],[-15.426004,24.359134],[-15.089332,24.520261],[-14.824645,25.103533],[-14.800926,25.636265],[-14.43994,26.254418],[-13.773805,26.618892],[-13.139942,27.640148],[-13.121613,27.654148],[-12.618837,28.038186],[-11.688919,28.148644],[-10.900957,28.832142],[-10.399592,29.098586],[-9.564811,29.933574],[-9.814718,31.177736],[-9.434793,32.038096],[-9.300693,32.564679],[-8.657476,33.240245],[-7.654178,33.697065],[-6.912544,34.110476],[-6.244342,35.145865],[-5.929994,35.759988],[-5.193863,35.755182]]]}},\n{\"type\":\"Feature\",\"id\":\"MDA\",\"properties\":{\"name\":\"Moldova\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[26.619337,48.220726],[26.857824,48.368211],[27.522537,48.467119],[28.259547,48.155562],[28.670891,48.118149],[29.122698,47.849095],[29.050868,47.510227],[29.415135,47.346645],[29.559674,46.928583],[29.908852,46.674361],[29.83821,46.525326],[30.024659,46.423937],[29.759972,46.349988],[29.170654,46.379262],[29.072107,46.517678],[28.862972,46.437889],[28.933717,46.25883],[28.659987,45.939987],[28.485269,45.596907],[28.233554,45.488283],[28.054443,45.944586],[28.160018,46.371563],[28.12803,46.810476],[27.551166,47.405117],[27.233873,47.826771],[26.924176,48.123264],[26.619337,48.220726]]]}},\n{\"type\":\"Feature\",\"id\":\"MDG\",\"properties\":{\"name\":\"Madagascar\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[49.543519,-12.469833],[49.808981,-12.895285],[50.056511,-13.555761],[50.217431,-14.758789],[50.476537,-15.226512],[50.377111,-15.706069],[50.200275,-16.000263],[49.860606,-15.414253],[49.672607,-15.710204],[49.863344,-16.451037],[49.774564,-16.875042],[49.498612,-17.106036],[49.435619,-17.953064],[49.041792,-19.118781],[48.548541,-20.496888],[47.930749,-22.391501],[47.547723,-23.781959],[47.095761,-24.94163],[46.282478,-25.178463],[45.409508,-25.601434],[44.833574,-25.346101],[44.03972,-24.988345],[43.763768,-24.460677],[43.697778,-23.574116],[43.345654,-22.776904],[43.254187,-22.057413],[43.433298,-21.336475],[43.893683,-21.163307],[43.89637,-20.830459],[44.374325,-20.072366],[44.464397,-19.435454],[44.232422,-18.961995],[44.042976,-18.331387],[43.963084,-17.409945],[44.312469,-16.850496],[44.446517,-16.216219],[44.944937,-16.179374],[45.502732,-15.974373],[45.872994,-15.793454],[46.312243,-15.780018],[46.882183,-15.210182],[47.70513,-14.594303],[48.005215,-14.091233],[47.869047,-13.663869],[48.293828,-13.784068],[48.84506,-13.089175],[48.863509,-12.487868],[49.194651,-12.040557],[49.543519,-12.469833]]]}},\n{\"type\":\"Feature\",\"id\":\"MEX\",\"properties\":{\"name\":\"Mexico\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-97.140008,25.869997],[-97.528072,24.992144],[-97.702946,24.272343],[-97.776042,22.93258],[-97.872367,22.444212],[-97.699044,21.898689],[-97.38896,21.411019],[-97.189333,20.635433],[-96.525576,19.890931],[-96.292127,19.320371],[-95.900885,18.828024],[-94.839063,18.562717],[-94.42573,18.144371],[-93.548651,18.423837],[-92.786114,18.524839],[-92.037348,18.704569],[-91.407903,18.876083],[-90.77187,19.28412],[-90.53359,19.867418],[-90.451476,20.707522],[-90.278618,20.999855],[-89.601321,21.261726],[-88.543866,21.493675],[-87.658417,21.458846],[-87.05189,21.543543],[-86.811982,21.331515],[-86.845908,20.849865],[-87.383291,20.255405],[-87.621054,19.646553],[-87.43675,19.472403],[-87.58656,19.04013],[-87.837191,18.259816],[-88.090664,18.516648],[-88.300031,18.499982],[-88.490123,18.486831],[-88.848344,17.883198],[-89.029857,18.001511],[-89.150909,17.955468],[-89.14308,17.808319],[-90.067934,17.819326],[-91.00152,17.817595],[-91.002269,17.254658],[-91.453921,17.252177],[-91.08167,16.918477],[-90.711822,16.687483],[-90.600847,16.470778],[-90.438867,16.41011],[-90.464473,16.069562],[-91.74796,16.066565],[-92.229249,15.251447],[-92.087216,15.064585],[-92.20323,14.830103],[-92.22775,14.538829],[-93.359464,15.61543],[-93.875169,15.940164],[-94.691656,16.200975],[-95.250227,16.128318],[-96.053382,15.752088],[-96.557434,15.653515],[-97.263592,15.917065],[-98.01303,16.107312],[-98.947676,16.566043],[-99.697397,16.706164],[-100.829499,17.171071],[-101.666089,17.649026],[-101.918528,17.91609],[-102.478132,17.975751],[-103.50099,18.292295],[-103.917527,18.748572],[-104.99201,19.316134],[-105.493038,19.946767],[-105.731396,20.434102],[-105.397773,20.531719],[-105.500661,20.816895],[-105.270752,21.076285],[-105.265817,21.422104],[-105.603161,21.871146],[-105.693414,22.26908],[-106.028716,22.773752],[-106.90998,23.767774],[-107.915449,24.548915],[-108.401905,25.172314],[-109.260199,25.580609],[-109.444089,25.824884],[-109.291644,26.442934],[-109.801458,26.676176],[-110.391732,27.162115],[-110.641019,27.859876],[-111.178919,27.941241],[-111.759607,28.467953],[-112.228235,28.954409],[-112.271824,29.266844],[-112.809594,30.021114],[-113.163811,30.786881],[-113.148669,31.170966],[-113.871881,31.567608],[-114.205737,31.524045],[-114.776451,31.799532],[-114.9367,31.393485],[-114.771232,30.913617],[-114.673899,30.162681],[-114.330974,29.750432],[-113.588875,29.061611],[-113.424053,28.826174],[-113.271969,28.754783],[-113.140039,28.411289],[-112.962298,28.42519],[-112.761587,27.780217],[-112.457911,27.525814],[-112.244952,27.171727],[-111.616489,26.662817],[-111.284675,25.73259],[-110.987819,25.294606],[-110.710007,24.826004],[-110.655049,24.298595],[-110.172856,24.265548],[-109.771847,23.811183],[-109.409104,23.364672],[-109.433392,23.185588],[-109.854219,22.818272],[-110.031392,22.823078],[-110.295071,23.430973],[-110.949501,24.000964],[-111.670568,24.484423],[-112.182036,24.738413],[-112.148989,25.470125],[-112.300711,26.012004],[-112.777297,26.32196],[-113.464671,26.768186],[-113.59673,26.63946],[-113.848937,26.900064],[-114.465747,27.14209],[-115.055142,27.722727],[-114.982253,27.7982],[-114.570366,27.741485],[-114.199329,28.115003],[-114.162018,28.566112],[-114.931842,29.279479],[-115.518654,29.556362],[-115.887365,30.180794],[-116.25835,30.836464],[-116.721526,31.635744],[-117.12776,32.53534],[-115.99135,32.61239],[-114.72139,32.72083],[-114.815,32.52528],[-113.30498,32.03914],[-111.02361,31.33472],[-109.035,31.34194],[-108.24194,31.34222],[-108.24,31.754854],[-106.50759,31.75452],[-106.1429,31.39995],[-105.63159,31.08383],[-105.03737,30.64402],[-104.70575,30.12173],[-104.45697,29.57196],[-103.94,29.27],[-103.11,28.97],[-102.48,29.76],[-101.6624,29.7793],[-100.9576,29.38071],[-100.45584,28.69612],[-100.11,28.11],[-99.52,27.54],[-99.3,26.84],[-99.02,26.37],[-98.24,26.06],[-97.53,25.84],[-97.140008,25.869997]]]}},\n{\"type\":\"Feature\",\"id\":\"MKD\",\"properties\":{\"name\":\"Macedonia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[20.59023,41.85541],[20.71731,41.84711],[20.76216,42.05186],[21.3527,42.2068],[21.576636,42.245224],[21.91708,42.30364],[22.380526,42.32026],[22.881374,41.999297],[22.952377,41.337994],[22.76177,41.3048],[22.597308,41.130487],[22.055378,41.149866],[21.674161,40.931275],[21.02004,40.842727],[20.60518,41.08622],[20.46315,41.51509],[20.59023,41.85541]]]}},\n{\"type\":\"Feature\",\"id\":\"MLI\",\"properties\":{\"name\":\"Mali\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-12.17075,14.616834],[-11.834208,14.799097],[-11.666078,15.388208],[-11.349095,15.411256],[-10.650791,15.132746],[-10.086846,15.330486],[-9.700255,15.264107],[-9.550238,15.486497],[-5.537744,15.50169],[-5.315277,16.201854],[-5.488523,16.325102],[-5.971129,20.640833],[-6.453787,24.956591],[-4.923337,24.974574],[-1.550055,22.792666],[1.823228,20.610809],[2.060991,20.142233],[2.683588,19.85623],[3.146661,19.693579],[3.158133,19.057364],[4.267419,19.155265],[4.27021,16.852227],[3.723422,16.184284],[3.638259,15.56812],[2.749993,15.409525],[1.385528,15.323561],[1.015783,14.968182],[0.374892,14.928908],[-0.266257,14.924309],[-0.515854,15.116158],[-1.066363,14.973815],[-2.001035,14.559008],[-2.191825,14.246418],[-2.967694,13.79815],[-3.103707,13.541267],[-3.522803,13.337662],[-4.006391,13.472485],[-4.280405,13.228444],[-4.427166,12.542646],[-5.220942,11.713859],[-5.197843,11.375146],[-5.470565,10.95127],[-5.404342,10.370737],[-5.816926,10.222555],[-6.050452,10.096361],[-6.205223,10.524061],[-6.493965,10.411303],[-6.666461,10.430811],[-6.850507,10.138994],[-7.622759,10.147236],[-7.89959,10.297382],[-8.029944,10.206535],[-8.335377,10.494812],[-8.282357,10.792597],[-8.407311,10.909257],[-8.620321,10.810891],[-8.581305,11.136246],[-8.376305,11.393646],[-8.786099,11.812561],[-8.905265,12.088358],[-9.127474,12.30806],[-9.327616,12.334286],[-9.567912,12.194243],[-9.890993,12.060479],[-10.165214,11.844084],[-10.593224,11.923975],[-10.87083,12.177887],[-11.036556,12.211245],[-11.297574,12.077971],[-11.456169,12.076834],[-11.513943,12.442988],[-11.467899,12.754519],[-11.553398,13.141214],[-11.927716,13.422075],[-12.124887,13.994727],[-12.17075,14.616834]]]}},\n{\"type\":\"Feature\",\"id\":\"MLT\",\"properties\":{\"name\":\"Malta\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[14.566171,35.852721],[14.532684,35.820191],[14.436463,35.821664],[14.352334,35.872281],[14.3513,35.978399],[14.448348,35.957444],[14.537025,35.886285],[14.566171,35.852721]]],[[[14.313473,36.027569],[14.253632,36.012143],[14.194204,36.042245],[14.180354,36.060383],[14.263243,36.075809],[14.303758,36.062295],[14.320914,36.03625],[14.313473,36.027569]]]]}},\n{\"type\":\"Feature\",\"id\":\"MMR\",\"properties\":{\"name\":\"Myanmar\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[99.543309,20.186598],[98.959676,19.752981],[98.253724,19.708203],[97.797783,18.62708],[97.375896,18.445438],[97.859123,17.567946],[98.493761,16.837836],[98.903348,16.177824],[98.537376,15.308497],[98.192074,15.123703],[98.430819,14.622028],[99.097755,13.827503],[99.212012,13.269294],[99.196354,12.804748],[99.587286,11.892763],[99.038121,10.960546],[98.553551,9.93296],[98.457174,10.675266],[98.764546,11.441292],[98.428339,12.032987],[98.509574,13.122378],[98.103604,13.64046],[97.777732,14.837286],[97.597072,16.100568],[97.16454,16.928734],[96.505769,16.427241],[95.369352,15.71439],[94.808405,15.803454],[94.188804,16.037936],[94.533486,17.27724],[94.324817,18.213514],[93.540988,19.366493],[93.663255,19.726962],[93.078278,19.855145],[92.368554,20.670883],[92.303234,21.475485],[92.652257,21.324048],[92.672721,22.041239],[93.166128,22.27846],[93.060294,22.703111],[93.286327,23.043658],[93.325188,24.078556],[94.106742,23.850741],[94.552658,24.675238],[94.603249,25.162495],[95.155153,26.001307],[95.124768,26.573572],[96.419366,27.264589],[97.133999,27.083774],[97.051989,27.699059],[97.402561,27.882536],[97.327114,28.261583],[97.911988,28.335945],[98.246231,27.747221],[98.68269,27.508812],[98.712094,26.743536],[98.671838,25.918703],[97.724609,25.083637],[97.60472,23.897405],[98.660262,24.063286],[98.898749,23.142722],[99.531992,22.949039],[99.240899,22.118314],[99.983489,21.742937],[100.416538,21.558839],[101.150033,21.849984],[101.180005,21.436573],[100.329101,20.786122],[100.115988,20.41785],[99.543309,20.186598]]]}},\n{\"type\":\"Feature\",\"id\":\"MNE\",\"properties\":{\"name\":\"Montenegro\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[19.801613,42.500093],[19.738051,42.688247],[19.30449,42.19574],[19.37177,41.87755],[19.16246,41.95502],[18.88214,42.28151],[18.45,42.48],[18.56,42.65],[18.70648,43.20011],[19.03165,43.43253],[19.21852,43.52384],[19.48389,43.35229],[19.63,43.21378],[19.95857,43.10604],[20.3398,42.89852],[20.25758,42.81275],[20.0707,42.58863],[19.801613,42.500093]]]}},\n{\"type\":\"Feature\",\"id\":\"MNG\",\"properties\":{\"name\":\"Mongolia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[87.751264,49.297198],[88.805567,49.470521],[90.713667,50.331812],[92.234712,50.802171],[93.104219,50.49529],[94.147566,50.480537],[94.815949,50.013433],[95.814028,49.977467],[97.259728,49.726061],[98.231762,50.422401],[97.82574,51.010995],[98.861491,52.047366],[99.981732,51.634006],[100.88948,51.516856],[102.065223,51.259921],[102.255909,50.510561],[103.676545,50.089966],[104.621552,50.275329],[105.886591,50.406019],[106.888804,50.274296],[107.868176,49.793705],[108.475167,49.282548],[109.402449,49.292961],[110.662011,49.130128],[111.581231,49.377968],[112.89774,49.543565],[114.362456,50.248303],[114.96211,50.140247],[115.485695,49.805177],[116.678801,49.888531],[116.191802,49.134598],[115.485282,48.135383],[115.742837,47.726545],[116.308953,47.85341],[117.295507,47.697709],[118.064143,48.06673],[118.866574,47.74706],[119.772824,47.048059],[119.66327,46.69268],[118.874326,46.805412],[117.421701,46.672733],[116.717868,46.388202],[115.985096,45.727235],[114.460332,45.339817],[113.463907,44.808893],[112.436062,45.011646],[111.873306,45.102079],[111.348377,44.457442],[111.667737,44.073176],[111.829588,43.743118],[111.129682,43.406834],[110.412103,42.871234],[109.243596,42.519446],[107.744773,42.481516],[106.129316,42.134328],[104.964994,41.59741],[104.522282,41.908347],[103.312278,41.907468],[101.83304,42.514873],[100.845866,42.663804],[99.515817,42.524691],[97.451757,42.74889],[96.349396,42.725635],[95.762455,43.319449],[95.306875,44.241331],[94.688929,44.352332],[93.480734,44.975472],[92.133891,45.115076],[90.94554,45.286073],[90.585768,45.719716],[90.970809,46.888146],[90.280826,47.693549],[88.854298,48.069082],[88.013832,48.599463],[87.751264,49.297198]]]}},\n{\"type\":\"Feature\",\"id\":\"MOZ\",\"properties\":{\"name\":\"Mozambique\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[34.559989,-11.52002],[35.312398,-11.439146],[36.514082,-11.720938],[36.775151,-11.594537],[37.471284,-11.568751],[37.827645,-11.268769],[38.427557,-11.285202],[39.52103,-10.896854],[40.316589,-10.317096],[40.478387,-10.765441],[40.437253,-11.761711],[40.560811,-12.639177],[40.59962,-14.201975],[40.775475,-14.691764],[40.477251,-15.406294],[40.089264,-16.100774],[39.452559,-16.720891],[38.538351,-17.101023],[37.411133,-17.586368],[36.281279,-18.659688],[35.896497,-18.84226],[35.1984,-19.552811],[34.786383,-19.784012],[34.701893,-20.497043],[35.176127,-21.254361],[35.373428,-21.840837],[35.385848,-22.14],[35.562546,-22.09],[35.533935,-23.070788],[35.371774,-23.535359],[35.60747,-23.706563],[35.458746,-24.12261],[35.040735,-24.478351],[34.215824,-24.816314],[33.01321,-25.357573],[32.574632,-25.727318],[32.660363,-26.148584],[32.915955,-26.215867],[32.83012,-26.742192],[32.071665,-26.73382],[31.985779,-26.29178],[31.837778,-25.843332],[31.752408,-25.484284],[31.930589,-24.369417],[31.670398,-23.658969],[31.191409,-22.25151],[32.244988,-21.116489],[32.508693,-20.395292],[32.659743,-20.30429],[32.772708,-19.715592],[32.611994,-19.419383],[32.654886,-18.67209],[32.849861,-17.979057],[32.847639,-16.713398],[32.328239,-16.392074],[31.852041,-16.319417],[31.636498,-16.07199],[31.173064,-15.860944],[30.338955,-15.880839],[30.274256,-15.507787],[30.179481,-14.796099],[33.214025,-13.97186],[33.7897,-14.451831],[34.064825,-14.35995],[34.459633,-14.61301],[34.517666,-15.013709],[34.307291,-15.478641],[34.381292,-16.18356],[35.03381,-16.8013],[35.339063,-16.10744],[35.771905,-15.896859],[35.686845,-14.611046],[35.267956,-13.887834],[34.907151,-13.565425],[34.559989,-13.579998],[34.280006,-12.280025],[34.559989,-11.52002]]]}},\n{\"type\":\"Feature\",\"id\":\"MRT\",\"properties\":{\"name\":\"Mauritania\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-12.17075,14.616834],[-12.830658,15.303692],[-13.435738,16.039383],[-14.099521,16.304302],[-14.577348,16.598264],[-15.135737,16.587282],[-15.623666,16.369337],[-16.12069,16.455663],[-16.463098,16.135036],[-16.549708,16.673892],[-16.270552,17.166963],[-16.146347,18.108482],[-16.256883,19.096716],[-16.377651,19.593817],[-16.277838,20.092521],[-16.536324,20.567866],[-17.063423,20.999752],[-16.845194,21.333323],[-12.929102,21.327071],[-13.118754,22.77122],[-12.874222,23.284832],[-11.937224,23.374594],[-11.969419,25.933353],[-8.687294,25.881056],[-8.6844,27.395744],[-4.923337,24.974574],[-6.453787,24.956591],[-5.971129,20.640833],[-5.488523,16.325102],[-5.315277,16.201854],[-5.537744,15.50169],[-9.550238,15.486497],[-9.700255,15.264107],[-10.086846,15.330486],[-10.650791,15.132746],[-11.349095,15.411256],[-11.666078,15.388208],[-11.834208,14.799097],[-12.17075,14.616834]]]}},\n{\"type\":\"Feature\",\"id\":\"MWI\",\"properties\":{\"name\":\"Malawi\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[34.559989,-11.52002],[34.280006,-12.280025],[34.559989,-13.579998],[34.907151,-13.565425],[35.267956,-13.887834],[35.686845,-14.611046],[35.771905,-15.896859],[35.339063,-16.10744],[35.03381,-16.8013],[34.381292,-16.18356],[34.307291,-15.478641],[34.517666,-15.013709],[34.459633,-14.61301],[34.064825,-14.35995],[33.7897,-14.451831],[33.214025,-13.97186],[32.688165,-13.712858],[32.991764,-12.783871],[33.306422,-12.435778],[33.114289,-11.607198],[33.31531,-10.79655],[33.485688,-10.525559],[33.231388,-9.676722],[32.759375,-9.230599],[33.739729,-9.417151],[33.940838,-9.693674],[34.280006,-10.16],[34.559989,-11.52002]]]}},\n{\"type\":\"Feature\",\"id\":\"MYS\",\"properties\":{\"name\":\"Malaysia\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[101.075516,6.204867],[101.154219,5.691384],[101.814282,5.810808],[102.141187,6.221636],[102.371147,6.128205],[102.961705,5.524495],[103.381215,4.855001],[103.438575,4.181606],[103.332122,3.726698],[103.429429,3.382869],[103.502448,2.791019],[103.854674,2.515454],[104.247932,1.631141],[104.228811,1.293048],[103.519707,1.226334],[102.573615,1.967115],[101.390638,2.760814],[101.27354,3.270292],[100.695435,3.93914],[100.557408,4.76728],[100.196706,5.312493],[100.30626,6.040562],[100.085757,6.464489],[100.259596,6.642825],[101.075516,6.204867]]],[[[118.618321,4.478202],[117.882035,4.137551],[117.015214,4.306094],[115.865517,4.306559],[115.519078,3.169238],[115.134037,2.821482],[114.621355,1.430688],[113.80585,1.217549],[112.859809,1.49779],[112.380252,1.410121],[111.797548,0.904441],[111.159138,0.976478],[110.514061,0.773131],[109.830227,1.338136],[109.66326,2.006467],[110.396135,1.663775],[111.168853,1.850637],[111.370081,2.697303],[111.796928,2.885897],[112.995615,3.102395],[113.712935,3.893509],[114.204017,4.525874],[114.659596,4.007637],[114.869557,4.348314],[115.347461,4.316636],[115.4057,4.955228],[115.45071,5.44773],[116.220741,6.143191],[116.725103,6.924771],[117.129626,6.928053],[117.643393,6.422166],[117.689075,5.98749],[118.347691,5.708696],[119.181904,5.407836],[119.110694,5.016128],[118.439727,4.966519],[118.618321,4.478202]]]]}},\n{\"type\":\"Feature\",\"id\":\"NAM\",\"properties\":{\"name\":\"Namibia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[16.344977,-28.576705],[15.601818,-27.821247],[15.210472,-27.090956],[14.989711,-26.117372],[14.743214,-25.39292],[14.408144,-23.853014],[14.385717,-22.656653],[14.257714,-22.111208],[13.868642,-21.699037],[13.352498,-20.872834],[12.826845,-19.673166],[12.608564,-19.045349],[11.794919,-18.069129],[11.734199,-17.301889],[12.215461,-17.111668],[12.814081,-16.941343],[13.462362,-16.971212],[14.058501,-17.423381],[14.209707,-17.353101],[18.263309,-17.309951],[18.956187,-17.789095],[21.377176,-17.930636],[23.215048,-17.523116],[24.033862,-17.295843],[24.682349,-17.353411],[25.07695,-17.578823],[25.084443,-17.661816],[24.520705,-17.887125],[24.217365,-17.889347],[23.579006,-18.281261],[23.196858,-17.869038],[21.65504,-18.219146],[20.910641,-18.252219],[20.881134,-21.814327],[19.895458,-21.849157],[19.895768,-24.76779],[19.894734,-28.461105],[19.002127,-28.972443],[18.464899,-29.045462],[17.836152,-28.856378],[17.387497,-28.783514],[17.218929,-28.355943],[16.824017,-28.082162],[16.344977,-28.576705]]]}},\n{\"type\":\"Feature\",\"id\":\"NCL\",\"properties\":{\"name\":\"New Caledonia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[165.77999,-21.080005],[166.599991,-21.700019],[167.120011,-22.159991],[166.740035,-22.399976],[166.189732,-22.129708],[165.474375,-21.679607],[164.829815,-21.14982],[164.167995,-20.444747],[164.029606,-20.105646],[164.459967,-20.120012],[165.020036,-20.459991],[165.460009,-20.800022],[165.77999,-21.080005]]]}},\n{\"type\":\"Feature\",\"id\":\"NER\",\"properties\":{\"name\":\"Niger\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[2.154474,11.94015],[2.177108,12.625018],[1.024103,12.851826],[0.993046,13.33575],[0.429928,13.988733],[0.295646,14.444235],[0.374892,14.928908],[1.015783,14.968182],[1.385528,15.323561],[2.749993,15.409525],[3.638259,15.56812],[3.723422,16.184284],[4.27021,16.852227],[4.267419,19.155265],[5.677566,19.601207],[8.572893,21.565661],[11.999506,23.471668],[13.581425,23.040506],[14.143871,22.491289],[14.8513,22.86295],[15.096888,21.308519],[15.471077,21.048457],[15.487148,20.730415],[15.903247,20.387619],[15.685741,19.95718],[15.300441,17.92795],[15.247731,16.627306],[13.972202,15.684366],[13.540394,14.367134],[13.956699,13.996691],[13.954477,13.353449],[14.595781,13.330427],[14.495787,12.859396],[14.213531,12.802035],[14.181336,12.483657],[13.995353,12.461565],[13.318702,13.556356],[13.083987,13.596147],[12.302071,13.037189],[11.527803,13.32898],[10.989593,13.387323],[10.701032,13.246918],[10.114814,13.277252],[9.524928,12.851102],[9.014933,12.826659],[7.804671,13.343527],[7.330747,13.098038],[6.820442,13.115091],[6.445426,13.492768],[5.443058,13.865924],[4.368344,13.747482],[4.107946,13.531216],[3.967283,12.956109],[3.680634,12.552903],[3.61118,11.660167],[2.848643,12.235636],[2.490164,12.233052],[2.154474,11.94015]]]}},\n{\"type\":\"Feature\",\"id\":\"NGA\",\"properties\":{\"name\":\"Nigeria\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[8.500288,4.771983],[7.462108,4.412108],[7.082596,4.464689],[6.698072,4.240594],[5.898173,4.262453],[5.362805,4.887971],[5.033574,5.611802],[4.325607,6.270651],[3.57418,6.2583],[2.691702,6.258817],[2.749063,7.870734],[2.723793,8.506845],[2.912308,9.137608],[3.220352,9.444153],[3.705438,10.06321],[3.60007,10.332186],[3.797112,10.734746],[3.572216,11.327939],[3.61118,11.660167],[3.680634,12.552903],[3.967283,12.956109],[4.107946,13.531216],[4.368344,13.747482],[5.443058,13.865924],[6.445426,13.492768],[6.820442,13.115091],[7.330747,13.098038],[7.804671,13.343527],[9.014933,12.826659],[9.524928,12.851102],[10.114814,13.277252],[10.701032,13.246918],[10.989593,13.387323],[11.527803,13.32898],[12.302071,13.037189],[13.083987,13.596147],[13.318702,13.556356],[13.995353,12.461565],[14.181336,12.483657],[14.577178,12.085361],[14.468192,11.904752],[14.415379,11.572369],[13.57295,10.798566],[13.308676,10.160362],[13.1676,9.640626],[12.955468,9.417772],[12.753672,8.717763],[12.218872,8.305824],[12.063946,7.799808],[11.839309,7.397042],[11.745774,6.981383],[11.058788,6.644427],[10.497375,7.055358],[10.118277,7.03877],[9.522706,6.453482],[9.233163,6.444491],[8.757533,5.479666],[8.500288,4.771983]]]}},\n{\"type\":\"Feature\",\"id\":\"NIC\",\"properties\":{\"name\":\"Nicaragua\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-85.71254,11.088445],[-86.058488,11.403439],[-86.52585,11.806877],[-86.745992,12.143962],[-87.167516,12.458258],[-87.668493,12.90991],[-87.557467,13.064552],[-87.392386,12.914018],[-87.316654,12.984686],[-87.005769,13.025794],[-86.880557,13.254204],[-86.733822,13.263093],[-86.755087,13.754845],[-86.520708,13.778487],[-86.312142,13.771356],[-86.096264,14.038187],[-85.801295,13.836055],[-85.698665,13.960078],[-85.514413,14.079012],[-85.165365,14.35437],[-85.148751,14.560197],[-85.052787,14.551541],[-84.924501,14.790493],[-84.820037,14.819587],[-84.649582,14.666805],[-84.449336,14.621614],[-84.228342,14.748764],[-83.975721,14.749436],[-83.628585,14.880074],[-83.489989,15.016267],[-83.147219,14.995829],[-83.233234,14.899866],[-83.284162,14.676624],[-83.182126,14.310703],[-83.4125,13.970078],[-83.519832,13.567699],[-83.552207,13.127054],[-83.498515,12.869292],[-83.473323,12.419087],[-83.626104,12.32085],[-83.719613,11.893124],[-83.650858,11.629032],[-83.85547,11.373311],[-83.808936,11.103044],[-83.655612,10.938764],[-83.895054,10.726839],[-84.190179,10.79345],[-84.355931,10.999226],[-84.673069,11.082657],[-84.903003,10.952303],[-85.561852,11.217119],[-85.71254,11.088445]]]}},\n{\"type\":\"Feature\",\"id\":\"NLD\",\"properties\":{\"name\":\"Netherlands\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[6.074183,53.510403],[6.90514,53.482162],[7.092053,53.144043],[6.84287,52.22844],[6.589397,51.852029],[5.988658,51.851616],[6.156658,50.803721],[5.606976,51.037298],[4.973991,51.475024],[4.047071,51.267259],[3.314971,51.345755],[3.830289,51.620545],[4.705997,53.091798],[6.074183,53.510403]]]}},\n{\"type\":\"Feature\",\"id\":\"NOR\",\"properties\":{\"name\":\"Norway\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[28.165547,71.185474],[31.293418,70.453788],[30.005435,70.186259],[31.101079,69.55808],[29.399581,69.156916],[28.59193,69.064777],[29.015573,69.766491],[27.732292,70.164193],[26.179622,69.825299],[25.689213,69.092114],[24.735679,68.649557],[23.66205,68.891247],[22.356238,68.841741],[21.244936,69.370443],[20.645593,69.106247],[20.025269,69.065139],[19.87856,68.407194],[17.993868,68.567391],[17.729182,68.010552],[16.768879,68.013937],[16.108712,67.302456],[15.108411,66.193867],[13.55569,64.787028],[13.919905,64.445421],[13.571916,64.049114],[12.579935,64.066219],[11.930569,63.128318],[11.992064,61.800362],[12.631147,61.293572],[12.300366,60.117933],[11.468272,59.432393],[11.027369,58.856149],[10.356557,59.469807],[8.382,58.313288],[7.048748,58.078884],[5.665835,58.588155],[5.308234,59.663232],[4.992078,61.970998],[5.9129,62.614473],[8.553411,63.454008],[10.527709,64.486038],[12.358347,65.879726],[14.761146,67.810642],[16.435927,68.563205],[19.184028,69.817444],[21.378416,70.255169],[23.023742,70.202072],[24.546543,71.030497],[26.37005,70.986262],[28.165547,71.185474]]],[[[24.72412,77.85385],[22.49032,77.44493],[20.72601,77.67704],[21.41611,77.93504],[20.8119,78.25463],[22.88426,78.45494],[23.28134,78.07954],[24.72412,77.85385]]],[[[18.25183,79.70175],[21.54383,78.95611],[19.02737,78.5626],[18.47172,77.82669],[17.59441,77.63796],[17.1182,76.80941],[15.91315,76.77045],[13.76259,77.38035],[14.66956,77.73565],[13.1706,78.02493],[11.22231,78.8693],[10.44453,79.65239],[13.17077,80.01046],[13.71852,79.66039],[15.14282,79.67431],[15.52255,80.01608],[16.99085,80.05086],[18.25183,79.70175]]],[[[25.447625,80.40734],[27.407506,80.056406],[25.924651,79.517834],[23.024466,79.400012],[20.075188,79.566823],[19.897266,79.842362],[18.462264,79.85988],[17.368015,80.318896],[20.455992,80.598156],[21.907945,80.357679],[22.919253,80.657144],[25.447625,80.40734]]]]}},\n{\"type\":\"Feature\",\"id\":\"NPL\",\"properties\":{\"name\":\"Nepal\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[88.120441,27.876542],[88.043133,27.445819],[88.174804,26.810405],[88.060238,26.414615],[87.227472,26.397898],[86.024393,26.630985],[85.251779,26.726198],[84.675018,27.234901],[83.304249,27.364506],[81.999987,27.925479],[81.057203,28.416095],[80.088425,28.79447],[80.476721,29.729865],[81.111256,30.183481],[81.525804,30.422717],[82.327513,30.115268],[83.337115,29.463732],[83.898993,29.320226],[84.23458,28.839894],[85.011638,28.642774],[85.82332,28.203576],[86.954517,27.974262],[88.120441,27.876542]]]}},\n{\"type\":\"Feature\",\"id\":\"NZL\",\"properties\":{\"name\":\"New Zealand\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[173.020375,-40.919052],[173.247234,-41.331999],[173.958405,-40.926701],[174.247587,-41.349155],[174.248517,-41.770008],[173.876447,-42.233184],[173.22274,-42.970038],[172.711246,-43.372288],[173.080113,-43.853344],[172.308584,-43.865694],[171.452925,-44.242519],[171.185138,-44.897104],[170.616697,-45.908929],[169.831422,-46.355775],[169.332331,-46.641235],[168.411354,-46.619945],[167.763745,-46.290197],[166.676886,-46.219917],[166.509144,-45.852705],[167.046424,-45.110941],[168.303763,-44.123973],[168.949409,-43.935819],[169.667815,-43.555326],[170.52492,-43.031688],[171.12509,-42.512754],[171.569714,-41.767424],[171.948709,-41.514417],[172.097227,-40.956104],[172.79858,-40.493962],[173.020375,-40.919052]]],[[[174.612009,-36.156397],[175.336616,-37.209098],[175.357596,-36.526194],[175.808887,-36.798942],[175.95849,-37.555382],[176.763195,-37.881253],[177.438813,-37.961248],[178.010354,-37.579825],[178.517094,-37.695373],[178.274731,-38.582813],[177.97046,-39.166343],[177.206993,-39.145776],[176.939981,-39.449736],[177.032946,-39.879943],[176.885824,-40.065978],[176.508017,-40.604808],[176.01244,-41.289624],[175.239567,-41.688308],[175.067898,-41.425895],[174.650973,-41.281821],[175.22763,-40.459236],[174.900157,-39.908933],[173.824047,-39.508854],[173.852262,-39.146602],[174.574802,-38.797683],[174.743474,-38.027808],[174.697017,-37.381129],[174.292028,-36.711092],[174.319004,-36.534824],[173.840997,-36.121981],[173.054171,-35.237125],[172.636005,-34.529107],[173.007042,-34.450662],[173.551298,-35.006183],[174.32939,-35.265496],[174.612009,-36.156397]]]]}},\n{\"type\":\"Feature\",\"id\":\"OMN\",\"properties\":{\"name\":\"Oman\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[58.861141,21.114035],[58.487986,20.428986],[58.034318,20.481437],[57.826373,20.243002],[57.665762,19.736005],[57.7887,19.06757],[57.694391,18.94471],[57.234264,18.947991],[56.609651,18.574267],[56.512189,18.087113],[56.283521,17.876067],[55.661492,17.884128],[55.269939,17.632309],[55.2749,17.228354],[54.791002,16.950697],[54.239253,17.044981],[53.570508,16.707663],[53.108573,16.651051],[52.782184,17.349742],[52.00001,19.000003],[54.999982,19.999994],[55.666659,22.000001],[55.208341,22.70833],[55.234489,23.110993],[55.525841,23.524869],[55.528632,23.933604],[55.981214,24.130543],[55.804119,24.269604],[55.886233,24.920831],[56.396847,24.924732],[56.84514,24.241673],[57.403453,23.878594],[58.136948,23.747931],[58.729211,23.565668],[59.180502,22.992395],[59.450098,22.660271],[59.80806,22.533612],[59.806148,22.310525],[59.442191,21.714541],[59.282408,21.433886],[58.861141,21.114035]]],[[[56.391421,25.895991],[56.261042,25.714606],[56.070821,26.055464],[56.362017,26.395934],[56.485679,26.309118],[56.391421,25.895991]]]]}},\n{\"type\":\"Feature\",\"id\":\"PAK\",\"properties\":{\"name\":\"Pakistan\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[75.158028,37.133031],[75.896897,36.666806],[76.192848,35.898403],[77.837451,35.49401],[76.871722,34.653544],[75.757061,34.504923],[74.240203,34.748887],[73.749948,34.317699],[74.104294,33.441473],[74.451559,32.7649],[75.258642,32.271105],[74.405929,31.692639],[74.42138,30.979815],[73.450638,29.976413],[72.823752,28.961592],[71.777666,27.91318],[70.616496,27.989196],[69.514393,26.940966],[70.168927,26.491872],[70.282873,25.722229],[70.844699,25.215102],[71.04324,24.356524],[68.842599,24.359134],[68.176645,23.691965],[67.443667,23.944844],[67.145442,24.663611],[66.372828,25.425141],[64.530408,25.237039],[62.905701,25.218409],[61.497363,25.078237],[61.874187,26.239975],[63.316632,26.756532],[63.233898,27.217047],[62.755426,27.378923],[62.72783,28.259645],[61.771868,28.699334],[61.369309,29.303276],[60.874248,29.829239],[62.549857,29.318572],[63.550261,29.468331],[64.148002,29.340819],[64.350419,29.560031],[65.046862,29.472181],[66.346473,29.887943],[66.381458,30.738899],[66.938891,31.304911],[67.683394,31.303154],[67.792689,31.58293],[68.556932,31.71331],[68.926677,31.620189],[69.317764,31.901412],[69.262522,32.501944],[69.687147,33.105499],[70.323594,33.358533],[69.930543,34.02012],[70.881803,33.988856],[71.156773,34.348911],[71.115019,34.733126],[71.613076,35.153203],[71.498768,35.650563],[71.262348,36.074388],[71.846292,36.509942],[72.920025,36.720007],[74.067552,36.836176],[74.575893,37.020841],[75.158028,37.133031]]]}},\n{\"type\":\"Feature\",\"id\":\"PAN\",\"properties\":{\"name\":\"Panama\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-77.881571,7.223771],[-78.214936,7.512255],[-78.429161,8.052041],[-78.182096,8.319182],[-78.435465,8.387705],[-78.622121,8.718124],[-79.120307,8.996092],[-79.557877,8.932375],[-79.760578,8.584515],[-80.164481,8.333316],[-80.382659,8.298409],[-80.480689,8.090308],[-80.00369,7.547524],[-80.276671,7.419754],[-80.421158,7.271572],[-80.886401,7.220541],[-81.059543,7.817921],[-81.189716,7.647906],[-81.519515,7.70661],[-81.721311,8.108963],[-82.131441,8.175393],[-82.390934,8.292362],[-82.820081,8.290864],[-82.850958,8.073823],[-82.965783,8.225028],[-82.913176,8.423517],[-82.829771,8.626295],[-82.868657,8.807266],[-82.719183,8.925709],[-82.927155,9.07433],[-82.932891,9.476812],[-82.546196,9.566135],[-82.187123,9.207449],[-82.207586,8.995575],[-81.808567,8.950617],[-81.714154,9.031955],[-81.439287,8.786234],[-80.947302,8.858504],[-80.521901,9.111072],[-79.9146,9.312765],[-79.573303,9.61161],[-79.021192,9.552931],[-79.05845,9.454565],[-78.500888,9.420459],[-78.055928,9.24773],[-77.729514,8.946844],[-77.353361,8.670505],[-77.474723,8.524286],[-77.242566,7.935278],[-77.431108,7.638061],[-77.753414,7.70984],[-77.881571,7.223771]]]}},\n{\"type\":\"Feature\",\"id\":\"PER\",\"properties\":{\"name\":\"Peru\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-69.590424,-17.580012],[-69.858444,-18.092694],[-70.372572,-18.347975],[-71.37525,-17.773799],[-71.462041,-17.363488],[-73.44453,-16.359363],[-75.237883,-15.265683],[-76.009205,-14.649286],[-76.423469,-13.823187],[-76.259242,-13.535039],[-77.106192,-12.222716],[-78.092153,-10.377712],[-79.036953,-8.386568],[-79.44592,-7.930833],[-79.760578,-7.194341],[-80.537482,-6.541668],[-81.249996,-6.136834],[-80.926347,-5.690557],[-81.410943,-4.736765],[-81.09967,-4.036394],[-80.302561,-3.404856],[-80.184015,-3.821162],[-80.469295,-4.059287],[-80.442242,-4.425724],[-80.028908,-4.346091],[-79.624979,-4.454198],[-79.205289,-4.959129],[-78.639897,-4.547784],[-78.450684,-3.873097],[-77.837905,-3.003021],[-76.635394,-2.608678],[-75.544996,-1.56161],[-75.233723,-0.911417],[-75.373223,-0.152032],[-75.106625,-0.057205],[-74.441601,-0.53082],[-74.122395,-1.002833],[-73.659504,-1.260491],[-73.070392,-2.308954],[-72.325787,-2.434218],[-71.774761,-2.16979],[-71.413646,-2.342802],[-70.813476,-2.256865],[-70.047709,-2.725156],[-70.692682,-3.742872],[-70.394044,-3.766591],[-69.893635,-4.298187],[-70.794769,-4.251265],[-70.928843,-4.401591],[-71.748406,-4.593983],[-72.891928,-5.274561],[-72.964507,-5.741251],[-73.219711,-6.089189],[-73.120027,-6.629931],[-73.724487,-6.918595],[-73.723401,-7.340999],[-73.987235,-7.52383],[-73.571059,-8.424447],[-73.015383,-9.032833],[-73.226713,-9.462213],[-72.563033,-9.520194],[-72.184891,-10.053598],[-71.302412,-10.079436],[-70.481894,-9.490118],[-70.548686,-11.009147],[-70.093752,-11.123972],[-69.529678,-10.951734],[-68.66508,-12.5613],[-68.88008,-12.899729],[-68.929224,-13.602684],[-68.948887,-14.453639],[-69.339535,-14.953195],[-69.160347,-15.323974],[-69.389764,-15.660129],[-68.959635,-16.500698],[-69.590424,-17.580012]]]}},\n{\"type\":\"Feature\",\"id\":\"PHL\",\"properties\":{\"name\":\"Philippines\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[126.376814,8.414706],[126.478513,7.750354],[126.537424,7.189381],[126.196773,6.274294],[125.831421,7.293715],[125.363852,6.786485],[125.683161,6.049657],[125.396512,5.581003],[124.219788,6.161355],[123.93872,6.885136],[124.243662,7.36061],[123.610212,7.833527],[123.296071,7.418876],[122.825506,7.457375],[122.085499,6.899424],[121.919928,7.192119],[122.312359,8.034962],[122.942398,8.316237],[123.487688,8.69301],[123.841154,8.240324],[124.60147,8.514158],[124.764612,8.960409],[125.471391,8.986997],[125.412118,9.760335],[126.222714,9.286074],[126.306637,8.782487],[126.376814,8.414706]]],[[[123.982438,10.278779],[123.623183,9.950091],[123.309921,9.318269],[122.995883,9.022189],[122.380055,9.713361],[122.586089,9.981045],[122.837081,10.261157],[122.947411,10.881868],[123.49885,10.940624],[123.337774,10.267384],[124.077936,11.232726],[123.982438,10.278779]]],[[[118.504581,9.316383],[117.174275,8.3675],[117.664477,9.066889],[118.386914,9.6845],[118.987342,10.376292],[119.511496,11.369668],[119.689677,10.554291],[119.029458,10.003653],[118.504581,9.316383]]],[[[121.883548,11.891755],[122.483821,11.582187],[123.120217,11.58366],[123.100838,11.165934],[122.637714,10.741308],[122.00261,10.441017],[121.967367,10.905691],[122.03837,11.415841],[121.883548,11.891755]]],[[[125.502552,12.162695],[125.783465,11.046122],[125.011884,11.311455],[125.032761,10.975816],[125.277449,10.358722],[124.801819,10.134679],[124.760168,10.837995],[124.459101,10.88993],[124.302522,11.495371],[124.891013,11.415583],[124.87799,11.79419],[124.266762,12.557761],[125.227116,12.535721],[125.502552,12.162695]]],[[[121.527394,13.06959],[121.26219,12.20556],[120.833896,12.704496],[120.323436,13.466413],[121.180128,13.429697],[121.527394,13.06959]]],[[[121.321308,18.504065],[121.937601,18.218552],[122.246006,18.47895],[122.336957,18.224883],[122.174279,17.810283],[122.515654,17.093505],[122.252311,16.262444],[121.662786,15.931018],[121.50507,15.124814],[121.728829,14.328376],[122.258925,14.218202],[122.701276,14.336541],[123.950295,13.782131],[123.855107,13.237771],[124.181289,12.997527],[124.077419,12.536677],[123.298035,13.027526],[122.928652,13.55292],[122.671355,13.185836],[122.03465,13.784482],[121.126385,13.636687],[120.628637,13.857656],[120.679384,14.271016],[120.991819,14.525393],[120.693336,14.756671],[120.564145,14.396279],[120.070429,14.970869],[119.920929,15.406347],[119.883773,16.363704],[120.286488,16.034629],[120.390047,17.599081],[120.715867,18.505227],[121.321308,18.504065]]]]}},\n{\"type\":\"Feature\",\"id\":\"PNG\",\"properties\":{\"name\":\"Papua New Guinea\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[155.880026,-6.819997],[155.599991,-6.919991],[155.166994,-6.535931],[154.729192,-5.900828],[154.514114,-5.139118],[154.652504,-5.042431],[154.759991,-5.339984],[155.062918,-5.566792],[155.547746,-6.200655],[156.019965,-6.540014],[155.880026,-6.819997]]],[[[151.982796,-5.478063],[151.459107,-5.56028],[151.30139,-5.840728],[150.754447,-6.083763],[150.241197,-6.317754],[149.709963,-6.316513],[148.890065,-6.02604],[148.318937,-5.747142],[148.401826,-5.437756],[149.298412,-5.583742],[149.845562,-5.505503],[149.99625,-5.026101],[150.139756,-5.001348],[150.236908,-5.53222],[150.807467,-5.455842],[151.089672,-5.113693],[151.647881,-4.757074],[151.537862,-4.167807],[152.136792,-4.14879],[152.338743,-4.312966],[152.318693,-4.867661],[151.982796,-5.478063]]],[[[147.191874,-7.388024],[148.084636,-8.044108],[148.734105,-9.104664],[149.306835,-9.071436],[149.266631,-9.514406],[150.038728,-9.684318],[149.738798,-9.872937],[150.801628,-10.293687],[150.690575,-10.582713],[150.028393,-10.652476],[149.78231,-10.393267],[148.923138,-10.280923],[147.913018,-10.130441],[147.135443,-9.492444],[146.567881,-8.942555],[146.048481,-8.067414],[144.744168,-7.630128],[143.897088,-7.91533],[143.286376,-8.245491],[143.413913,-8.983069],[142.628431,-9.326821],[142.068259,-9.159596],[141.033852,-9.117893],[141.017057,-5.859022],[141.00021,-2.600151],[142.735247,-3.289153],[144.583971,-3.861418],[145.27318,-4.373738],[145.829786,-4.876498],[145.981922,-5.465609],[147.648073,-6.083659],[147.891108,-6.614015],[146.970905,-6.721657],[147.191874,-7.388024]]],[[[153.140038,-4.499983],[152.827292,-4.766427],[152.638673,-4.176127],[152.406026,-3.789743],[151.953237,-3.462062],[151.384279,-3.035422],[150.66205,-2.741486],[150.939965,-2.500002],[151.479984,-2.779985],[151.820015,-2.999972],[152.239989,-3.240009],[152.640017,-3.659983],[153.019994,-3.980015],[153.140038,-4.499983]]]]}},\n{\"type\":\"Feature\",\"id\":\"POL\",\"properties\":{\"name\":\"Poland\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[15.016996,51.106674],[14.607098,51.745188],[14.685026,52.089947],[14.4376,52.62485],[14.074521,52.981263],[14.353315,53.248171],[14.119686,53.757029],[14.8029,54.050706],[16.363477,54.513159],[17.622832,54.851536],[18.620859,54.682606],[18.696255,54.438719],[19.66064,54.426084],[20.892245,54.312525],[22.731099,54.327537],[23.243987,54.220567],[23.484128,53.912498],[23.527536,53.470122],[23.804935,53.089731],[23.799199,52.691099],[23.199494,52.486977],[23.508002,52.023647],[23.527071,51.578454],[24.029986,50.705407],[23.922757,50.424881],[23.426508,50.308506],[22.51845,49.476774],[22.776419,49.027395],[22.558138,49.085738],[21.607808,49.470107],[20.887955,49.328772],[20.415839,49.431453],[19.825023,49.217125],[19.320713,49.571574],[18.909575,49.435846],[18.853144,49.49623],[18.392914,49.988629],[17.649445,50.049038],[17.554567,50.362146],[16.868769,50.473974],[16.719476,50.215747],[16.176253,50.422607],[16.238627,50.697733],[15.490972,50.78473],[15.016996,51.106674]]]}},\n{\"type\":\"Feature\",\"id\":\"PRI\",\"properties\":{\"name\":\"Puerto Rico\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-66.282434,18.514762],[-65.771303,18.426679],[-65.591004,18.228035],[-65.847164,17.975906],[-66.599934,17.981823],[-67.184162,17.946553],[-67.242428,18.37446],[-67.100679,18.520601],[-66.282434,18.514762]]]}},\n{\"type\":\"Feature\",\"id\":\"PRK\",\"properties\":{\"name\":\"North Korea\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[130.640016,42.395009],[130.780007,42.220007],[130.400031,42.280004],[129.965949,41.941368],[129.667362,41.601104],[129.705189,40.882828],[129.188115,40.661808],[129.0104,40.485436],[128.633368,40.189847],[127.967414,40.025413],[127.533436,39.75685],[127.50212,39.323931],[127.385434,39.213472],[127.783343,39.050898],[128.349716,38.612243],[128.205746,38.370397],[127.780035,38.304536],[127.073309,38.256115],[126.68372,37.804773],[126.237339,37.840378],[126.174759,37.749686],[125.689104,37.94001],[125.568439,37.752089],[125.27533,37.669071],[125.240087,37.857224],[124.981033,37.948821],[124.712161,38.108346],[124.985994,38.548474],[125.221949,38.665857],[125.132859,38.848559],[125.38659,39.387958],[125.321116,39.551385],[124.737482,39.660344],[124.265625,39.928493],[125.079942,40.569824],[126.182045,41.107336],[126.869083,41.816569],[127.343783,41.503152],[128.208433,41.466772],[128.052215,41.994285],[129.596669,42.424982],[129.994267,42.985387],[130.640016,42.395009]]]}},\n{\"type\":\"Feature\",\"id\":\"PRT\",\"properties\":{\"name\":\"Portugal\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-9.034818,41.880571],[-8.671946,42.134689],[-8.263857,42.280469],[-8.013175,41.790886],[-7.422513,41.792075],[-7.251309,41.918346],[-6.668606,41.883387],[-6.389088,41.381815],[-6.851127,41.111083],[-6.86402,40.330872],[-7.026413,40.184524],[-7.066592,39.711892],[-7.498632,39.629571],[-7.098037,39.030073],[-7.374092,38.373059],[-7.029281,38.075764],[-7.166508,37.803894],[-7.537105,37.428904],[-7.453726,37.097788],[-7.855613,36.838269],[-8.382816,36.97888],[-8.898857,36.868809],[-8.746101,37.651346],[-8.839998,38.266243],[-9.287464,38.358486],[-9.526571,38.737429],[-9.446989,39.392066],[-9.048305,39.755093],[-8.977353,40.159306],[-8.768684,40.760639],[-8.790853,41.184334],[-8.990789,41.543459],[-9.034818,41.880571]]]}},\n{\"type\":\"Feature\",\"id\":\"PRY\",\"properties\":{\"name\":\"Paraguay\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-62.685057,-22.249029],[-62.291179,-21.051635],[-62.265961,-20.513735],[-61.786326,-19.633737],[-60.043565,-19.342747],[-59.115042,-19.356906],[-58.183471,-19.868399],[-58.166392,-20.176701],[-57.870674,-20.732688],[-57.937156,-22.090176],[-56.88151,-22.282154],[-56.473317,-22.0863],[-55.797958,-22.35693],[-55.610683,-22.655619],[-55.517639,-23.571998],[-55.400747,-23.956935],[-55.027902,-24.001274],[-54.652834,-23.839578],[-54.29296,-24.021014],[-54.293476,-24.5708],[-54.428946,-25.162185],[-54.625291,-25.739255],[-54.788795,-26.621786],[-55.695846,-27.387837],[-56.486702,-27.548499],[-57.60976,-27.395899],[-58.618174,-27.123719],[-57.63366,-25.603657],[-57.777217,-25.16234],[-58.807128,-24.771459],[-60.028966,-24.032796],[-60.846565,-23.880713],[-62.685057,-22.249029]]]}},\n{\"type\":\"Feature\",\"id\":\"QAT\",\"properties\":{\"name\":\"Qatar\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[50.810108,24.754743],[50.743911,25.482424],[51.013352,26.006992],[51.286462,26.114582],[51.589079,25.801113],[51.6067,25.21567],[51.389608,24.627386],[51.112415,24.556331],[50.810108,24.754743]]]}},\n{\"type\":\"Feature\",\"id\":\"ROU\",\"properties\":{\"name\":\"Romania\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[22.710531,47.882194],[23.142236,48.096341],[23.760958,47.985598],[24.402056,47.981878],[24.866317,47.737526],[25.207743,47.891056],[25.945941,47.987149],[26.19745,48.220881],[26.619337,48.220726],[26.924176,48.123264],[27.233873,47.826771],[27.551166,47.405117],[28.12803,46.810476],[28.160018,46.371563],[28.054443,45.944586],[28.233554,45.488283],[28.679779,45.304031],[29.149725,45.464925],[29.603289,45.293308],[29.626543,45.035391],[29.141612,44.82021],[28.837858,44.913874],[28.558081,43.707462],[27.970107,43.812468],[27.2424,44.175986],[26.065159,43.943494],[25.569272,43.688445],[24.100679,43.741051],[23.332302,43.897011],[22.944832,43.823785],[22.65715,44.234923],[22.474008,44.409228],[22.705726,44.578003],[22.459022,44.702517],[22.145088,44.478422],[21.562023,44.768947],[21.483526,45.18117],[20.874313,45.416375],[20.762175,45.734573],[20.220192,46.127469],[21.021952,46.316088],[21.626515,46.994238],[22.099768,47.672439],[22.710531,47.882194]]]}},\n{\"type\":\"Feature\",\"id\":\"RUS\",\"properties\":{\"name\":\"Russia\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[143.648007,50.7476],[144.654148,48.976391],[143.173928,49.306551],[142.558668,47.861575],[143.533492,46.836728],[143.505277,46.137908],[142.747701,46.740765],[142.09203,45.966755],[141.906925,46.805929],[142.018443,47.780133],[141.904445,48.859189],[142.1358,49.615163],[142.179983,50.952342],[141.594076,51.935435],[141.682546,53.301966],[142.606934,53.762145],[142.209749,54.225476],[142.654786,54.365881],[142.914616,53.704578],[143.260848,52.74076],[143.235268,51.75666],[143.648007,50.7476]]],[[[22.731099,54.327537],[20.892245,54.312525],[19.66064,54.426084],[19.888481,54.86616],[21.268449,55.190482],[22.315724,55.015299],[22.757764,54.856574],[22.651052,54.582741],[22.731099,54.327537]]],[[[-175.01425,66.58435],[-174.33983,66.33556],[-174.57182,67.06219],[-171.85731,66.91308],[-169.89958,65.97724],[-170.89107,65.54139],[-172.53025,65.43791],[-172.555,64.46079],[-172.95533,64.25269],[-173.89184,64.2826],[-174.65392,64.63125],[-175.98353,64.92288],[-176.20716,65.35667],[-177.22266,65.52024],[-178.35993,65.39052],[-178.90332,65.74044],[-178.68611,66.11211],[-179.88377,65.87456],[-179.43268,65.40411],[-180,64.979709],[-180,68.963636],[-177.55,68.2],[-174.92825,67.20589],[-175.01425,66.58435]]],[[[180,70.832199],[178.903425,70.78114],[178.7253,71.0988],[180,71.515714],[180,70.832199]]],[[[-178.69378,70.89302],[-180,70.832199],[-180,71.515714],[-179.871875,71.55762],[-179.02433,71.55553],[-177.577945,71.26948],[-177.663575,71.13277],[-178.69378,70.89302]]],[[[143.60385,73.21244],[142.08763,73.20544],[140.038155,73.31692],[139.86312,73.36983],[140.81171,73.76506],[142.06207,73.85758],[143.48283,73.47525],[143.60385,73.21244]]],[[[150.73167,75.08406],[149.575925,74.68892],[147.977465,74.778355],[146.11919,75.17298],[146.358485,75.49682],[148.22223,75.345845],[150.73167,75.08406]]],[[[145.086285,75.562625],[144.3,74.82],[140.61381,74.84768],[138.95544,74.61148],[136.97439,75.26167],[137.51176,75.94917],[138.831075,76.13676],[141.471615,76.09289],[145.086285,75.562625]]],[[[57.535693,70.720464],[56.944979,70.632743],[53.677375,70.762658],[53.412017,71.206662],[51.601895,71.474759],[51.455754,72.014881],[52.478275,72.229442],[52.444169,72.774731],[54.427614,73.627548],[53.50829,73.749814],[55.902459,74.627486],[55.631933,75.081412],[57.868644,75.60939],[61.170044,76.251883],[64.498368,76.439055],[66.210977,76.809782],[68.15706,76.939697],[68.852211,76.544811],[68.180573,76.233642],[64.637326,75.737755],[61.583508,75.260885],[58.477082,74.309056],[56.986786,73.333044],[55.419336,72.371268],[55.622838,71.540595],[57.535693,70.720464]]],[[[106.97013,76.97419],[107.24,76.48],[108.1538,76.72335],[111.07726,76.71],[113.33151,76.22224],[114.13417,75.84764],[113.88539,75.32779],[112.77918,75.03186],[110.15125,74.47673],[109.4,74.18],[110.64,74.04],[112.11919,73.78774],[113.01954,73.97693],[113.52958,73.33505],[113.96881,73.59488],[115.56782,73.75285],[118.77633,73.58772],[119.02,73.12],[123.20066,72.97122],[123.25777,73.73503],[125.38,73.56],[126.97644,73.56549],[128.59126,73.03871],[129.05157,72.39872],[128.46,71.98],[129.71599,71.19304],[131.28858,70.78699],[132.2535,71.8363],[133.85766,71.38642],[135.56193,71.65525],[137.49755,71.34763],[138.23409,71.62803],[139.86983,71.48783],[139.14791,72.41619],[140.46817,72.84941],[149.5,72.2],[150.35118,71.60643],[152.9689,70.84222],[157.00688,71.03141],[158.99779,70.86672],[159.83031,70.45324],[159.70866,69.72198],[160.94053,69.43728],[162.27907,69.64204],[164.05248,69.66823],[165.94037,69.47199],[167.83567,69.58269],[169.57763,68.6938],[170.81688,69.01363],[170.0082,69.65276],[170.45345,70.09703],[173.64391,69.81743],[175.72403,69.87725],[178.6,69.4],[180,68.963636],[180,64.979709],[179.99281,64.97433],[178.7072,64.53493],[177.41128,64.60821],[178.313,64.07593],[178.90825,63.25197],[179.37034,62.98262],[179.48636,62.56894],[179.22825,62.3041],[177.3643,62.5219],[174.56929,61.76915],[173.68013,61.65261],[172.15,60.95],[170.6985,60.33618],[170.33085,59.88177],[168.90046,60.57355],[166.29498,59.78855],[165.84,60.16],[164.87674,59.7316],[163.53929,59.86871],[163.21711,59.21101],[162.01733,58.24328],[162.05297,57.83912],[163.19191,57.61503],[163.05794,56.15924],[162.12958,56.12219],[161.70146,55.28568],[162.11749,54.85514],[160.36877,54.34433],[160.02173,53.20257],[158.53094,52.95868],[158.23118,51.94269],[156.78979,51.01105],[156.42,51.7],[155.99182,53.15895],[155.43366,55.38103],[155.91442,56.76792],[156.75815,57.3647],[156.81035,57.83204],[158.36433,58.05575],[160.15064,59.31477],[161.87204,60.343],[163.66969,61.1409],[164.47355,62.55061],[163.25842,62.46627],[162.65791,61.6425],[160.12148,60.54423],[159.30232,61.77396],[156.72068,61.43442],[154.21806,59.75818],[155.04375,59.14495],[152.81185,58.88385],[151.26573,58.78089],[151.33815,59.50396],[149.78371,59.65573],[148.54481,59.16448],[145.48722,59.33637],[142.19782,59.03998],[138.95848,57.08805],[135.12619,54.72959],[136.70171,54.60355],[137.19342,53.97732],[138.1647,53.75501],[138.80463,54.25455],[139.90151,54.18968],[141.34531,53.08957],[141.37923,52.23877],[140.59742,51.23967],[140.51308,50.04553],[140.06193,48.44671],[138.55472,46.99965],[138.21971,46.30795],[136.86232,45.1435],[135.51535,43.989],[134.86939,43.39821],[133.53687,42.81147],[132.90627,42.79849],[132.27807,43.28456],[130.93587,42.55274],[130.78,42.22],[130.64,42.395],[130.633866,42.903015],[131.144688,42.92999],[131.288555,44.11152],[131.02519,44.96796],[131.883454,45.321162],[133.09712,45.14409],[133.769644,46.116927],[134.11235,47.21248],[134.50081,47.57845],[135.026311,48.47823],[133.373596,48.183442],[132.50669,47.78896],[130.98726,47.79013],[130.582293,48.729687],[129.397818,49.4406],[127.6574,49.76027],[127.287456,50.739797],[126.939157,51.353894],[126.564399,51.784255],[125.946349,52.792799],[125.068211,53.161045],[123.57147,53.4588],[122.245748,53.431726],[121.003085,53.251401],[120.177089,52.753886],[120.725789,52.516226],[120.7382,51.96411],[120.18208,51.64355],[119.27939,50.58292],[119.288461,50.142883],[117.879244,49.510983],[116.678801,49.888531],[115.485695,49.805177],[114.96211,50.140247],[114.362456,50.248303],[112.89774,49.543565],[111.581231,49.377968],[110.662011,49.130128],[109.402449,49.292961],[108.475167,49.282548],[107.868176,49.793705],[106.888804,50.274296],[105.886591,50.406019],[104.62158,50.27532],[103.676545,50.089966],[102.25589,50.51056],[102.06521,51.25991],[100.88948,51.516856],[99.981732,51.634006],[98.861491,52.047366],[97.82574,51.010995],[98.231762,50.422401],[97.25976,49.72605],[95.81402,49.97746],[94.815949,50.013433],[94.147566,50.480537],[93.10421,50.49529],[92.234712,50.802171],[90.713667,50.331812],[88.805567,49.470521],[87.751264,49.297198],[87.35997,49.214981],[86.829357,49.826675],[85.54127,49.692859],[85.11556,50.117303],[84.416377,50.3114],[83.935115,50.889246],[83.383004,51.069183],[81.945986,50.812196],[80.568447,51.388336],[80.03556,50.864751],[77.800916,53.404415],[76.525179,54.177003],[76.8911,54.490524],[74.38482,53.54685],[73.425679,53.48981],[73.508516,54.035617],[72.22415,54.376655],[71.180131,54.133285],[70.865267,55.169734],[69.068167,55.38525],[68.1691,54.970392],[65.66687,54.60125],[65.178534,54.354228],[61.4366,54.00625],[60.978066,53.664993],[61.699986,52.979996],[60.739993,52.719986],[60.927269,52.447548],[59.967534,51.96042],[61.588003,51.272659],[61.337424,50.79907],[59.932807,50.842194],[59.642282,50.545442],[58.36332,51.06364],[56.77798,51.04355],[55.71694,50.62171],[54.532878,51.02624],[52.328724,51.718652],[50.766648,51.692762],[48.702382,50.605128],[48.577841,49.87476],[47.54948,50.454698],[46.751596,49.356006],[47.043672,49.152039],[46.466446,48.394152],[47.31524,47.71585],[48.05725,47.74377],[48.694734,47.075628],[48.59325,46.56104],[49.10116,46.39933],[48.64541,45.80629],[47.67591,45.64149],[46.68201,44.6092],[47.59094,43.66016],[47.49252,42.98658],[48.58437,41.80888],[47.987283,41.405819],[47.815666,41.151416],[47.373315,41.219732],[46.686071,41.827137],[46.404951,41.860675],[45.7764,42.09244],[45.470279,42.502781],[44.537623,42.711993],[43.93121,42.55496],[43.75599,42.74083],[42.3944,43.2203],[40.92219,43.38215],[40.076965,43.553104],[39.955009,43.434998],[38.68,44.28],[37.53912,44.65721],[36.67546,45.24469],[37.40317,45.40451],[38.23295,46.24087],[37.67372,46.63657],[39.14767,47.04475],[39.1212,47.26336],[38.223538,47.10219],[38.255112,47.5464],[38.77057,47.82562],[39.738278,47.898937],[39.89562,48.23241],[39.67465,48.78382],[40.080789,49.30743],[40.06904,49.60105],[38.594988,49.926462],[38.010631,49.915662],[37.39346,50.383953],[36.626168,50.225591],[35.356116,50.577197],[35.37791,50.77394],[35.022183,51.207572],[34.224816,51.255993],[34.141978,51.566413],[34.391731,51.768882],[33.7527,52.335075],[32.715761,52.238465],[32.412058,52.288695],[32.15944,52.06125],[31.78597,52.10168],[31.540018,52.742052],[31.305201,53.073996],[31.49764,53.16743],[32.304519,53.132726],[32.693643,53.351421],[32.405599,53.618045],[31.731273,53.794029],[31.791424,53.974639],[31.384472,54.157056],[30.757534,54.811771],[30.971836,55.081548],[30.873909,55.550976],[29.896294,55.789463],[29.371572,55.670091],[29.229513,55.918344],[28.176709,56.16913],[27.855282,56.759326],[27.770016,57.244258],[27.288185,57.474528],[27.716686,57.791899],[27.42015,58.72457],[28.131699,59.300825],[27.98112,59.47537],[29.1177,60.02805],[28.07,60.50352],[30.211107,61.780028],[31.139991,62.357693],[31.516092,62.867687],[30.035872,63.552814],[30.444685,64.204453],[29.54443,64.948672],[30.21765,65.80598],[29.054589,66.944286],[29.977426,67.698297],[28.445944,68.364613],[28.59193,69.064777],[29.39955,69.15692],[31.10108,69.55811],[32.13272,69.90595],[33.77547,69.30142],[36.51396,69.06342],[40.29234,67.9324],[41.05987,67.45713],[41.12595,66.79158],[40.01583,66.26618],[38.38295,65.99953],[33.91871,66.75961],[33.18444,66.63253],[34.81477,65.90015],[34.878574,65.436213],[34.94391,64.41437],[36.23129,64.10945],[37.01273,63.84983],[37.14197,64.33471],[36.539579,64.76446],[37.17604,65.14322],[39.59345,64.52079],[40.4356,64.76446],[39.7626,65.49682],[42.09309,66.47623],[43.01604,66.41858],[43.94975,66.06908],[44.53226,66.75634],[43.69839,67.35245],[44.18795,67.95051],[43.45282,68.57079],[46.25,68.25],[46.82134,67.68997],[45.55517,67.56652],[45.56202,67.01005],[46.34915,66.66767],[47.89416,66.88455],[48.13876,67.52238],[50.22766,67.99867],[53.71743,68.85738],[54.47171,68.80815],[53.48582,68.20131],[54.72628,68.09702],[55.44268,68.43866],[57.31702,68.46628],[58.802,68.88082],[59.94142,68.27844],[61.07784,68.94069],[60.03,69.52],[60.55,69.85],[63.504,69.54739],[64.888115,69.234835],[68.51216,68.09233],[69.18068,68.61563],[68.16444,69.14436],[68.13522,69.35649],[66.93008,69.45461],[67.25976,69.92873],[66.72492,70.70889],[66.69466,71.02897],[68.54006,71.9345],[69.19636,72.84336],[69.94,73.04],[72.58754,72.77629],[72.79603,72.22006],[71.84811,71.40898],[72.47011,71.09019],[72.79188,70.39114],[72.5647,69.02085],[73.66787,68.4079],[73.2387,67.7404],[71.28,66.32],[72.42301,66.17267],[72.82077,66.53267],[73.92099,66.78946],[74.18651,67.28429],[75.052,67.76047],[74.46926,68.32899],[74.93584,68.98918],[73.84236,69.07146],[73.60187,69.62763],[74.3998,70.63175],[73.1011,71.44717],[74.89082,72.12119],[74.65926,72.83227],[75.15801,72.85497],[75.68351,72.30056],[75.28898,71.33556],[76.35911,71.15287],[75.90313,71.87401],[77.57665,72.26717],[79.65202,72.32011],[81.5,71.75],[80.61071,72.58285],[80.51109,73.6482],[82.25,73.85],[84.65526,73.80591],[86.8223,73.93688],[86.00956,74.45967],[87.16682,75.11643],[88.31571,75.14393],[90.26,75.64],[92.90058,75.77333],[93.23421,76.0472],[95.86,76.14],[96.67821,75.91548],[98.92254,76.44689],[100.75967,76.43028],[101.03532,76.86189],[101.99084,77.28754],[104.3516,77.69792],[106.06664,77.37389],[104.705,77.1274],[106.97013,76.97419]]],[[[105.07547,78.30689],[99.43814,77.921],[101.2649,79.23399],[102.08635,79.34641],[102.837815,79.28129],[105.37243,78.71334],[105.07547,78.30689]]],[[[51.136187,80.54728],[49.793685,80.415428],[48.894411,80.339567],[48.754937,80.175468],[47.586119,80.010181],[46.502826,80.247247],[47.072455,80.559424],[44.846958,80.58981],[46.799139,80.771918],[48.318477,80.78401],[48.522806,80.514569],[49.09719,80.753986],[50.039768,80.918885],[51.522933,80.699726],[51.136187,80.54728]]],[[[99.93976,78.88094],[97.75794,78.7562],[94.97259,79.044745],[93.31288,79.4265],[92.5454,80.14379],[91.18107,80.34146],[93.77766,81.0246],[95.940895,81.2504],[97.88385,80.746975],[100.186655,79.780135],[99.93976,78.88094]]]]}},\n{\"type\":\"Feature\",\"id\":\"RWA\",\"properties\":{\"name\":\"Rwanda\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[30.419105,-1.134659],[30.816135,-1.698914],[30.758309,-2.28725],[30.469696,-2.413858],[29.938359,-2.348487],[29.632176,-2.917858],[29.024926,-2.839258],[29.117479,-2.292211],[29.254835,-2.21511],[29.291887,-1.620056],[29.579466,-1.341313],[29.821519,-1.443322],[30.419105,-1.134659]]]}},\n{\"type\":\"Feature\",\"id\":\"ESH\",\"properties\":{\"name\":\"Western Sahara\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-8.794884,27.120696],[-8.817828,27.656426],[-8.66559,27.656426],[-8.665124,27.589479],[-8.6844,27.395744],[-8.687294,25.881056],[-11.969419,25.933353],[-11.937224,23.374594],[-12.874222,23.284832],[-13.118754,22.77122],[-12.929102,21.327071],[-16.845194,21.333323],[-17.063423,20.999752],[-17.020428,21.42231],[-17.002962,21.420734],[-14.750955,21.5006],[-14.630833,21.86094],[-14.221168,22.310163],[-13.89111,23.691009],[-12.500963,24.770116],[-12.030759,26.030866],[-11.71822,26.104092],[-11.392555,26.883424],[-10.551263,26.990808],[-10.189424,26.860945],[-9.735343,26.860945],[-9.413037,27.088476],[-8.794884,27.120696]]]}},\n{\"type\":\"Feature\",\"id\":\"SAU\",\"properties\":{\"name\":\"Saudi Arabia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[42.779332,16.347891],[42.649573,16.774635],[42.347989,17.075806],[42.270888,17.474722],[41.754382,17.833046],[41.221391,18.6716],[40.939341,19.486485],[40.247652,20.174635],[39.801685,20.338862],[39.139399,21.291905],[39.023696,21.986875],[39.066329,22.579656],[38.492772,23.688451],[38.02386,24.078686],[37.483635,24.285495],[37.154818,24.858483],[37.209491,25.084542],[36.931627,25.602959],[36.639604,25.826228],[36.249137,26.570136],[35.640182,27.37652],[35.130187,28.063352],[34.632336,28.058546],[34.787779,28.607427],[34.83222,28.957483],[34.956037,29.356555],[36.068941,29.197495],[36.501214,29.505254],[36.740528,29.865283],[37.503582,30.003776],[37.66812,30.338665],[37.998849,30.5085],[37.002166,31.508413],[39.004886,32.010217],[39.195468,32.161009],[40.399994,31.889992],[41.889981,31.190009],[44.709499,29.178891],[46.568713,29.099025],[47.459822,29.002519],[47.708851,28.526063],[48.416094,28.552004],[48.807595,27.689628],[49.299554,27.461218],[49.470914,27.109999],[50.152422,26.689663],[50.212935,26.277027],[50.113303,25.943972],[50.239859,25.60805],[50.527387,25.327808],[50.660557,24.999896],[50.810108,24.754743],[51.112415,24.556331],[51.389608,24.627386],[51.579519,24.245497],[51.617708,24.014219],[52.000733,23.001154],[55.006803,22.496948],[55.208341,22.70833],[55.666659,22.000001],[54.999982,19.999994],[52.00001,19.000003],[49.116672,18.616668],[48.183344,18.166669],[47.466695,17.116682],[47.000005,16.949999],[46.749994,17.283338],[46.366659,17.233315],[45.399999,17.333335],[45.216651,17.433329],[44.062613,17.410359],[43.791519,17.319977],[43.380794,17.579987],[43.115798,17.08844],[43.218375,16.66689],[42.779332,16.347891]]]}},\n{\"type\":\"Feature\",\"id\":\"SDN\",\"properties\":{\"name\":\"Sudan\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[33.963393,9.464285],[33.824963,9.484061],[33.842131,9.981915],[33.721959,10.325262],[33.206938,10.720112],[33.086766,11.441141],[33.206938,12.179338],[32.743419,12.248008],[32.67475,12.024832],[32.073892,11.97333],[32.314235,11.681484],[32.400072,11.080626],[31.850716,10.531271],[31.352862,9.810241],[30.837841,9.707237],[29.996639,10.290927],[29.618957,10.084919],[29.515953,9.793074],[29.000932,9.604232],[28.966597,9.398224],[27.97089,9.398224],[27.833551,9.604232],[27.112521,9.638567],[26.752006,9.466893],[26.477328,9.55273],[25.962307,10.136421],[25.790633,10.411099],[25.069604,10.27376],[24.794926,9.810241],[24.537415,8.917538],[24.194068,8.728696],[23.88698,8.61973],[23.805813,8.666319],[23.459013,8.954286],[23.394779,9.265068],[23.55725,9.681218],[23.554304,10.089255],[22.977544,10.714463],[22.864165,11.142395],[22.87622,11.38461],[22.50869,11.67936],[22.49762,12.26024],[22.28801,12.64605],[21.93681,12.58818],[22.03759,12.95546],[22.29658,13.37232],[22.18329,13.78648],[22.51202,14.09318],[22.30351,14.32682],[22.56795,14.94429],[23.02459,15.68072],[23.88689,15.61084],[23.83766,19.58047],[23.85,20],[25,20.00304],[25,22],[29.02,22],[32.9,22],[36.86623,22],[37.18872,21.01885],[36.96941,20.83744],[37.1147,19.80796],[37.48179,18.61409],[37.86276,18.36786],[38.41009,17.998307],[37.904,17.42754],[37.16747,17.26314],[36.85253,16.95655],[36.75389,16.29186],[36.32322,14.82249],[36.42951,14.42211],[36.27022,13.56333],[35.86363,12.57828],[35.26049,12.08286],[34.83163,11.31896],[34.73115,10.91017],[34.25745,10.63009],[33.96162,9.58358],[33.963393,9.464285]]]}},\n{\"type\":\"Feature\",\"id\":\"SSD\",\"properties\":{\"name\":\"South Sudan\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[33.963393,9.464285],[33.97498,8.68456],[33.8255,8.37916],[33.2948,8.35458],[32.95418,7.78497],[33.56829,7.71334],[34.0751,7.22595],[34.25032,6.82607],[34.70702,6.59422],[35.298007,5.506],[34.620196,4.847123],[34.005,4.249885],[33.39,3.79],[32.68642,3.79232],[31.88145,3.55827],[31.24556,3.7819],[30.83385,3.50917],[29.95349,4.1737],[29.715995,4.600805],[29.159078,4.389267],[28.696678,4.455077],[28.428994,4.287155],[27.979977,4.408413],[27.374226,5.233944],[27.213409,5.550953],[26.465909,5.946717],[26.213418,6.546603],[25.796648,6.979316],[25.124131,7.500085],[25.114932,7.825104],[24.567369,8.229188],[23.88698,8.61973],[24.194068,8.728696],[24.537415,8.917538],[24.794926,9.810241],[25.069604,10.27376],[25.790633,10.411099],[25.962307,10.136421],[26.477328,9.55273],[26.752006,9.466893],[27.112521,9.638567],[27.833551,9.604232],[27.97089,9.398224],[28.966597,9.398224],[29.000932,9.604232],[29.515953,9.793074],[29.618957,10.084919],[29.996639,10.290927],[30.837841,9.707237],[31.352862,9.810241],[31.850716,10.531271],[32.400072,11.080626],[32.314235,11.681484],[32.073892,11.97333],[32.67475,12.024832],[32.743419,12.248008],[33.206938,12.179338],[33.086766,11.441141],[33.206938,10.720112],[33.721959,10.325262],[33.842131,9.981915],[33.824963,9.484061],[33.963393,9.464285]]]}},\n{\"type\":\"Feature\",\"id\":\"SEN\",\"properties\":{\"name\":\"Senegal\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-16.713729,13.594959],[-17.126107,14.373516],[-17.625043,14.729541],[-17.185173,14.919477],[-16.700706,15.621527],[-16.463098,16.135036],[-16.12069,16.455663],[-15.623666,16.369337],[-15.135737,16.587282],[-14.577348,16.598264],[-14.099521,16.304302],[-13.435738,16.039383],[-12.830658,15.303692],[-12.17075,14.616834],[-12.124887,13.994727],[-11.927716,13.422075],[-11.553398,13.141214],[-11.467899,12.754519],[-11.513943,12.442988],[-11.658301,12.386583],[-12.203565,12.465648],[-12.278599,12.35444],[-12.499051,12.33209],[-13.217818,12.575874],[-13.700476,12.586183],[-15.548477,12.62817],[-15.816574,12.515567],[-16.147717,12.547762],[-16.677452,12.384852],[-16.841525,13.151394],[-15.931296,13.130284],[-15.691001,13.270353],[-15.511813,13.27857],[-15.141163,13.509512],[-14.712197,13.298207],[-14.277702,13.280585],[-13.844963,13.505042],[-14.046992,13.794068],[-14.376714,13.62568],[-14.687031,13.630357],[-15.081735,13.876492],[-15.39877,13.860369],[-15.624596,13.623587],[-16.713729,13.594959]]]}},\n{\"type\":\"Feature\",\"id\":\"SLB\",\"properties\":{\"name\":\"Solomon Islands\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[162.119025,-10.482719],[162.398646,-10.826367],[161.700032,-10.820011],[161.319797,-10.204751],[161.917383,-10.446701],[162.119025,-10.482719]]],[[[160.852229,-9.872937],[160.462588,-9.89521],[159.849447,-9.794027],[159.640003,-9.63998],[159.702945,-9.24295],[160.362956,-9.400304],[160.688518,-9.610162],[160.852229,-9.872937]]],[[[161.679982,-9.599982],[161.529397,-9.784312],[160.788253,-8.917543],[160.579997,-8.320009],[160.920028,-8.320009],[161.280006,-9.120011],[161.679982,-9.599982]]],[[[159.875027,-8.33732],[159.917402,-8.53829],[159.133677,-8.114181],[158.586114,-7.754824],[158.21115,-7.421872],[158.359978,-7.320018],[158.820001,-7.560003],[159.640003,-8.020027],[159.875027,-8.33732]]],[[[157.538426,-7.34782],[157.33942,-7.404767],[156.90203,-7.176874],[156.491358,-6.765943],[156.542828,-6.599338],[157.14,-7.021638],[157.538426,-7.34782]]]]}},\n{\"type\":\"Feature\",\"id\":\"SLE\",\"properties\":{\"name\":\"Sierra Leone\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-11.438779,6.785917],[-11.708195,6.860098],[-12.428099,7.262942],[-12.949049,7.798646],[-13.124025,8.163946],[-13.24655,8.903049],[-12.711958,9.342712],[-12.596719,9.620188],[-12.425929,9.835834],[-12.150338,9.858572],[-11.917277,10.046984],[-11.117481,10.045873],[-10.839152,9.688246],[-10.622395,9.26791],[-10.65477,8.977178],[-10.494315,8.715541],[-10.505477,8.348896],[-10.230094,8.406206],[-10.695595,7.939464],[-11.146704,7.396706],[-11.199802,7.105846],[-11.438779,6.785917]]]}},\n{\"type\":\"Feature\",\"id\":\"SLV\",\"properties\":{\"name\":\"El Salvador\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-87.793111,13.38448],[-87.904112,13.149017],[-88.483302,13.163951],[-88.843228,13.259734],[-89.256743,13.458533],[-89.812394,13.520622],[-90.095555,13.735338],[-90.064678,13.88197],[-89.721934,14.134228],[-89.534219,14.244816],[-89.587343,14.362586],[-89.353326,14.424133],[-89.058512,14.340029],[-88.843073,14.140507],[-88.541231,13.980155],[-88.503998,13.845486],[-88.065343,13.964626],[-87.859515,13.893312],[-87.723503,13.78505],[-87.793111,13.38448]]]}},\n{\"type\":\"Feature\",\"id\":\"-99\",\"properties\":{\"name\":\"Somaliland\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[48.93813,9.451749],[48.486736,8.837626],[47.78942,8.003],[46.948328,7.996877],[43.67875,9.18358],[43.296975,9.540477],[42.92812,10.02194],[42.55876,10.57258],[42.776852,10.926879],[43.145305,11.46204],[43.47066,11.27771],[43.666668,10.864169],[44.117804,10.445538],[44.614259,10.442205],[45.556941,10.698029],[46.645401,10.816549],[47.525658,11.127228],[48.021596,11.193064],[48.378784,11.375482],[48.948206,11.410622],[48.942005,11.394266],[48.938491,10.982327],[48.938233,9.9735],[48.93813,9.451749]]]}},\n{\"type\":\"Feature\",\"id\":\"SOM\",\"properties\":{\"name\":\"Somalia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[49.72862,11.5789],[50.25878,11.67957],[50.73202,12.0219],[51.1112,12.02464],[51.13387,11.74815],[51.04153,11.16651],[51.04531,10.6409],[50.83418,10.27972],[50.55239,9.19874],[50.07092,8.08173],[49.4527,6.80466],[48.59455,5.33911],[47.74079,4.2194],[46.56476,2.85529],[45.56399,2.04576],[44.06815,1.05283],[43.13597,0.2922],[42.04157,-0.91916],[41.81095,-1.44647],[41.58513,-1.68325],[40.993,-0.85829],[40.98105,2.78452],[41.855083,3.918912],[42.12861,4.23413],[42.76967,4.25259],[43.66087,4.95755],[44.9636,5.00162],[47.78942,8.003],[48.486736,8.837626],[48.93813,9.451749],[48.938233,9.9735],[48.938491,10.982327],[48.942005,11.394266],[48.948205,11.410617],[49.26776,11.43033],[49.72862,11.5789]]]}},\n{\"type\":\"Feature\",\"id\":\"SRB\",\"properties\":{\"name\":\"Republic of Serbia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[20.874313,45.416375],[21.483526,45.18117],[21.562023,44.768947],[22.145088,44.478422],[22.459022,44.702517],[22.705726,44.578003],[22.474008,44.409228],[22.65715,44.234923],[22.410446,44.008063],[22.500157,43.642814],[22.986019,43.211161],[22.604801,42.898519],[22.436595,42.580321],[22.545012,42.461362],[22.380526,42.32026],[21.91708,42.30364],[21.576636,42.245224],[21.54332,42.32025],[21.66292,42.43922],[21.77505,42.6827],[21.63302,42.67717],[21.43866,42.86255],[21.27421,42.90959],[21.143395,43.068685],[20.95651,43.13094],[20.81448,43.27205],[20.63508,43.21671],[20.49679,42.88469],[20.25758,42.81275],[20.3398,42.89852],[19.95857,43.10604],[19.63,43.21378],[19.48389,43.35229],[19.21852,43.52384],[19.454,43.5681],[19.59976,44.03847],[19.11761,44.42307],[19.36803,44.863],[19.00548,44.86023],[19.390476,45.236516],[19.072769,45.521511],[18.82982,45.90888],[19.596045,46.17173],[20.220192,46.127469],[20.762175,45.734573],[20.874313,45.416375]]]}},\n{\"type\":\"Feature\",\"id\":\"SUR\",\"properties\":{\"name\":\"Suriname\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-57.147436,5.97315],[-55.949318,5.772878],[-55.84178,5.953125],[-55.03325,6.025291],[-53.958045,5.756548],[-54.478633,4.896756],[-54.399542,4.212611],[-54.006931,3.620038],[-54.181726,3.18978],[-54.269705,2.732392],[-54.524754,2.311849],[-55.097587,2.523748],[-55.569755,2.421506],[-55.973322,2.510364],[-56.073342,2.220795],[-55.9056,2.021996],[-55.995698,1.817667],[-56.539386,1.899523],[-57.150098,2.768927],[-57.281433,3.333492],[-57.601569,3.334655],[-58.044694,4.060864],[-57.86021,4.576801],[-57.914289,4.812626],[-57.307246,5.073567],[-57.147436,5.97315]]]}},\n{\"type\":\"Feature\",\"id\":\"SVK\",\"properties\":{\"name\":\"Slovakia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[18.853144,49.49623],[18.909575,49.435846],[19.320713,49.571574],[19.825023,49.217125],[20.415839,49.431453],[20.887955,49.328772],[21.607808,49.470107],[22.558138,49.085738],[22.280842,48.825392],[22.085608,48.422264],[21.872236,48.319971],[20.801294,48.623854],[20.473562,48.56285],[20.239054,48.327567],[19.769471,48.202691],[19.661364,48.266615],[19.174365,48.111379],[18.777025,48.081768],[18.696513,47.880954],[17.857133,47.758429],[17.488473,47.867466],[16.979667,48.123497],[16.879983,48.470013],[16.960288,48.596982],[17.101985,48.816969],[17.545007,48.800019],[17.886485,48.903475],[17.913512,48.996493],[18.104973,49.043983],[18.170498,49.271515],[18.399994,49.315001],[18.554971,49.495015],[18.853144,49.49623]]]}},\n{\"type\":\"Feature\",\"id\":\"SVN\",\"properties\":{\"name\":\"Slovenia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[13.806475,46.509306],[14.632472,46.431817],[15.137092,46.658703],[16.011664,46.683611],[16.202298,46.852386],[16.370505,46.841327],[16.564808,46.503751],[15.768733,46.238108],[15.67153,45.834154],[15.323954,45.731783],[15.327675,45.452316],[14.935244,45.471695],[14.595109,45.634941],[14.411968,45.466166],[13.71506,45.500324],[13.93763,45.591016],[13.69811,46.016778],[13.806475,46.509306]]]}},\n{\"type\":\"Feature\",\"id\":\"SWE\",\"properties\":{\"name\":\"Sweden\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[22.183173,65.723741],[21.213517,65.026005],[21.369631,64.413588],[19.778876,63.609554],[17.847779,62.7494],[17.119555,61.341166],[17.831346,60.636583],[18.787722,60.081914],[17.869225,58.953766],[16.829185,58.719827],[16.44771,57.041118],[15.879786,56.104302],[14.666681,56.200885],[14.100721,55.407781],[12.942911,55.361737],[12.625101,56.30708],[11.787942,57.441817],[11.027369,58.856149],[11.468272,59.432393],[12.300366,60.117933],[12.631147,61.293572],[11.992064,61.800362],[11.930569,63.128318],[12.579935,64.066219],[13.571916,64.049114],[13.919905,64.445421],[13.55569,64.787028],[15.108411,66.193867],[16.108712,67.302456],[16.768879,68.013937],[17.729182,68.010552],[17.993868,68.567391],[19.87856,68.407194],[20.025269,69.065139],[20.645593,69.106247],[21.978535,68.616846],[23.539473,67.936009],[23.56588,66.396051],[23.903379,66.006927],[22.183173,65.723741]]],[[[17.061767,57.385783],[17.210083,57.326521],[16.430053,56.179196],[16.364135,56.556455],[17.061767,57.385783]]],[[[19.357910,57.958588],[18.803100,57.651279],[18.825073,57.444949],[18.995361,57.441993],[18.951416,57.370976],[18.693237,57.305756],[18.709716,57.204734],[18.462524,57.127295],[18.319702,56.926992],[18.105468,56.891003],[18.187866,57.109402],[18.072509,57.267163],[18.154907,57.394664],[18.094482,57.545312],[18.660278,57.929434],[19.039306,57.941098],[19.105224,57.993543],[19.374389,57.996454],[19.357910,57.958588]]],[[[20.846557,63.823710],[21.066284,63.829768],[20.972900,63.715670],[20.824584,63.579121],[20.695495,63.591340],[20.819091,63.714454],[20.799865,63.780059],[20.846557,63.823710]]]]}},\n{\"type\":\"Feature\",\"id\":\"SWZ\",\"properties\":{\"name\":\"Swaziland\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[32.071665,-26.73382],[31.86806,-27.177927],[31.282773,-27.285879],[30.685962,-26.743845],[30.676609,-26.398078],[30.949667,-26.022649],[31.04408,-25.731452],[31.333158,-25.660191],[31.837778,-25.843332],[31.985779,-26.29178],[32.071665,-26.73382]]]}},\n{\"type\":\"Feature\",\"id\":\"SYR\",\"properties\":{\"name\":\"Syria\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[38.792341,33.378686],[36.834062,32.312938],[35.719918,32.709192],[35.700798,32.716014],[35.836397,32.868123],[35.821101,33.277426],[36.06646,33.824912],[36.61175,34.201789],[36.448194,34.593935],[35.998403,34.644914],[35.905023,35.410009],[36.149763,35.821535],[36.41755,36.040617],[36.685389,36.259699],[36.739494,36.81752],[37.066761,36.623036],[38.167727,36.90121],[38.699891,36.712927],[39.52258,36.716054],[40.673259,37.091276],[41.212089,37.074352],[42.349591,37.229873],[41.837064,36.605854],[41.289707,36.358815],[41.383965,35.628317],[41.006159,34.419372],[38.792341,33.378686]]]}},\n{\"type\":\"Feature\",\"id\":\"TCD\",\"properties\":{\"name\":\"Chad\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[14.495787,12.859396],[14.595781,13.330427],[13.954477,13.353449],[13.956699,13.996691],[13.540394,14.367134],[13.97217,15.68437],[15.247731,16.627306],[15.300441,17.92795],[15.685741,19.95718],[15.903247,20.387619],[15.487148,20.730415],[15.47106,21.04845],[15.096888,21.308519],[14.8513,22.86295],[15.86085,23.40972],[19.84926,21.49509],[23.83766,19.58047],[23.88689,15.61084],[23.02459,15.68072],[22.56795,14.94429],[22.30351,14.32682],[22.51202,14.09318],[22.18329,13.78648],[22.29658,13.37232],[22.03759,12.95546],[21.93681,12.58818],[22.28801,12.64605],[22.49762,12.26024],[22.50869,11.67936],[22.87622,11.38461],[22.864165,11.142395],[22.231129,10.971889],[21.723822,10.567056],[21.000868,9.475985],[20.059685,9.012706],[19.094008,9.074847],[18.81201,8.982915],[18.911022,8.630895],[18.389555,8.281304],[17.96493,7.890914],[16.705988,7.508328],[16.456185,7.734774],[16.290562,7.754307],[16.106232,7.497088],[15.27946,7.421925],[15.436092,7.692812],[15.120866,8.38215],[14.979996,8.796104],[14.544467,8.965861],[13.954218,9.549495],[14.171466,10.021378],[14.627201,9.920919],[14.909354,9.992129],[15.467873,9.982337],[14.923565,10.891325],[14.960152,11.555574],[14.89336,12.21905],[14.495787,12.859396]]]}},\n{\"type\":\"Feature\",\"id\":\"TGO\",\"properties\":{\"name\":\"Togo\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[1.865241,6.142158],[1.060122,5.928837],[0.836931,6.279979],[0.570384,6.914359],[0.490957,7.411744],[0.712029,8.312465],[0.461192,8.677223],[0.365901,9.465004],[0.36758,10.191213],[-0.049785,10.706918],[0.023803,11.018682],[0.899563,10.997339],[0.772336,10.470808],[1.077795,10.175607],[1.425061,9.825395],[1.463043,9.334624],[1.664478,9.12859],[1.618951,6.832038],[1.865241,6.142158]]]}},\n{\"type\":\"Feature\",\"id\":\"THA\",\"properties\":{\"name\":\"Thailand\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[102.584932,12.186595],[101.687158,12.64574],[100.83181,12.627085],[100.978467,13.412722],[100.097797,13.406856],[100.018733,12.307001],[99.478921,10.846367],[99.153772,9.963061],[99.222399,9.239255],[99.873832,9.207862],[100.279647,8.295153],[100.459274,7.429573],[101.017328,6.856869],[101.623079,6.740622],[102.141187,6.221636],[101.814282,5.810808],[101.154219,5.691384],[101.075516,6.204867],[100.259596,6.642825],[100.085757,6.464489],[99.690691,6.848213],[99.519642,7.343454],[98.988253,7.907993],[98.503786,8.382305],[98.339662,7.794512],[98.150009,8.350007],[98.25915,8.973923],[98.553551,9.93296],[99.038121,10.960546],[99.587286,11.892763],[99.196354,12.804748],[99.212012,13.269294],[99.097755,13.827503],[98.430819,14.622028],[98.192074,15.123703],[98.537376,15.308497],[98.903348,16.177824],[98.493761,16.837836],[97.859123,17.567946],[97.375896,18.445438],[97.797783,18.62708],[98.253724,19.708203],[98.959676,19.752981],[99.543309,20.186598],[100.115988,20.41785],[100.548881,20.109238],[100.606294,19.508344],[101.282015,19.462585],[101.035931,18.408928],[101.059548,17.512497],[102.113592,18.109102],[102.413005,17.932782],[102.998706,17.961695],[103.200192,18.309632],[103.956477,18.240954],[104.716947,17.428859],[104.779321,16.441865],[105.589039,15.570316],[105.544338,14.723934],[105.218777,14.273212],[104.281418,14.416743],[102.988422,14.225721],[102.348099,13.394247],[102.584932,12.186595]]]}},\n{\"type\":\"Feature\",\"id\":\"TJK\",\"properties\":{\"name\":\"Tajikistan\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[71.014198,40.244366],[70.648019,39.935754],[69.55961,40.103211],[69.464887,39.526683],[70.549162,39.604198],[71.784694,39.279463],[73.675379,39.431237],[73.928852,38.505815],[74.257514,38.606507],[74.864816,38.378846],[74.829986,37.990007],[74.980002,37.41999],[73.948696,37.421566],[73.260056,37.495257],[72.63689,37.047558],[72.193041,36.948288],[71.844638,36.738171],[71.448693,37.065645],[71.541918,37.905774],[71.239404,37.953265],[71.348131,38.258905],[70.806821,38.486282],[70.376304,38.138396],[70.270574,37.735165],[70.116578,37.588223],[69.518785,37.608997],[69.196273,37.151144],[68.859446,37.344336],[68.135562,37.023115],[67.83,37.144994],[68.392033,38.157025],[68.176025,38.901553],[67.44222,39.140144],[67.701429,39.580478],[68.536416,39.533453],[69.011633,40.086158],[69.329495,40.727824],[70.666622,40.960213],[70.45816,40.496495],[70.601407,40.218527],[71.014198,40.244366]]]}},\n{\"type\":\"Feature\",\"id\":\"TKM\",\"properties\":{\"name\":\"Turkmenistan\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[61.210817,35.650072],[61.123071,36.491597],[60.377638,36.527383],[59.234762,37.412988],[58.436154,37.522309],[57.330434,38.029229],[56.619366,38.121394],[56.180375,37.935127],[55.511578,37.964117],[54.800304,37.392421],[53.921598,37.198918],[53.735511,37.906136],[53.880929,38.952093],[53.101028,39.290574],[53.357808,39.975286],[52.693973,40.033629],[52.915251,40.876523],[53.858139,40.631034],[54.736845,40.951015],[54.008311,41.551211],[53.721713,42.123191],[52.91675,41.868117],[52.814689,41.135371],[52.50246,41.783316],[52.944293,42.116034],[54.079418,42.324109],[54.755345,42.043971],[55.455251,41.259859],[55.968191,41.308642],[57.096391,41.32231],[56.932215,41.826026],[57.78653,42.170553],[58.629011,42.751551],[59.976422,42.223082],[60.083341,41.425146],[60.465953,41.220327],[61.547179,41.26637],[61.882714,41.084857],[62.37426,40.053886],[63.518015,39.363257],[64.170223,38.892407],[65.215999,38.402695],[66.54615,37.974685],[66.518607,37.362784],[66.217385,37.39379],[65.745631,37.661164],[65.588948,37.305217],[64.746105,37.111818],[64.546479,36.312073],[63.982896,36.007957],[63.193538,35.857166],[62.984662,35.404041],[62.230651,35.270664],[61.210817,35.650072]]]}},\n{\"type\":\"Feature\",\"id\":\"TLS\",\"properties\":{\"name\":\"East Timor\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[124.968682,-8.89279],[125.086246,-8.656887],[125.947072,-8.432095],[126.644704,-8.398247],[126.957243,-8.273345],[127.335928,-8.397317],[126.967992,-8.668256],[125.925885,-9.106007],[125.08852,-9.393173],[125.07002,-9.089987],[124.968682,-8.89279]]]}},\n{\"type\":\"Feature\",\"id\":\"TTO\",\"properties\":{\"name\":\"Trinidad and Tobago\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-61.68,10.76],[-61.105,10.89],[-60.895,10.855],[-60.935,10.11],[-61.77,10],[-61.95,10.09],[-61.66,10.365],[-61.68,10.76]]]}},\n{\"type\":\"Feature\",\"id\":\"TUN\",\"properties\":{\"name\":\"Tunisia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[9.48214,30.307556],[9.055603,32.102692],[8.439103,32.506285],[8.430473,32.748337],[7.612642,33.344115],[7.524482,34.097376],[8.140981,34.655146],[8.376368,35.479876],[8.217824,36.433177],[8.420964,36.946427],[9.509994,37.349994],[10.210002,37.230002],[10.18065,36.724038],[11.028867,37.092103],[11.100026,36.899996],[10.600005,36.41],[10.593287,35.947444],[10.939519,35.698984],[10.807847,34.833507],[10.149593,34.330773],[10.339659,33.785742],[10.856836,33.76874],[11.108501,33.293343],[11.488787,33.136996],[11.432253,32.368903],[10.94479,32.081815],[10.636901,31.761421],[9.950225,31.37607],[10.056575,30.961831],[9.970017,30.539325],[9.48214,30.307556]]]}},\n{\"type\":\"Feature\",\"id\":\"TUR\",\"properties\":{\"name\":\"Turkey\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[36.913127,41.335358],[38.347665,40.948586],[39.512607,41.102763],[40.373433,41.013673],[41.554084,41.535656],[42.619549,41.583173],[43.582746,41.092143],[43.752658,40.740201],[43.656436,40.253564],[44.400009,40.005],[44.79399,39.713003],[44.109225,39.428136],[44.421403,38.281281],[44.225756,37.971584],[44.772699,37.170445],[44.293452,37.001514],[43.942259,37.256228],[42.779126,37.385264],[42.349591,37.229873],[41.212089,37.074352],[40.673259,37.091276],[39.52258,36.716054],[38.699891,36.712927],[38.167727,36.90121],[37.066761,36.623036],[36.739494,36.81752],[36.685389,36.259699],[36.41755,36.040617],[36.149763,35.821535],[35.782085,36.274995],[36.160822,36.650606],[35.550936,36.565443],[34.714553,36.795532],[34.026895,36.21996],[32.509158,36.107564],[31.699595,36.644275],[30.621625,36.677865],[30.391096,36.262981],[29.699976,36.144357],[28.732903,36.676831],[27.641187,36.658822],[27.048768,37.653361],[26.318218,38.208133],[26.8047,38.98576],[26.170785,39.463612],[27.28002,40.420014],[28.819978,40.460011],[29.240004,41.219991],[31.145934,41.087622],[32.347979,41.736264],[33.513283,42.01896],[35.167704,42.040225],[36.913127,41.335358]]],[[[27.192377,40.690566],[26.358009,40.151994],[26.043351,40.617754],[26.056942,40.824123],[26.294602,40.936261],[26.604196,41.562115],[26.117042,41.826905],[27.135739,42.141485],[27.99672,42.007359],[28.115525,41.622886],[28.988443,41.299934],[28.806438,41.054962],[27.619017,40.999823],[27.192377,40.690566]]]]}},\n{\"type\":\"Feature\",\"id\":\"TWN\",\"properties\":{\"name\":\"Taiwan\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[121.777818,24.394274],[121.175632,22.790857],[120.74708,21.970571],[120.220083,22.814861],[120.106189,23.556263],[120.69468,24.538451],[121.495044,25.295459],[121.951244,24.997596],[121.777818,24.394274]]]}},\n{\"type\":\"Feature\",\"id\":\"TZA\",\"properties\":{\"name\":\"United Republic of Tanzania\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[33.903711,-0.95],[34.07262,-1.05982],[37.69869,-3.09699],[37.7669,-3.67712],[39.20222,-4.67677],[38.74054,-5.90895],[38.79977,-6.47566],[39.44,-6.84],[39.47,-7.1],[39.19469,-7.7039],[39.25203,-8.00781],[39.18652,-8.48551],[39.53574,-9.11237],[39.9496,-10.0984],[40.31659,-10.3171],[39.521,-10.89688],[38.427557,-11.285202],[37.82764,-11.26879],[37.47129,-11.56876],[36.775151,-11.594537],[36.514082,-11.720938],[35.312398,-11.439146],[34.559989,-11.52002],[34.28,-10.16],[33.940838,-9.693674],[33.73972,-9.41715],[32.759375,-9.230599],[32.191865,-8.930359],[31.556348,-8.762049],[31.157751,-8.594579],[30.74,-8.34],[30.2,-7.08],[29.62,-6.52],[29.419993,-5.939999],[29.519987,-5.419979],[29.339998,-4.499983],[29.753512,-4.452389],[30.11632,-4.09012],[30.50554,-3.56858],[30.75224,-3.35931],[30.74301,-3.03431],[30.52766,-2.80762],[30.46967,-2.41383],[30.758309,-2.28725],[30.816135,-1.698914],[30.419105,-1.134659],[30.76986,-1.01455],[31.86617,-1.02736],[33.903711,-0.95]]]}},\n{\"type\":\"Feature\",\"id\":\"UGA\",\"properties\":{\"name\":\"Uganda\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[31.86617,-1.02736],[30.76986,-1.01455],[30.419105,-1.134659],[29.821519,-1.443322],[29.579466,-1.341313],[29.587838,-0.587406],[29.8195,-0.2053],[29.875779,0.59738],[30.086154,1.062313],[30.468508,1.583805],[30.85267,1.849396],[31.174149,2.204465],[30.77332,2.33989],[30.83385,3.50917],[31.24556,3.7819],[31.88145,3.55827],[32.68642,3.79232],[33.39,3.79],[34.005,4.249885],[34.47913,3.5556],[34.59607,3.05374],[35.03599,1.90584],[34.6721,1.17694],[34.18,0.515],[33.893569,0.109814],[33.903711,-0.95],[31.86617,-1.02736]]]}},\n{\"type\":\"Feature\",\"id\":\"UKR\",\"properties\":{\"name\":\"Ukraine\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[31.785998,52.101678],[32.159412,52.061267],[32.412058,52.288695],[32.715761,52.238465],[33.7527,52.335075],[34.391731,51.768882],[34.141978,51.566413],[34.224816,51.255993],[35.022183,51.207572],[35.377924,50.773955],[35.356116,50.577197],[36.626168,50.225591],[37.39346,50.383953],[38.010631,49.915662],[38.594988,49.926462],[40.069058,49.601055],[40.080789,49.30743],[39.674664,48.783818],[39.895632,48.232405],[39.738278,47.898937],[38.770585,47.825608],[38.255112,47.5464],[38.223538,47.10219],[37.425137,47.022221],[36.759855,46.6987],[35.823685,46.645964],[34.962342,46.273197],[35.020788,45.651219],[35.510009,45.409993],[36.529998,45.46999],[36.334713,45.113216],[35.239999,44.939996],[33.882511,44.361479],[33.326421,44.564877],[33.546924,45.034771],[32.454174,45.327466],[32.630804,45.519186],[33.588162,45.851569],[33.298567,46.080598],[31.74414,46.333348],[31.675307,46.706245],[30.748749,46.5831],[30.377609,46.03241],[29.603289,45.293308],[29.149725,45.464925],[28.679779,45.304031],[28.233554,45.488283],[28.485269,45.596907],[28.659987,45.939987],[28.933717,46.25883],[28.862972,46.437889],[29.072107,46.517678],[29.170654,46.379262],[29.759972,46.349988],[30.024659,46.423937],[29.83821,46.525326],[29.908852,46.674361],[29.559674,46.928583],[29.415135,47.346645],[29.050868,47.510227],[29.122698,47.849095],[28.670891,48.118149],[28.259547,48.155562],[27.522537,48.467119],[26.857824,48.368211],[26.619337,48.220726],[26.19745,48.220881],[25.945941,47.987149],[25.207743,47.891056],[24.866317,47.737526],[24.402056,47.981878],[23.760958,47.985598],[23.142236,48.096341],[22.710531,47.882194],[22.64082,48.15024],[22.085608,48.422264],[22.280842,48.825392],[22.558138,49.085738],[22.776419,49.027395],[22.51845,49.476774],[23.426508,50.308506],[23.922757,50.424881],[24.029986,50.705407],[23.527071,51.578454],[24.005078,51.617444],[24.553106,51.888461],[25.327788,51.910656],[26.337959,51.832289],[27.454066,51.592303],[28.241615,51.572227],[28.617613,51.427714],[28.992835,51.602044],[29.254938,51.368234],[30.157364,51.416138],[30.555117,51.319503],[30.619454,51.822806],[30.927549,52.042353],[31.785998,52.101678]]]}},\n{\"type\":\"Feature\",\"id\":\"URY\",\"properties\":{\"name\":\"Uruguay\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-57.625133,-30.216295],[-56.976026,-30.109686],[-55.973245,-30.883076],[-55.60151,-30.853879],[-54.572452,-31.494511],[-53.787952,-32.047243],[-53.209589,-32.727666],[-53.650544,-33.202004],[-53.373662,-33.768378],[-53.806426,-34.396815],[-54.935866,-34.952647],[-55.67409,-34.752659],[-56.215297,-34.859836],[-57.139685,-34.430456],[-57.817861,-34.462547],[-58.427074,-33.909454],[-58.349611,-33.263189],[-58.132648,-33.040567],[-58.14244,-32.044504],[-57.874937,-31.016556],[-57.625133,-30.216295]]]}},\n{\"type\":\"Feature\",\"id\":\"USA\",\"properties\":{\"name\":\"United States of America\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[-155.54211,19.08348],[-155.68817,18.91619],[-155.93665,19.05939],[-155.90806,19.33888],[-156.07347,19.70294],[-156.02368,19.81422],[-155.85008,19.97729],[-155.91907,20.17395],[-155.86108,20.26721],[-155.78505,20.2487],[-155.40214,20.07975],[-155.22452,19.99302],[-155.06226,19.8591],[-154.80741,19.50871],[-154.83147,19.45328],[-155.22217,19.23972],[-155.54211,19.08348]]],[[[-156.07926,20.64397],[-156.41445,20.57241],[-156.58673,20.783],[-156.70167,20.8643],[-156.71055,20.92676],[-156.61258,21.01249],[-156.25711,20.91745],[-155.99566,20.76404],[-156.07926,20.64397]]],[[[-156.75824,21.17684],[-156.78933,21.06873],[-157.32521,21.09777],[-157.25027,21.21958],[-156.75824,21.17684]]],[[[-157.65283,21.32217],[-157.70703,21.26442],[-157.7786,21.27729],[-158.12667,21.31244],[-158.2538,21.53919],[-158.29265,21.57912],[-158.0252,21.71696],[-157.94161,21.65272],[-157.65283,21.32217]]],[[[-159.34512,21.982],[-159.46372,21.88299],[-159.80051,22.06533],[-159.74877,22.1382],[-159.5962,22.23618],[-159.36569,22.21494],[-159.34512,21.982]]],[[[-94.81758,49.38905],[-94.64,48.84],[-94.32914,48.67074],[-93.63087,48.60926],[-92.61,48.45],[-91.64,48.14],[-90.83,48.27],[-89.6,48.01],[-89.272917,48.019808],[-88.378114,48.302918],[-87.439793,47.94],[-86.461991,47.553338],[-85.652363,47.220219],[-84.87608,46.900083],[-84.779238,46.637102],[-84.543749,46.538684],[-84.6049,46.4396],[-84.3367,46.40877],[-84.14212,46.512226],[-84.091851,46.275419],[-83.890765,46.116927],[-83.616131,46.116927],[-83.469551,45.994686],[-83.592851,45.816894],[-82.550925,45.347517],[-82.337763,44.44],[-82.137642,43.571088],[-82.43,42.98],[-82.9,42.43],[-83.12,42.08],[-83.142,41.975681],[-83.02981,41.832796],[-82.690089,41.675105],[-82.439278,41.675105],[-81.277747,42.209026],[-80.247448,42.3662],[-78.939362,42.863611],[-78.92,42.965],[-79.01,43.27],[-79.171674,43.466339],[-78.72028,43.625089],[-77.737885,43.629056],[-76.820034,43.628784],[-76.5,44.018459],[-76.375,44.09631],[-75.31821,44.81645],[-74.867,45.00048],[-73.34783,45.00738],[-71.50506,45.0082],[-71.405,45.255],[-71.08482,45.30524],[-70.66,45.46],[-70.305,45.915],[-69.99997,46.69307],[-69.237216,47.447781],[-68.905,47.185],[-68.23444,47.35486],[-67.79046,47.06636],[-67.79134,45.70281],[-67.13741,45.13753],[-66.96466,44.8097],[-68.03252,44.3252],[-69.06,43.98],[-70.11617,43.68405],[-70.645476,43.090238],[-70.81489,42.8653],[-70.825,42.335],[-70.495,41.805],[-70.08,41.78],[-70.185,42.145],[-69.88497,41.92283],[-69.96503,41.63717],[-70.64,41.475],[-71.12039,41.49445],[-71.86,41.32],[-72.295,41.27],[-72.87643,41.22065],[-73.71,40.931102],[-72.24126,41.11948],[-71.945,40.93],[-73.345,40.63],[-73.982,40.628],[-73.952325,40.75075],[-74.25671,40.47351],[-73.96244,40.42763],[-74.17838,39.70926],[-74.90604,38.93954],[-74.98041,39.1964],[-75.20002,39.24845],[-75.52805,39.4985],[-75.32,38.96],[-75.071835,38.782032],[-75.05673,38.40412],[-75.37747,38.01551],[-75.94023,37.21689],[-76.03127,37.2566],[-75.72205,37.93705],[-76.23287,38.319215],[-76.35,39.15],[-76.542725,38.717615],[-76.32933,38.08326],[-76.989998,38.239992],[-76.30162,37.917945],[-76.25874,36.9664],[-75.9718,36.89726],[-75.86804,36.55125],[-75.72749,35.55074],[-76.36318,34.80854],[-77.397635,34.51201],[-78.05496,33.92547],[-78.55435,33.86133],[-79.06067,33.49395],[-79.20357,33.15839],[-80.301325,32.509355],[-80.86498,32.0333],[-81.33629,31.44049],[-81.49042,30.72999],[-81.31371,30.03552],[-80.98,29.18],[-80.535585,28.47213],[-80.53,28.04],[-80.056539,26.88],[-80.088015,26.205765],[-80.13156,25.816775],[-80.38103,25.20616],[-80.68,25.08],[-81.17213,25.20126],[-81.33,25.64],[-81.71,25.87],[-82.24,26.73],[-82.70515,27.49504],[-82.85526,27.88624],[-82.65,28.55],[-82.93,29.1],[-83.70959,29.93656],[-84.1,30.09],[-85.10882,29.63615],[-85.28784,29.68612],[-85.7731,30.15261],[-86.4,30.4],[-87.53036,30.27433],[-88.41782,30.3849],[-89.18049,30.31598],[-89.593831,30.159994],[-89.413735,29.89419],[-89.43,29.48864],[-89.21767,29.29108],[-89.40823,29.15961],[-89.77928,29.30714],[-90.15463,29.11743],[-90.880225,29.148535],[-91.626785,29.677],[-92.49906,29.5523],[-93.22637,29.78375],[-93.84842,29.71363],[-94.69,29.48],[-95.60026,28.73863],[-96.59404,28.30748],[-97.14,27.83],[-97.37,27.38],[-97.38,26.69],[-97.33,26.21],[-97.14,25.87],[-97.53,25.84],[-98.24,26.06],[-99.02,26.37],[-99.3,26.84],[-99.52,27.54],[-100.11,28.11],[-100.45584,28.69612],[-100.9576,29.38071],[-101.6624,29.7793],[-102.48,29.76],[-103.11,28.97],[-103.94,29.27],[-104.45697,29.57196],[-104.70575,30.12173],[-105.03737,30.64402],[-105.63159,31.08383],[-106.1429,31.39995],[-106.50759,31.75452],[-108.24,31.754854],[-108.24194,31.34222],[-109.035,31.34194],[-111.02361,31.33472],[-113.30498,32.03914],[-114.815,32.52528],[-114.72139,32.72083],[-115.99135,32.61239],[-117.12776,32.53534],[-117.295938,33.046225],[-117.944,33.621236],[-118.410602,33.740909],[-118.519895,34.027782],[-119.081,34.078],[-119.438841,34.348477],[-120.36778,34.44711],[-120.62286,34.60855],[-120.74433,35.15686],[-121.71457,36.16153],[-122.54747,37.55176],[-122.51201,37.78339],[-122.95319,38.11371],[-123.7272,38.95166],[-123.86517,39.76699],[-124.39807,40.3132],[-124.17886,41.14202],[-124.2137,41.99964],[-124.53284,42.76599],[-124.14214,43.70838],[-124.020535,44.615895],[-123.89893,45.52341],[-124.079635,46.86475],[-124.39567,47.72017],[-124.68721,48.184433],[-124.566101,48.379715],[-123.12,48.04],[-122.58736,47.096],[-122.34,47.36],[-122.5,48.18],[-122.84,49],[-120,49],[-117.03121,49],[-116.04818,49],[-113,49],[-110.05,49],[-107.05,49],[-104.04826,48.99986],[-100.65,49],[-97.22872,49.0007],[-95.15907,49],[-95.15609,49.38425],[-94.81758,49.38905]]],[[[-153.006314,57.115842],[-154.00509,56.734677],[-154.516403,56.992749],[-154.670993,57.461196],[-153.76278,57.816575],[-153.228729,57.968968],[-152.564791,57.901427],[-152.141147,57.591059],[-153.006314,57.115842]]],[[[-165.579164,59.909987],[-166.19277,59.754441],[-166.848337,59.941406],[-167.455277,60.213069],[-166.467792,60.38417],[-165.67443,60.293607],[-165.579164,59.909987]]],[[[-171.731657,63.782515],[-171.114434,63.592191],[-170.491112,63.694975],[-169.682505,63.431116],[-168.689439,63.297506],[-168.771941,63.188598],[-169.52944,62.976931],[-170.290556,63.194438],[-170.671386,63.375822],[-171.553063,63.317789],[-171.791111,63.405846],[-171.731657,63.782515]]],[[[-155.06779,71.147776],[-154.344165,70.696409],[-153.900006,70.889989],[-152.210006,70.829992],[-152.270002,70.600006],[-150.739992,70.430017],[-149.720003,70.53001],[-147.613362,70.214035],[-145.68999,70.12001],[-144.920011,69.989992],[-143.589446,70.152514],[-142.07251,69.851938],[-140.985988,69.711998],[-140.992499,66.000029],[-140.99777,60.306397],[-140.012998,60.276838],[-139.039,60.000007],[-138.34089,59.56211],[-137.4525,58.905],[-136.47972,59.46389],[-135.47583,59.78778],[-134.945,59.27056],[-134.27111,58.86111],[-133.355549,58.410285],[-132.73042,57.69289],[-131.70781,56.55212],[-130.00778,55.91583],[-129.979994,55.284998],[-130.53611,54.802753],[-131.085818,55.178906],[-131.967211,55.497776],[-132.250011,56.369996],[-133.539181,57.178887],[-134.078063,58.123068],[-135.038211,58.187715],[-136.628062,58.212209],[-137.800006,58.499995],[-139.867787,59.537762],[-140.825274,59.727517],[-142.574444,60.084447],[-143.958881,59.99918],[-145.925557,60.45861],[-147.114374,60.884656],[-148.224306,60.672989],[-148.018066,59.978329],[-148.570823,59.914173],[-149.727858,59.705658],[-150.608243,59.368211],[-151.716393,59.155821],[-151.859433,59.744984],[-151.409719,60.725803],[-150.346941,61.033588],[-150.621111,61.284425],[-151.895839,60.727198],[-152.57833,60.061657],[-154.019172,59.350279],[-153.287511,58.864728],[-154.232492,58.146374],[-155.307491,57.727795],[-156.308335,57.422774],[-156.556097,56.979985],[-158.117217,56.463608],[-158.433321,55.994154],[-159.603327,55.566686],[-160.28972,55.643581],[-161.223048,55.364735],[-162.237766,55.024187],[-163.069447,54.689737],[-164.785569,54.404173],[-164.942226,54.572225],[-163.84834,55.039431],[-162.870001,55.348043],[-161.804175,55.894986],[-160.563605,56.008055],[-160.07056,56.418055],[-158.684443,57.016675],[-158.461097,57.216921],[-157.72277,57.570001],[-157.550274,58.328326],[-157.041675,58.918885],[-158.194731,58.615802],[-158.517218,58.787781],[-159.058606,58.424186],[-159.711667,58.93139],[-159.981289,58.572549],[-160.355271,59.071123],[-161.355003,58.670838],[-161.968894,58.671665],[-162.054987,59.266925],[-161.874171,59.633621],[-162.518059,59.989724],[-163.818341,59.798056],[-164.662218,60.267484],[-165.346388,60.507496],[-165.350832,61.073895],[-166.121379,61.500019],[-165.734452,62.074997],[-164.919179,62.633076],[-164.562508,63.146378],[-163.753332,63.219449],[-163.067224,63.059459],[-162.260555,63.541936],[-161.53445,63.455817],[-160.772507,63.766108],[-160.958335,64.222799],[-161.518068,64.402788],[-160.777778,64.788604],[-161.391926,64.777235],[-162.45305,64.559445],[-162.757786,64.338605],[-163.546394,64.55916],[-164.96083,64.446945],[-166.425288,64.686672],[-166.845004,65.088896],[-168.11056,65.669997],[-166.705271,66.088318],[-164.47471,66.57666],[-163.652512,66.57666],[-163.788602,66.077207],[-161.677774,66.11612],[-162.489715,66.735565],[-163.719717,67.116395],[-164.430991,67.616338],[-165.390287,68.042772],[-166.764441,68.358877],[-166.204707,68.883031],[-164.430811,68.915535],[-163.168614,69.371115],[-162.930566,69.858062],[-161.908897,70.33333],[-160.934797,70.44769],[-159.039176,70.891642],[-158.119723,70.824721],[-156.580825,71.357764],[-155.06779,71.147776]]]]}},\n{\"type\":\"Feature\",\"id\":\"UZB\",\"properties\":{\"name\":\"Uzbekistan\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[66.518607,37.362784],[66.54615,37.974685],[65.215999,38.402695],[64.170223,38.892407],[63.518015,39.363257],[62.37426,40.053886],[61.882714,41.084857],[61.547179,41.26637],[60.465953,41.220327],[60.083341,41.425146],[59.976422,42.223082],[58.629011,42.751551],[57.78653,42.170553],[56.932215,41.826026],[57.096391,41.32231],[55.968191,41.308642],[55.928917,44.995858],[58.503127,45.586804],[58.689989,45.500014],[60.239972,44.784037],[61.05832,44.405817],[62.0133,43.504477],[63.185787,43.650075],[64.900824,43.728081],[66.098012,42.99766],[66.023392,41.994646],[66.510649,41.987644],[66.714047,41.168444],[67.985856,41.135991],[68.259896,40.662325],[68.632483,40.668681],[69.070027,41.384244],[70.388965,42.081308],[70.962315,42.266154],[71.259248,42.167711],[70.420022,41.519998],[71.157859,41.143587],[71.870115,41.3929],[73.055417,40.866033],[71.774875,40.145844],[71.014198,40.244366],[70.601407,40.218527],[70.45816,40.496495],[70.666622,40.960213],[69.329495,40.727824],[69.011633,40.086158],[68.536416,39.533453],[67.701429,39.580478],[67.44222,39.140144],[68.176025,38.901553],[68.392033,38.157025],[67.83,37.144994],[67.075782,37.356144],[66.518607,37.362784]]]}},\n{\"type\":\"Feature\",\"id\":\"VEN\",\"properties\":{\"name\":\"Venezuela\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-71.331584,11.776284],[-71.360006,11.539994],[-71.94705,11.423282],[-71.620868,10.96946],[-71.633064,10.446494],[-72.074174,9.865651],[-71.695644,9.072263],[-71.264559,9.137195],[-71.039999,9.859993],[-71.350084,10.211935],[-71.400623,10.968969],[-70.155299,11.375482],[-70.293843,11.846822],[-69.943245,12.162307],[-69.5843,11.459611],[-68.882999,11.443385],[-68.233271,10.885744],[-68.194127,10.554653],[-67.296249,10.545868],[-66.227864,10.648627],[-65.655238,10.200799],[-64.890452,10.077215],[-64.329479,10.389599],[-64.318007,10.641418],[-63.079322,10.701724],[-61.880946,10.715625],[-62.730119,10.420269],[-62.388512,9.948204],[-61.588767,9.873067],[-60.830597,9.38134],[-60.671252,8.580174],[-60.150096,8.602757],[-59.758285,8.367035],[-60.550588,7.779603],[-60.637973,7.415],[-60.295668,7.043911],[-60.543999,6.856584],[-61.159336,6.696077],[-61.139415,6.234297],[-61.410303,5.959068],[-60.733574,5.200277],[-60.601179,4.918098],[-60.966893,4.536468],[-62.08543,4.162124],[-62.804533,4.006965],[-63.093198,3.770571],[-63.888343,4.02053],[-64.628659,4.148481],[-64.816064,4.056445],[-64.368494,3.79721],[-64.408828,3.126786],[-64.269999,2.497006],[-63.422867,2.411068],[-63.368788,2.2009],[-64.083085,1.916369],[-64.199306,1.492855],[-64.611012,1.328731],[-65.354713,1.095282],[-65.548267,0.789254],[-66.325765,0.724452],[-66.876326,1.253361],[-67.181294,2.250638],[-67.447092,2.600281],[-67.809938,2.820655],[-67.303173,3.318454],[-67.337564,3.542342],[-67.621836,3.839482],[-67.823012,4.503937],[-67.744697,5.221129],[-67.521532,5.55687],[-67.34144,6.095468],[-67.695087,6.267318],[-68.265052,6.153268],[-68.985319,6.206805],[-69.38948,6.099861],[-70.093313,6.960376],[-70.674234,7.087785],[-71.960176,6.991615],[-72.198352,7.340431],[-72.444487,7.423785],[-72.479679,7.632506],[-72.360901,8.002638],[-72.439862,8.405275],[-72.660495,8.625288],[-72.78873,9.085027],[-73.304952,9.152],[-73.027604,9.73677],[-72.905286,10.450344],[-72.614658,10.821975],[-72.227575,11.108702],[-71.973922,11.608672],[-71.331584,11.776284]]]}},\n{\"type\":\"Feature\",\"id\":\"VNM\",\"properties\":{\"name\":\"Vietnam\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[108.05018,21.55238],[106.715068,20.696851],[105.881682,19.75205],[105.662006,19.058165],[106.426817,18.004121],[107.361954,16.697457],[108.269495,16.079742],[108.877107,15.276691],[109.33527,13.426028],[109.200136,11.666859],[108.36613,11.008321],[107.220929,10.364484],[106.405113,9.53084],[105.158264,8.59976],[104.795185,9.241038],[105.076202,9.918491],[104.334335,10.486544],[105.199915,10.88931],[106.24967,10.961812],[105.810524,11.567615],[107.491403,12.337206],[107.614548,13.535531],[107.382727,14.202441],[107.564525,15.202173],[107.312706,15.908538],[106.556008,16.604284],[105.925762,17.485315],[105.094598,18.666975],[103.896532,19.265181],[104.183388,19.624668],[104.822574,19.886642],[104.435,20.758733],[103.203861,20.766562],[102.754896,21.675137],[102.170436,22.464753],[102.706992,22.708795],[103.504515,22.703757],[104.476858,22.81915],[105.329209,23.352063],[105.811247,22.976892],[106.725403,22.794268],[106.567273,22.218205],[107.04342,21.811899],[108.05018,21.55238]]]}},\n{\"type\":\"Feature\",\"id\":\"VUT\",\"properties\":{\"name\":\"Vanuatu\"},\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[167.844877,-16.466333],[167.515181,-16.59785],[167.180008,-16.159995],[167.216801,-15.891846],[167.844877,-16.466333]]],[[[167.107712,-14.93392],[167.270028,-15.740021],[167.001207,-15.614602],[166.793158,-15.668811],[166.649859,-15.392704],[166.629137,-14.626497],[167.107712,-14.93392]]]]}},\n{\"type\":\"Feature\",\"id\":\"PSE\",\"properties\":{\"name\":\"West Bank\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[35.545665,32.393992],[35.545252,31.782505],[35.397561,31.489086],[34.927408,31.353435],[34.970507,31.616778],[35.225892,31.754341],[34.974641,31.866582],[35.18393,32.532511],[35.545665,32.393992]]]}},\n{\"type\":\"Feature\",\"id\":\"YEM\",\"properties\":{\"name\":\"Yemen\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[53.108573,16.651051],[52.385206,16.382411],[52.191729,15.938433],[52.168165,15.59742],[51.172515,15.17525],[49.574576,14.708767],[48.679231,14.003202],[48.238947,13.94809],[47.938914,14.007233],[47.354454,13.59222],[46.717076,13.399699],[45.877593,13.347764],[45.62505,13.290946],[45.406459,13.026905],[45.144356,12.953938],[44.989533,12.699587],[44.494576,12.721653],[44.175113,12.58595],[43.482959,12.6368],[43.222871,13.22095],[43.251448,13.767584],[43.087944,14.06263],[42.892245,14.802249],[42.604873,15.213335],[42.805015,15.261963],[42.702438,15.718886],[42.823671,15.911742],[42.779332,16.347891],[43.218375,16.66689],[43.115798,17.08844],[43.380794,17.579987],[43.791519,17.319977],[44.062613,17.410359],[45.216651,17.433329],[45.399999,17.333335],[46.366659,17.233315],[46.749994,17.283338],[47.000005,16.949999],[47.466695,17.116682],[48.183344,18.166669],[49.116672,18.616668],[52.00001,19.000003],[52.782184,17.349742],[53.108573,16.651051]]]}},\n{\"type\":\"Feature\",\"id\":\"ZAF\",\"properties\":{\"name\":\"South Africa\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[31.521001,-29.257387],[31.325561,-29.401978],[30.901763,-29.909957],[30.622813,-30.423776],[30.055716,-31.140269],[28.925553,-32.172041],[28.219756,-32.771953],[27.464608,-33.226964],[26.419452,-33.61495],[25.909664,-33.66704],[25.780628,-33.944646],[25.172862,-33.796851],[24.677853,-33.987176],[23.594043,-33.794474],[22.988189,-33.916431],[22.574157,-33.864083],[21.542799,-34.258839],[20.689053,-34.417175],[20.071261,-34.795137],[19.616405,-34.819166],[19.193278,-34.462599],[18.855315,-34.444306],[18.424643,-33.997873],[18.377411,-34.136521],[18.244499,-33.867752],[18.25008,-33.281431],[17.92519,-32.611291],[18.24791,-32.429131],[18.221762,-31.661633],[17.566918,-30.725721],[17.064416,-29.878641],[17.062918,-29.875954],[16.344977,-28.576705],[16.824017,-28.082162],[17.218929,-28.355943],[17.387497,-28.783514],[17.836152,-28.856378],[18.464899,-29.045462],[19.002127,-28.972443],[19.894734,-28.461105],[19.895768,-24.76779],[20.165726,-24.917962],[20.758609,-25.868136],[20.66647,-26.477453],[20.889609,-26.828543],[21.605896,-26.726534],[22.105969,-26.280256],[22.579532,-25.979448],[22.824271,-25.500459],[23.312097,-25.26869],[23.73357,-25.390129],[24.211267,-25.670216],[25.025171,-25.71967],[25.664666,-25.486816],[25.765849,-25.174845],[25.941652,-24.696373],[26.485753,-24.616327],[26.786407,-24.240691],[27.11941,-23.574323],[28.017236,-22.827754],[29.432188,-22.091313],[29.839037,-22.102216],[30.322883,-22.271612],[30.659865,-22.151567],[31.191409,-22.25151],[31.670398,-23.658969],[31.930589,-24.369417],[31.752408,-25.484284],[31.837778,-25.843332],[31.333158,-25.660191],[31.04408,-25.731452],[30.949667,-26.022649],[30.676609,-26.398078],[30.685962,-26.743845],[31.282773,-27.285879],[31.86806,-27.177927],[32.071665,-26.73382],[32.83012,-26.742192],[32.580265,-27.470158],[32.462133,-28.301011],[32.203389,-28.752405],[31.521001,-29.257387]],[[28.978263,-28.955597],[28.5417,-28.647502],[28.074338,-28.851469],[27.532511,-29.242711],[26.999262,-29.875954],[27.749397,-30.645106],[28.107205,-30.545732],[28.291069,-30.226217],[28.8484,-30.070051],[29.018415,-29.743766],[29.325166,-29.257387],[28.978263,-28.955597]]]}},\n{\"type\":\"Feature\",\"id\":\"ZMB\",\"properties\":{\"name\":\"Zambia\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[32.759375,-9.230599],[33.231388,-9.676722],[33.485688,-10.525559],[33.31531,-10.79655],[33.114289,-11.607198],[33.306422,-12.435778],[32.991764,-12.783871],[32.688165,-13.712858],[33.214025,-13.97186],[30.179481,-14.796099],[30.274256,-15.507787],[29.516834,-15.644678],[28.947463,-16.043051],[28.825869,-16.389749],[28.467906,-16.4684],[27.598243,-17.290831],[27.044427,-17.938026],[26.706773,-17.961229],[26.381935,-17.846042],[25.264226,-17.73654],[25.084443,-17.661816],[25.07695,-17.578823],[24.682349,-17.353411],[24.033862,-17.295843],[23.215048,-17.523116],[22.562478,-16.898451],[21.887843,-16.08031],[21.933886,-12.898437],[24.016137,-12.911046],[23.930922,-12.565848],[24.079905,-12.191297],[23.904154,-11.722282],[24.017894,-11.237298],[23.912215,-10.926826],[24.257155,-10.951993],[24.314516,-11.262826],[24.78317,-11.238694],[25.418118,-11.330936],[25.75231,-11.784965],[26.553088,-11.92444],[27.16442,-11.608748],[27.388799,-12.132747],[28.155109,-12.272481],[28.523562,-12.698604],[28.934286,-13.248958],[29.699614,-13.257227],[29.616001,-12.178895],[29.341548,-12.360744],[28.642417,-11.971569],[28.372253,-11.793647],[28.49607,-10.789884],[28.673682,-9.605925],[28.449871,-9.164918],[28.734867,-8.526559],[29.002912,-8.407032],[30.346086,-8.238257],[30.740015,-8.340007],[31.157751,-8.594579],[31.556348,-8.762049],[32.191865,-8.930359],[32.759375,-9.230599]]]}},\n{\"type\":\"Feature\",\"id\":\"ZWE\",\"properties\":{\"name\":\"Zimbabwe\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[31.191409,-22.25151],[30.659865,-22.151567],[30.322883,-22.271612],[29.839037,-22.102216],[29.432188,-22.091313],[28.794656,-21.639454],[28.02137,-21.485975],[27.727228,-20.851802],[27.724747,-20.499059],[27.296505,-20.39152],[26.164791,-19.293086],[25.850391,-18.714413],[25.649163,-18.536026],[25.264226,-17.73654],[26.381935,-17.846042],[26.706773,-17.961229],[27.044427,-17.938026],[27.598243,-17.290831],[28.467906,-16.4684],[28.825869,-16.389749],[28.947463,-16.043051],[29.516834,-15.644678],[30.274256,-15.507787],[30.338955,-15.880839],[31.173064,-15.860944],[31.636498,-16.07199],[31.852041,-16.319417],[32.328239,-16.392074],[32.847639,-16.713398],[32.849861,-17.979057],[32.654886,-18.67209],[32.611994,-19.419383],[32.772708,-19.715592],[32.659743,-20.30429],[32.508693,-20.395292],[32.244988,-21.116489],[31.191409,-22.25151]]]}}\n]}\n;","import proj4 from 'proj4';\nimport inside from '@turf/boolean-point-in-polygon';\n\nfunction DottedMapWithoutCountries({ map, avoidOuterPins = false }) {\n  const {\n    points,\n    X_MIN,\n    Y_MAX,\n    X_RANGE,\n    Y_RANGE,\n    region,\n    grid,\n    width,\n    height,\n    ystep,\n  } = map;\n\n  return {\n    addPin({ lat, lng, data, svgOptions }) {\n      const pin = this.getPin({ lat, lng });\n      const point = { ...pin, data, svgOptions };\n\n      points[[point.x, point.y].join(';')] = point;\n\n      return point;\n    },\n    getPin({ lat, lng }) {\n      const [googleX, googleY] = proj4(proj4.defs('GOOGLE'), [lng, lat]);\n      if (avoidOuterPins) {\n        const wgs84Point = proj4(proj4.defs('GOOGLE'), proj4.defs('WGS84'), [\n          googleX,\n          googleY,\n        ]);\n        if (!inside(wgs84Point, poly)) return;\n      }\n      let [rawX, rawY] = [\n        (width * (googleX - X_MIN)) / X_RANGE,\n        (height * (Y_MAX - googleY)) / Y_RANGE,\n      ];\n      const y = Math.round(rawY / ystep);\n      if (y % 2 === 0 && grid === 'diagonal') {\n        rawX -= 0.5;\n      }\n      const x = Math.round(rawX);\n      let [localx, localy] = [x, Math.round(y) * ystep];\n      if (y % 2 === 0 && grid === 'diagonal') {\n        localx += 0.5;\n      }\n\n      const [localLng, localLat] = proj4(\n        proj4.defs('GOOGLE'),\n        proj4.defs('WGS84'),\n        [\n          (localx * X_RANGE) / width + X_MIN,\n          Y_MAX - (localy * Y_RANGE) / height,\n        ],\n      );\n\n      const pin = { x: localx, y: localy, lat: localLat, lng: localLng };\n\n      return pin;\n    },\n    getPoints() {\n      return Object.values(points);\n    },\n    getSVG({\n      shape = 'circle',\n      color = 'current',\n      backgroundColor = 'transparent',\n      radius = 0.5,\n    }) {\n      const getPoint = ({ x, y, svgOptions = {} }) => {\n        const pointRadius = svgOptions.radius || radius;\n        if (shape === 'circle') {\n          return `<circle cx=\"${x}\" cy=\"${y}\" r=\"${pointRadius}\" fill=\"${\n            svgOptions.color || color\n          }\" />`;\n        } else if (shape === 'hexagon') {\n          const sqrt3radius = Math.sqrt(3) * pointRadius;\n\n          const polyPoints = [\n            [x + sqrt3radius, y - pointRadius],\n            [x + sqrt3radius, y + pointRadius],\n            [x, y + 2 * pointRadius],\n            [x - sqrt3radius, y + pointRadius],\n            [x - sqrt3radius, y - pointRadius],\n            [x, y - 2 * pointRadius],\n          ];\n\n          return `<polyline points=\"${polyPoints\n            .map((point) => point.join(','))\n            .join(' ')}\" fill=\"${svgOptions.color || color}\" />`;\n        }\n      };\n\n      return `<svg viewBox=\"0 0 ${width} ${height}\" xmlns=\"http://www.w3.org/2000/svg\" style=\"background-color: ${backgroundColor}\">\n        ${Object.values(points).map(getPoint).join('\\n')}\n      </svg>`;\n    },\n    image: {\n      region,\n      width,\n      height,\n    },\n  };\n}\n\nexport default DottedMapWithoutCountries;\n","import proj4 from 'proj4';\nimport inside from '@turf/boolean-point-in-polygon';\nimport geojsonWorld from './countries.geo.json';\nimport DottedMapWithoutCountries from './without-countries';\n\nconst geojsonByCountry = geojsonWorld.features.reduce((countries, feature) => {\n  countries[feature.id] = feature;\n  return countries;\n}, {});\n\nconst geojsonToMultiPolygons = (geojson) => {\n  const coordinates = geojson.features.reduce(\n    (poly, feature) =>\n      poly.concat(\n        feature.geometry.type === 'Polygon'\n          ? [feature.geometry.coordinates]\n          : feature.geometry.coordinates,\n      ),\n    [],\n  );\n  return { type: 'Feature', geometry: { type: 'MultiPolygon', coordinates } };\n};\n\nconst CACHE = {};\n\nconst DEFAULT_WORLD_REGION = {\n  lat: { min: -56, max: 71 },\n  lng: { min: -179, max: 179 },\n};\n\nconst computeGeojsonBox = (geojson) => {\n  const { type, features, geometry, coordinates } = geojson;\n  if (type === 'FeatureCollection') {\n    const boxes = features.map(computeGeojsonBox);\n    return {\n      lat: {\n        min: Math.min(...boxes.map((box) => box.lat.min)),\n        max: Math.max(...boxes.map((box) => box.lat.max)),\n      },\n      lng: {\n        min: Math.min(...boxes.map((box) => box.lng.min)),\n        max: Math.max(...boxes.map((box) => box.lng.max)),\n      },\n    };\n  } else if (type == 'Feature') {\n    return computeGeojsonBox(geometry);\n  } else if (type === 'MultiPolygon') {\n    return computeGeojsonBox({\n      type: 'Polygon',\n      coordinates: coordinates.flat(),\n    });\n  } else if (type == 'Polygon') {\n    const coords = coordinates.flat();\n    const latitudes = coords.map(([_lng, lat]) => lat);\n    const longitudes = coords.map(([lng, _lat]) => lng);\n\n    return {\n      lat: {\n        min: Math.min(...latitudes),\n        max: Math.max(...latitudes),\n      },\n      lng: {\n        min: Math.min(...longitudes),\n        max: Math.max(...longitudes),\n      },\n    };\n  } else {\n    throw new Error(`Unknown geojson type ${type}`);\n  }\n};\n\nconst getMap = ({\n  height = 0,\n  width = 0,\n  countries = [],\n  region,\n  grid = 'vertical',\n}) => {\n  if (height <= 0 && width <= 0) {\n    throw new Error('height or width is required');\n  }\n\n  let geojson = geojsonWorld;\n  if (countries.length > 0) {\n    geojson = {\n      type: 'FeatureCollection',\n      features: countries.map((country) => geojsonByCountry[country]),\n    };\n    if (!region) {\n      region = computeGeojsonBox(geojson);\n    }\n  } else if (!region) {\n    region = DEFAULT_WORLD_REGION;\n  }\n\n  const poly = geojsonToMultiPolygons(geojson);\n\n  const [X_MIN, Y_MIN] = proj4(proj4.defs('GOOGLE'), [\n    region.lng.min,\n    region.lat.min,\n  ]);\n  const [X_MAX, Y_MAX] = proj4(proj4.defs('GOOGLE'), [\n    region.lng.max,\n    region.lat.max,\n  ]);\n  const X_RANGE = X_MAX - X_MIN;\n  const Y_RANGE = Y_MAX - Y_MIN;\n\n  if (width <= 0) {\n    width = Math.round((height * X_RANGE) / Y_RANGE);\n  } else if (height <= 0) {\n    height = Math.round((width * Y_RANGE) / X_RANGE);\n  }\n\n  const points = {};\n  const ystep = grid === 'diagonal' ? Math.sqrt(3) / 2 : 1;\n\n  for (let y = 0; y * ystep < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      const localx = y % 2 === 0 && grid === 'diagonal' ? x + 0.5 : x;\n      const localy = y * ystep;\n\n      const pointGoogle = [\n        (localx / width) * X_RANGE + X_MIN,\n        Y_MAX - (localy / height) * Y_RANGE,\n      ];\n      const wgs84Point = proj4(\n        proj4.defs('GOOGLE'),\n        proj4.defs('WGS84'),\n        pointGoogle,\n      );\n\n      if (inside(wgs84Point, poly)) {\n        points[[x, y].join(';')] = { x: localx, y: localy };\n      }\n    }\n  }\n\n  return {\n    points,\n    X_MIN,\n    Y_MIN,\n    X_MAX,\n    Y_MAX,\n    X_RANGE,\n    Y_RANGE,\n    region,\n    grid,\n    height,\n    width,\n    ystep,\n  };\n};\n\nexport const getMapJSON = (props) => JSON.stringify(getMap(props));\n\nconst getCacheKey = ({\n  height = 0,\n  width = 0,\n  countries = [],\n  region,\n  grid = 'vertical',\n}) => {\n  return [\n    JSON.stringify(region),\n    grid,\n    height,\n    width,\n    JSON.stringify(countries),\n  ].join(' ');\n};\n\nfunction DottedMap({ avoidOuterPins = false, ...args }) {\n  const cacheKey = getCacheKey(args);\n  const map = CACHE[cacheKey] || getMap(args);\n\n  return new DottedMapWithoutCountries({ avoidOuterPins, map });\n}\n\nexport default DottedMap;\n","import DottedMap from \"dotted-map\";\n\n// Create the map\nconst map = new DottedMap({\n  width: 200,\n  grid: \"diagonal\"\n});\n\nmap.addPin({\n  lat: -0.023559,\n  lng: -73.935242,\n  svgOptions: { color: \"#0080FF\", radius: 0.4 }\n  // Research: can add link on pin via cms?\n});\n\nmap.addPin({\n  lat: 48.03891,\n  lng: -106.14502,\n  svgOptions: { color: \"#0080FF\", radius: 0.4 }\n  // Research: can add link on pin via cms?\n});\n\nmap.addPin({\n  lat: 7.946527,\n  lng: -1.023194,\n  svgOptions: { color: \"#0080FF\", radius: 0.4 }\n  // Research: can add link on pin via cms?\n});\n\n// // If you want to get the raw array of points\nmap.getPoints();\n// // [{ x, y, data, svgOptions }]\n\n// // Or use this method to get a string which is a SVG\n// map.getSVG({\n//   shape: \"circle\" | \"hexagon\", // if you use hexagon, prefer the grid `diagonal`\n//   backgroundColor, // background color of the map\n//   color, // default color of the points\n//   radius: 0.5 // default radius of the points\n// });\n\nconsole.log(map);\n\nconst svgMap = map.getSVG({\n  radius: 0.22,\n  color: \"#D0D5DD\",\n  shape: \"circle\"\n});\n\ndocument.getElementById(\"app\").innerHTML = svgMap;\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}
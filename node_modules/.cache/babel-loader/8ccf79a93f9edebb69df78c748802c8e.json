{"ast":null,"code":"import _objectWithoutProperties from \"/Users/keisukeyoshida/js/dot-map-js/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"/Users/keisukeyoshida/js/dot-map-js/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/keisukeyoshida/js/dot-map-js/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nvar _excluded = [\"avoidOuterPins\"];\nimport proj4 from 'proj4';\nimport inside from '@turf/boolean-point-in-polygon';\nimport geojsonWorld from './countries.geo.json';\nimport DottedMapWithoutCountries from './without-countries';\nvar geojsonByCountry = geojsonWorld.features.reduce(function (countries, feature) {\n  countries[feature.id] = feature;\n  return countries;\n}, {});\nvar geojsonToMultiPolygons = function geojsonToMultiPolygons(geojson) {\n  var coordinates = geojson.features.reduce(function (poly, feature) {\n    return poly.concat(feature.geometry.type === 'Polygon' ? [feature.geometry.coordinates] : feature.geometry.coordinates);\n  }, []);\n  return {\n    type: 'Feature',\n    geometry: {\n      type: 'MultiPolygon',\n      coordinates: coordinates\n    }\n  };\n};\nvar CACHE = {};\nvar DEFAULT_WORLD_REGION = {\n  lat: {\n    min: -56,\n    max: 71\n  },\n  lng: {\n    min: -179,\n    max: 179\n  }\n};\nvar computeGeojsonBox = function computeGeojsonBox(geojson) {\n  var type = geojson.type,\n    features = geojson.features,\n    geometry = geojson.geometry,\n    coordinates = geojson.coordinates;\n  if (type === 'FeatureCollection') {\n    var boxes = features.map(computeGeojsonBox);\n    return {\n      lat: {\n        min: Math.min.apply(Math, _toConsumableArray(boxes.map(function (box) {\n          return box.lat.min;\n        }))),\n        max: Math.max.apply(Math, _toConsumableArray(boxes.map(function (box) {\n          return box.lat.max;\n        })))\n      },\n      lng: {\n        min: Math.min.apply(Math, _toConsumableArray(boxes.map(function (box) {\n          return box.lng.min;\n        }))),\n        max: Math.max.apply(Math, _toConsumableArray(boxes.map(function (box) {\n          return box.lng.max;\n        })))\n      }\n    };\n  } else if (type == 'Feature') {\n    return computeGeojsonBox(geometry);\n  } else if (type === 'MultiPolygon') {\n    return computeGeojsonBox({\n      type: 'Polygon',\n      coordinates: coordinates.flat()\n    });\n  } else if (type == 'Polygon') {\n    var coords = coordinates.flat();\n    var latitudes = coords.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        _lng = _ref2[0],\n        lat = _ref2[1];\n      return lat;\n    });\n    var longitudes = coords.map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        lng = _ref4[0],\n        _lat = _ref4[1];\n      return lng;\n    });\n    return {\n      lat: {\n        min: Math.min.apply(Math, _toConsumableArray(latitudes)),\n        max: Math.max.apply(Math, _toConsumableArray(latitudes))\n      },\n      lng: {\n        min: Math.min.apply(Math, _toConsumableArray(longitudes)),\n        max: Math.max.apply(Math, _toConsumableArray(longitudes))\n      }\n    };\n  } else {\n    throw new Error(\"Unknown geojson type \".concat(type));\n  }\n};\nvar getMap = function getMap(_ref5) {\n  var _ref5$height = _ref5.height,\n    height = _ref5$height === void 0 ? 0 : _ref5$height,\n    _ref5$width = _ref5.width,\n    width = _ref5$width === void 0 ? 0 : _ref5$width,\n    _ref5$countries = _ref5.countries,\n    countries = _ref5$countries === void 0 ? [] : _ref5$countries,\n    region = _ref5.region,\n    _ref5$grid = _ref5.grid,\n    grid = _ref5$grid === void 0 ? 'vertical' : _ref5$grid;\n  if (height <= 0 && width <= 0) {\n    throw new Error('height or width is required');\n  }\n  var geojson = geojsonWorld;\n  if (countries.length > 0) {\n    geojson = {\n      type: 'FeatureCollection',\n      features: countries.map(function (country) {\n        return geojsonByCountry[country];\n      })\n    };\n    if (!region) {\n      region = computeGeojsonBox(geojson);\n    }\n  } else if (!region) {\n    region = DEFAULT_WORLD_REGION;\n  }\n  var poly = geojsonToMultiPolygons(geojson);\n  var _proj = proj4(proj4.defs('GOOGLE'), [region.lng.min, region.lat.min]),\n    _proj2 = _slicedToArray(_proj, 2),\n    X_MIN = _proj2[0],\n    Y_MIN = _proj2[1];\n  var _proj3 = proj4(proj4.defs('GOOGLE'), [region.lng.max, region.lat.max]),\n    _proj4 = _slicedToArray(_proj3, 2),\n    X_MAX = _proj4[0],\n    Y_MAX = _proj4[1];\n  var X_RANGE = X_MAX - X_MIN;\n  var Y_RANGE = Y_MAX - Y_MIN;\n  if (width <= 0) {\n    width = Math.round(height * X_RANGE / Y_RANGE);\n  } else if (height <= 0) {\n    height = Math.round(width * Y_RANGE / X_RANGE);\n  }\n  var points = {};\n  var ystep = grid === 'diagonal' ? Math.sqrt(3) / 2 : 1;\n  for (var y = 0; y * ystep < height; y += 1) {\n    for (var x = 0; x < width; x += 1) {\n      var localx = y % 2 === 0 && grid === 'diagonal' ? x + 0.5 : x;\n      var localy = y * ystep;\n      var pointGoogle = [localx / width * X_RANGE + X_MIN, Y_MAX - localy / height * Y_RANGE];\n      var wgs84Point = proj4(proj4.defs('GOOGLE'), proj4.defs('WGS84'), pointGoogle);\n      if (inside(wgs84Point, poly)) {\n        points[[x, y].join(';')] = {\n          x: localx,\n          y: localy\n        };\n      }\n    }\n  }\n  return {\n    points: points,\n    X_MIN: X_MIN,\n    Y_MIN: Y_MIN,\n    X_MAX: X_MAX,\n    Y_MAX: Y_MAX,\n    X_RANGE: X_RANGE,\n    Y_RANGE: Y_RANGE,\n    region: region,\n    grid: grid,\n    height: height,\n    width: width,\n    ystep: ystep\n  };\n};\nexport var getMapJSON = function getMapJSON(props) {\n  return JSON.stringify(getMap(props));\n};\nvar getCacheKey = function getCacheKey(_ref6) {\n  var _ref6$height = _ref6.height,\n    height = _ref6$height === void 0 ? 0 : _ref6$height,\n    _ref6$width = _ref6.width,\n    width = _ref6$width === void 0 ? 0 : _ref6$width,\n    _ref6$countries = _ref6.countries,\n    countries = _ref6$countries === void 0 ? [] : _ref6$countries,\n    region = _ref6.region,\n    _ref6$grid = _ref6.grid,\n    grid = _ref6$grid === void 0 ? 'vertical' : _ref6$grid;\n  return [JSON.stringify(region), grid, height, width, JSON.stringify(countries)].join(' ');\n};\nfunction DottedMap(_ref7) {\n  var _ref7$avoidOuterPins = _ref7.avoidOuterPins,\n    avoidOuterPins = _ref7$avoidOuterPins === void 0 ? false : _ref7$avoidOuterPins,\n    args = _objectWithoutProperties(_ref7, _excluded);\n  var cacheKey = getCacheKey(args);\n  var map = CACHE[cacheKey] || getMap(args);\n  return new DottedMapWithoutCountries({\n    avoidOuterPins: avoidOuterPins,\n    map: map\n  });\n}\nexport default DottedMap;","map":{"version":3,"names":["proj4","inside","geojsonWorld","DottedMapWithoutCountries","geojsonByCountry","features","reduce","countries","feature","id","geojsonToMultiPolygons","geojson","coordinates","poly","concat","geometry","type","CACHE","DEFAULT_WORLD_REGION","lat","min","max","lng","computeGeojsonBox","boxes","map","Math","apply","_toConsumableArray","box","flat","coords","latitudes","_ref","_ref2","_slicedToArray","_lng","longitudes","_ref3","_ref4","_lat","Error","getMap","_ref5","_ref5$height","height","_ref5$width","width","_ref5$countries","region","_ref5$grid","grid","length","country","_proj","defs","_proj2","X_MIN","Y_MIN","_proj3","_proj4","X_MAX","Y_MAX","X_RANGE","Y_RANGE","round","points","ystep","sqrt","y","x","localx","localy","pointGoogle","wgs84Point","join","getMapJSON","props","JSON","stringify","getCacheKey","_ref6","_ref6$height","_ref6$width","_ref6$countries","_ref6$grid","DottedMap","_ref7","_ref7$avoidOuterPins","avoidOuterPins","args","_objectWithoutProperties","_excluded","cacheKey"],"sources":["/Users/keisukeyoshida/js/dot-map-js/node_modules/dotted-map/src/with-countries.js"],"sourcesContent":["import proj4 from 'proj4';\nimport inside from '@turf/boolean-point-in-polygon';\nimport geojsonWorld from './countries.geo.json';\nimport DottedMapWithoutCountries from './without-countries';\n\nconst geojsonByCountry = geojsonWorld.features.reduce((countries, feature) => {\n  countries[feature.id] = feature;\n  return countries;\n}, {});\n\nconst geojsonToMultiPolygons = (geojson) => {\n  const coordinates = geojson.features.reduce(\n    (poly, feature) =>\n      poly.concat(\n        feature.geometry.type === 'Polygon'\n          ? [feature.geometry.coordinates]\n          : feature.geometry.coordinates,\n      ),\n    [],\n  );\n  return { type: 'Feature', geometry: { type: 'MultiPolygon', coordinates } };\n};\n\nconst CACHE = {};\n\nconst DEFAULT_WORLD_REGION = {\n  lat: { min: -56, max: 71 },\n  lng: { min: -179, max: 179 },\n};\n\nconst computeGeojsonBox = (geojson) => {\n  const { type, features, geometry, coordinates } = geojson;\n  if (type === 'FeatureCollection') {\n    const boxes = features.map(computeGeojsonBox);\n    return {\n      lat: {\n        min: Math.min(...boxes.map((box) => box.lat.min)),\n        max: Math.max(...boxes.map((box) => box.lat.max)),\n      },\n      lng: {\n        min: Math.min(...boxes.map((box) => box.lng.min)),\n        max: Math.max(...boxes.map((box) => box.lng.max)),\n      },\n    };\n  } else if (type == 'Feature') {\n    return computeGeojsonBox(geometry);\n  } else if (type === 'MultiPolygon') {\n    return computeGeojsonBox({\n      type: 'Polygon',\n      coordinates: coordinates.flat(),\n    });\n  } else if (type == 'Polygon') {\n    const coords = coordinates.flat();\n    const latitudes = coords.map(([_lng, lat]) => lat);\n    const longitudes = coords.map(([lng, _lat]) => lng);\n\n    return {\n      lat: {\n        min: Math.min(...latitudes),\n        max: Math.max(...latitudes),\n      },\n      lng: {\n        min: Math.min(...longitudes),\n        max: Math.max(...longitudes),\n      },\n    };\n  } else {\n    throw new Error(`Unknown geojson type ${type}`);\n  }\n};\n\nconst getMap = ({\n  height = 0,\n  width = 0,\n  countries = [],\n  region,\n  grid = 'vertical',\n}) => {\n  if (height <= 0 && width <= 0) {\n    throw new Error('height or width is required');\n  }\n\n  let geojson = geojsonWorld;\n  if (countries.length > 0) {\n    geojson = {\n      type: 'FeatureCollection',\n      features: countries.map((country) => geojsonByCountry[country]),\n    };\n    if (!region) {\n      region = computeGeojsonBox(geojson);\n    }\n  } else if (!region) {\n    region = DEFAULT_WORLD_REGION;\n  }\n\n  const poly = geojsonToMultiPolygons(geojson);\n\n  const [X_MIN, Y_MIN] = proj4(proj4.defs('GOOGLE'), [\n    region.lng.min,\n    region.lat.min,\n  ]);\n  const [X_MAX, Y_MAX] = proj4(proj4.defs('GOOGLE'), [\n    region.lng.max,\n    region.lat.max,\n  ]);\n  const X_RANGE = X_MAX - X_MIN;\n  const Y_RANGE = Y_MAX - Y_MIN;\n\n  if (width <= 0) {\n    width = Math.round((height * X_RANGE) / Y_RANGE);\n  } else if (height <= 0) {\n    height = Math.round((width * Y_RANGE) / X_RANGE);\n  }\n\n  const points = {};\n  const ystep = grid === 'diagonal' ? Math.sqrt(3) / 2 : 1;\n\n  for (let y = 0; y * ystep < height; y += 1) {\n    for (let x = 0; x < width; x += 1) {\n      const localx = y % 2 === 0 && grid === 'diagonal' ? x + 0.5 : x;\n      const localy = y * ystep;\n\n      const pointGoogle = [\n        (localx / width) * X_RANGE + X_MIN,\n        Y_MAX - (localy / height) * Y_RANGE,\n      ];\n      const wgs84Point = proj4(\n        proj4.defs('GOOGLE'),\n        proj4.defs('WGS84'),\n        pointGoogle,\n      );\n\n      if (inside(wgs84Point, poly)) {\n        points[[x, y].join(';')] = { x: localx, y: localy };\n      }\n    }\n  }\n\n  return {\n    points,\n    X_MIN,\n    Y_MIN,\n    X_MAX,\n    Y_MAX,\n    X_RANGE,\n    Y_RANGE,\n    region,\n    grid,\n    height,\n    width,\n    ystep,\n  };\n};\n\nexport const getMapJSON = (props) => JSON.stringify(getMap(props));\n\nconst getCacheKey = ({\n  height = 0,\n  width = 0,\n  countries = [],\n  region,\n  grid = 'vertical',\n}) => {\n  return [\n    JSON.stringify(region),\n    grid,\n    height,\n    width,\n    JSON.stringify(countries),\n  ].join(' ');\n};\n\nfunction DottedMap({ avoidOuterPins = false, ...args }) {\n  const cacheKey = getCacheKey(args);\n  const map = CACHE[cacheKey] || getMap(args);\n\n  return new DottedMapWithoutCountries({ avoidOuterPins, map });\n}\n\nexport default DottedMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}